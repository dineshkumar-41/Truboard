[
    {
        "id": "5dce1ee58ebc7724",
        "type": "tab",
        "label": "Engine_2 - TR_2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d6f5881f4cbe237",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "67aced96bd7c9761",
        "type": "tab",
        "label": "Influx",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "0c34fef90e1f7ed5",
        "type": "tab",
        "label": "Influx",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e5f15136f28abf49",
        "type": "group",
        "z": "2d6f5881f4cbe237",
        "name": "MQTT SEND",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fd92247130b88cc3",
            "e49daaa61deabaf9",
            "d41d5b7390d59fd2",
            "54d9750c22bfe598"
        ],
        "x": 754,
        "y": 599,
        "w": 632,
        "h": 122
    },
    {
        "id": "85daa5ecd4a98e20",
        "type": "group",
        "z": "2d6f5881f4cbe237",
        "name": "MQTT_RECIEVE",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "99244a37bc3810e3",
            "e147401f99299dad",
            "8ba170981813f993",
            "671b22409c768f8d",
            "2f05394ecb781c28",
            "3666d05366139b1a",
            "8efb7730fd020dab",
            "ef90eeecd33d1f39",
            "5cf954a3fdab1736"
        ],
        "x": 754,
        "y": 739,
        "w": 512,
        "h": 302
    },
    {
        "id": "e3200b981b426cbd",
        "type": "group",
        "z": "2d6f5881f4cbe237",
        "name": "MQTT_REC",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "47142774231ad397",
            "221feba182c5b732",
            "88905707aa47da92",
            "98364ec30f4e420c",
            "aeaa3c9408e8804d",
            "b4eca53a55a61301"
        ],
        "x": 74,
        "y": 599,
        "w": 632,
        "h": 162
    },
    {
        "id": "8a8e68d8fde2a0ee",
        "type": "group",
        "z": "2d6f5881f4cbe237",
        "name": "MQTT_REC_FOR_REMOTE ON/OFF",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a48fbbafe71a3c78",
            "c5025979c95d8993",
            "f2ed2bcee2b26bd9"
        ],
        "x": 74,
        "y": 819,
        "w": 592,
        "h": 102
    },
    {
        "id": "93d09c30c69e874a",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "696aad116011f9f1",
                "042a4deba70a4ec4",
                "b2cfe5c30667ab5c",
                "f5567c291e1d73d7",
                "fdd8d8ce26cac96c",
                "a91f5890797a602b",
                "86cabf56a4aa6033",
                "7cbefe44c4e69ab0",
                "38f6587deaaa6a3b",
                "39424c2dad8e50a7"
            ]
        ]
    },
    {
        "id": "9c9efb53c4986cd5",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 440,
        "y": 1000,
        "wires": [
            [
                "24775a11dff3efcb",
                "c3cf3828a6ae42ec",
                "8f4150e371320938",
                "9d040d2996189335",
                "9545f441ac1c095f",
                "e13fb71fc55e1244",
                "2e127B2423904cfd",
                "271f3b6d7a86c0c7",
                "ea829087784e2042",
                "679687116577ce90",
                "332bf4a9a8c9b96e"
            ]
        ]
    },
    {
        "id": "34e7019dbB21ca1c",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "514a38cc0f154140"
            ]
        ]
    },
    {
        "id": "f4eda9c7cbc80927",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 1040,
        "y": 1000,
        "wires": [
            [
                "514a38cc0f154140"
            ]
        ]
    },
    {
        "id": "514a38cc0f154140",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 1080,
        "y": 700,
        "wires": [
            [
                "caa34a6ce5c070c3"
            ]
        ]
    },
    {
        "id": "4d2974c4dc374531",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 380,
        "y": 700,
        "wires": [
            [
                "9c9efb53c4986cd5",
                "93d09c30c69e874a"
            ]
        ]
    },
    {
        "id": "5704384bfb18daea",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 2000,
        "y": 700,
        "wires": [
            [
                "c74a16f7f582150e",
                "29e95ea1a184faa9",
                "2f735a3b4d20acb4",
                "cd02971ab6ff38aa",
                "e38a2db92da97149",
                "45811681e89fcc80",
                "0f39b2f05f59658a",
                "78ef2a0892641806",
                "a60297c9f60eb59e",
                "967210e271089726",
                "65be42d77ab6465e",
                "cd5572f07eed81bb"
            ]
        ]
    },
    {
        "id": "e444bc462016e753",
        "type": "junction",
        "z": "67aced96bd7c9761",
        "x": 2600,
        "y": 700,
        "wires": [
            [
                "04e3954f27f6d608"
            ]
        ]
    },
    {
        "id": "c20d3d1501005e3c",
        "type": "junction",
        "z": "5dce1ee58ebc7724",
        "x": 440,
        "y": 1160,
        "wires": [
            [
                "8b719684d681f7b8",
                "eac7b5f3c99e263b",
                "418a420977dc33ab",
                "67894b04c7c62879",
                "b0c3d22643214530",
                "9a2c4c72e47e1370",
                "18621b8494a78561",
                "2534f27baeeb9019",
                "239f004502baa808",
                "8a139aeb27dd31bb",
                "b871a74f45c57548",
                "1e727daa90f6547b",
                "dc2aa308ca0a43be",
                "6c0ad78f3a2b0fc1",
                "562675b0f123634e",
                "65a3fc10e9581c6b",
                "2149cfa517e3fc69",
                "28549161410e86cf",
                "f626c8022dd231ec",
                "c68f4fcdb46c8219",
                "46b13e52d2426ad3",
                "9c5eb390fadf3bce",
                "68638795e048a3d4",
                "c207f56144b9c31c"
            ]
        ]
    },
    {
        "id": "4df8a90d6ec1e45b",
        "type": "junction",
        "z": "5dce1ee58ebc7724",
        "x": 2060,
        "y": 1280,
        "wires": [
            [
                "951aaa0760fb6116",
                "29306302eb7afa2d",
                "4788c9c9301b03d7",
                "a00fb4697dcd2dbe",
                "2f3bd1f282894eb4",
                "215162a26344bc3f",
                "7a8518740698810c",
                "72e1cc6ed6baa4dd",
                "f18fb3c0b66bf021",
                "5acacbde612738f9",
                "944a411d46aa4e3c",
                "6c11e85484c67d4d",
                "2b6cc4510142d84f",
                "7ae3eadb178f472c",
                "756745bff3bf132d",
                "7dd8e6f5d254f369",
                "257a9ad1441510c2",
                "48b58d5d9cb15ae7",
                "8ac311497b6b426f",
                "7fcca773293836eb",
                "04247c0cabcc3d4e",
                "43eef33d85593cc3",
                "d32aed52639f2cf9",
                "ce25a91677a18969",
                "9cfcd6cf892aa01e",
                "bc163dda4eb9128e",
                "2a88c74764731ab3",
                "b9d2b46604424e65"
            ]
        ]
    },
    {
        "id": "037a525bdad20317",
        "type": "junction",
        "z": "5dce1ee58ebc7724",
        "x": 3760,
        "y": 480,
        "wires": [
            [
                "1cbdb3f5019390f3",
                "8aa1e267789074f6",
                "b302d4397966c951",
                "2ab31f06f1ca5ad0",
                "3d764367881ba56f",
                "52325ba43f0b0cb5",
                "88ded2f55d4a063b",
                "8788588524c34ce8",
                "939b243be81406af",
                "dfa7be5746449e77",
                "9efa85b04f219e04",
                "02ffca1eeb5dc967"
            ]
        ]
    },
    {
        "id": "da41ae6625a4fbf1",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "ad6a0f852d8120df",
                "09b59083e0f91efb",
                "ccb54e4cc7803efc",
                "a9c5d5ff95c0438b",
                "885d106b96d3ee5f",
                "f103867e394807e8",
                "1b5658f1851454f9",
                "3b6680459ab446d4",
                "3fb063535a4be023",
                "cbb1752c77f7ec75"
            ]
        ]
    },
    {
        "id": "4bedf6e349e374a9",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 440,
        "y": 1000,
        "wires": [
            [
                "720262fb41cc2671",
                "e99210e98d8b1115",
                "a1e57ad87f7f9225",
                "8c61caad8e837b74",
                "b4a068d1393812c8",
                "7d433a9ce6916aac",
                "83e0e90995ec4a10",
                "6865ed9a218d8c4d",
                "af9c718161d993aa",
                "b42a9b8286d4e4aa",
                "67889df1766618c0"
            ]
        ]
    },
    {
        "id": "5c3fba88199b7c53",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "99b30a816b82f574"
            ]
        ]
    },
    {
        "id": "963c24662bb00fe0",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 1040,
        "y": 1000,
        "wires": [
            [
                "99b30a816b82f574"
            ]
        ]
    },
    {
        "id": "99b30a816b82f574",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 1080,
        "y": 700,
        "wires": [
            [
                "191f0bb17818b938"
            ]
        ]
    },
    {
        "id": "9172fb6f3b948711",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 380,
        "y": 700,
        "wires": [
            [
                "4bedf6e349e374a9",
                "da41ae6625a4fbf1"
            ]
        ]
    },
    {
        "id": "4df8af329b8797a0",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 2000,
        "y": 700,
        "wires": [
            [
                "0cc914bb290cf893",
                "5fb6f911df86b7dc",
                "cb3cb395850c90ab",
                "96d5595ff1160d68",
                "8c32478eed3e566d",
                "097981093d0241f1",
                "5f764afa47d77b0f",
                "d9bd12aeab8eb720",
                "93968ab01418f631",
                "0bf15a6ac44a397c",
                "8ae58c6c09208865",
                "e9d2b382caca6903"
            ]
        ]
    },
    {
        "id": "98b281dcbe2108ad",
        "type": "junction",
        "z": "0c34fef90e1f7ed5",
        "x": 2600,
        "y": 700,
        "wires": [
            [
                "5317e47b96b62ac7"
            ]
        ]
    },
    {
        "id": "f7dc57f35fcfe8fe",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.87.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bf5ddb6c5930fafc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.87.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "827b232dd9833a8f",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.18.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "708623dadef4bbf1",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.18.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b17e5e8f85480b2a",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.19.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6bff0641d686e7df",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.19.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "53ca2f2ab8070942",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.21.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3b4a191f290a5e30",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.21.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1622f30871b90e8c",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.22.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8da2d31f751ee7fd",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.22.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "efc4efa57f6bb119",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.23.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a1f97a02dbb14eb2",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.23.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f66a8c816623294a",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.24.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f23271f541ed5236",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.24.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 50,
        "clientTimeout": 2000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 200,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "41cda0735b0b1345",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.25.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a2e5c2031f5965dd",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.25.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "16d6a04bc39ab037",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.26.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "cc949d3a99d92acd",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.26.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3ed37b87e6865e7c",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.33.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "37fbc4f29bb3b9ab",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ce8227575427df28",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.41.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fb538301cc25aade",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.41.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "695f520ed762c60c",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.42.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b6950fc2d98155ab",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.42.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "77d75ba115f6b74f",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.44.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ba5a215f7efce9d5",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.44.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b7e8f5c9ba98111f",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.47.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "bcbfbdad70b285e1",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.47.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5ff0365c40178a72",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.48.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "97742cafe0b8af2d",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "703758502a913ad6",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.49.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "7113333fdd30126b",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.49.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ae5f309b761bd201",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.50.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d13123151422e6d6",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.50.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9e6b7d4fa70e76f2",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.87.82:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "4012a214602a528a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "064f78d4548335a2",
        "type": "catch",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1020,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6dcdf6131b77ce80",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 18 - INV 01",
        "info": "",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "7020c7503d021091",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Engine 02- Block 18 - INV 02",
        "info": "",
        "x": 460,
        "y": 320,
        "wires": []
    },
    {
        "id": "69f66eb2625d1c37",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 19 - INV 01",
        "info": "",
        "x": 460,
        "y": 460,
        "wires": []
    },
    {
        "id": "62bb3ccd4ac27ed9",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 19 - INV 02",
        "info": "",
        "x": 500,
        "y": 620,
        "wires": []
    },
    {
        "id": "6c1bc5b05ceb6518",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 21 - INV 01",
        "info": "",
        "x": 520,
        "y": 800,
        "wires": []
    },
    {
        "id": "5e0c08cb2985857b",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Engine 02- Block 21 - INV 02",
        "info": "",
        "x": 500,
        "y": 980,
        "wires": []
    },
    {
        "id": "b1fed592afbc1c4f",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 22 - INV 01",
        "info": "",
        "x": 620,
        "y": 1160,
        "wires": []
    },
    {
        "id": "7fea8a685b418283",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 22 - INV 02",
        "info": "",
        "x": 500,
        "y": 1360,
        "wires": []
    },
    {
        "id": "23590c063fa9fee4",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Engine 02- Block 23 - INV 01",
        "info": "",
        "x": 480,
        "y": 1580,
        "wires": []
    },
    {
        "id": "17cc831717fc64e0",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Engine 02- Block 23 - INV 02",
        "info": "",
        "x": 480,
        "y": 1780,
        "wires": []
    },
    {
        "id": "c14b40f39d8daa51",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 24 - INV 01",
        "info": "",
        "x": 500,
        "y": 1980,
        "wires": []
    },
    {
        "id": "20328e5aba4c1d6f",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 24 - INV 02",
        "info": "",
        "x": 500,
        "y": 2140,
        "wires": []
    },
    {
        "id": "4358773285f67cab",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 25 - INV 02",
        "info": "",
        "x": 2040,
        "y": 320,
        "wires": []
    },
    {
        "id": "52f914e9dd21076e",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 26 - INV 01",
        "info": "",
        "x": 2040,
        "y": 480,
        "wires": []
    },
    {
        "id": "44a6a5bb36414a1a",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 26- INV 02",
        "info": "",
        "x": 2040,
        "y": 640,
        "wires": []
    },
    {
        "id": "2e872c8555803b6e",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 33 - INV 01",
        "info": "",
        "x": 2040,
        "y": 800,
        "wires": []
    },
    {
        "id": "da3daf515b76ef52",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 33 - INV 02",
        "info": "",
        "x": 2050,
        "y": 960,
        "wires": []
    },
    {
        "id": "b8587a4bf7b21d84",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 41 - INV 01",
        "info": "",
        "x": 2060,
        "y": 1120,
        "wires": []
    },
    {
        "id": "395672dcea2f2caa",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 41 - INV 02",
        "info": "",
        "x": 2240,
        "y": 1280,
        "wires": []
    },
    {
        "id": "848558f0c5664095",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 42 - INV 01",
        "info": "",
        "x": 2080,
        "y": 1440,
        "wires": []
    },
    {
        "id": "41c5a1b9e262b01f",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Engine 02- Block 42 - INV 02",
        "info": "",
        "x": 2080,
        "y": 1600,
        "wires": []
    },
    {
        "id": "7c85f7b2ae0e8089",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Engine 02- Block 44 - INV 01",
        "info": "",
        "x": 2080,
        "y": 1740,
        "wires": []
    },
    {
        "id": "42a00d03f6d46d5d",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 44 - INV 02",
        "info": "",
        "x": 2080,
        "y": 1920,
        "wires": []
    },
    {
        "id": "95ef87bb9896d1ca",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 47 - INV 01",
        "info": "",
        "x": 2080,
        "y": 2100,
        "wires": []
    },
    {
        "id": "83cf6e7ea70d7464",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 47- INV 02",
        "info": "",
        "x": 2080,
        "y": 2280,
        "wires": []
    },
    {
        "id": "fa96ed6c7e1517c2",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 48 - INV 01",
        "info": "",
        "x": 3760,
        "y": 60,
        "wires": []
    },
    {
        "id": "d471f3e28024226c",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Engine 02- Block 48 - INV 02",
        "info": "",
        "x": 3760,
        "y": 200,
        "wires": []
    },
    {
        "id": "3cd941c3ffc6c587",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 49 - INV 01",
        "info": "",
        "x": 3760,
        "y": 340,
        "wires": []
    },
    {
        "id": "bc8694a1c6a2e4ba",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 49 - INV 02",
        "info": "",
        "x": 3940,
        "y": 480,
        "wires": []
    },
    {
        "id": "54fe973e628e4963",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 50 - INV 01",
        "info": "",
        "x": 3760,
        "y": 620,
        "wires": []
    },
    {
        "id": "06feffa28023807b",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 50 - INV 02",
        "info": "",
        "x": 3760,
        "y": 760,
        "wires": []
    },
    {
        "id": "ae2d9aa92a5c820f",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Block 2 reference ICR",
        "info": "",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "bb3c2c5f8986d720",
        "type": "comment",
        "z": "5dce1ee58ebc7724",
        "name": "Engine 02- Block 25 - INV 01",
        "info": "",
        "x": 2040,
        "y": 120,
        "wires": []
    },
    {
        "id": "09f5958fc479d2ca",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 260,
        "wires": [
            [
                "ea4a727b29c2f84a"
            ]
        ]
    },
    {
        "id": "8bb535cd48828c80",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "865580f310a147cf"
            ]
        ]
    },
    {
        "id": "5af53b1ff6430b05",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 280,
        "wires": [
            [
                "8bb535cd48828c80"
            ]
        ]
    },
    {
        "id": "eac7b5f3c99e263b",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 590,
        "y": 280,
        "wires": [
            [
                "5af53b1ff6430b05"
            ]
        ]
    },
    {
        "id": "ae0c083b409ae2c2",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 260,
        "wires": [
            [
                "09f5958fc479d2ca"
            ]
        ]
    },
    {
        "id": "865580f310a147cf",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "827b232dd9833a8f",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "ae0c083b409ae2c2"
            ],
            []
        ]
    },
    {
        "id": "ea4a727b29c2f84a",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "31365e3a47d02e4d",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "3723feeace74724c"
            ]
        ]
    },
    {
        "id": "8b719684d681f7b8",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B18,BLOCK-18,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 590,
        "y": 220,
        "wires": [
            [
                "31365e3a47d02e4d"
            ]
        ]
    },
    {
        "id": "3723feeace74724c",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 220,
        "wires": [
            [
                "0a574c2cdb450f70"
            ]
        ]
    },
    {
        "id": "0a574c2cdb450f70",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "24e059e70db38777",
                "865580f310a147cf"
            ]
        ]
    },
    {
        "id": "24e059e70db38777",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2870",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "504b40dc9b5cf60b",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 400,
        "wires": [
            [
                "f93fd7a45d3cdd9b"
            ]
        ]
    },
    {
        "id": "0763f7a94f9566b9",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 420,
        "wires": [
            [
                "be503fda6e368d2d"
            ]
        ]
    },
    {
        "id": "df55aed101e8d8fd",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 420,
        "wires": [
            [
                "0763f7a94f9566b9"
            ]
        ]
    },
    {
        "id": "9a2c4c72e47e1370",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "df55aed101e8d8fd"
            ]
        ]
    },
    {
        "id": "628cbf89e7befc83",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 400,
        "wires": [
            [
                "504b40dc9b5cf60b"
            ]
        ]
    },
    {
        "id": "be503fda6e368d2d",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "708623dadef4bbf1",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "628cbf89e7befc83"
            ],
            []
        ]
    },
    {
        "id": "f93fd7a45d3cdd9b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "645f6470afbe63c9",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 360,
        "wires": [
            [
                "c19b5e70a42938fe"
            ]
        ]
    },
    {
        "id": "418a420977dc33ab",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B18,BLOCK-18,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 590,
        "y": 360,
        "wires": [
            [
                "645f6470afbe63c9"
            ]
        ]
    },
    {
        "id": "c19b5e70a42938fe",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 360,
        "wires": [
            [
                "f21a42073843aea1"
            ]
        ]
    },
    {
        "id": "f21a42073843aea1",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "2589564c891f977c"
            ]
        ]
    },
    {
        "id": "2589564c891f977c",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "debug 2871",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 360,
        "wires": []
    },
    {
        "id": "d60c61122d51a3f9",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "60501f0735d29e02"
            ]
        ]
    },
    {
        "id": "9eae684ae9e907ac",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 580,
        "wires": [
            [
                "2b69b2fb26dd054d"
            ]
        ]
    },
    {
        "id": "9f9fde94cc2ba0d7",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 580,
        "wires": [
            [
                "9eae684ae9e907ac"
            ]
        ]
    },
    {
        "id": "b0c3d22643214530",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 590,
        "y": 580,
        "wires": [
            [
                "9f9fde94cc2ba0d7"
            ]
        ]
    },
    {
        "id": "5656ae4edd08ed03",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "d60c61122d51a3f9"
            ]
        ]
    },
    {
        "id": "2b69b2fb26dd054d",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "b17e5e8f85480b2a",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "5656ae4edd08ed03"
            ],
            []
        ]
    },
    {
        "id": "60501f0735d29e02",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "bddb870a9fdbe85b",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 520,
        "wires": [
            [
                "87eb77f848f26f88"
            ]
        ]
    },
    {
        "id": "67894b04c7c62879",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B19,BLOCK-19,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "bddb870a9fdbe85b"
            ]
        ]
    },
    {
        "id": "87eb77f848f26f88",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "43660810997f7370"
            ]
        ]
    },
    {
        "id": "43660810997f7370",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "e59ca1ac45a81429",
                "2b69b2fb26dd054d"
            ]
        ]
    },
    {
        "id": "e59ca1ac45a81429",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2872",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 520,
        "wires": []
    },
    {
        "id": "7935b164c3c5012c",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 720,
        "wires": [
            [
                "43aa5c2b23b61a0c"
            ]
        ]
    },
    {
        "id": "a4204a732ceeec98",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 740,
        "wires": [
            [
                "0bf674708f7c9b32"
            ]
        ]
    },
    {
        "id": "448580da152df51b",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 740,
        "wires": [
            [
                "a4204a732ceeec98"
            ]
        ]
    },
    {
        "id": "2534f27baeeb9019",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 590,
        "y": 740,
        "wires": [
            [
                "448580da152df51b"
            ]
        ]
    },
    {
        "id": "e67f72c18be72e65",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 720,
        "wires": [
            [
                "7935b164c3c5012c"
            ]
        ]
    },
    {
        "id": "0bf674708f7c9b32",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "6bff0641d686e7df",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1030,
        "y": 740,
        "wires": [
            [
                "e67f72c18be72e65"
            ],
            []
        ]
    },
    {
        "id": "43aa5c2b23b61a0c",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4ba46ed0ef206735",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 680,
        "wires": [
            [
                "07f7b009f9448455"
            ]
        ]
    },
    {
        "id": "18621b8494a78561",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B19,BLOCK-19,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 590,
        "y": 680,
        "wires": [
            [
                "4ba46ed0ef206735"
            ]
        ]
    },
    {
        "id": "07f7b009f9448455",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 680,
        "wires": [
            [
                "98f9043ddf3416ba"
            ]
        ]
    },
    {
        "id": "98f9043ddf3416ba",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 680,
        "wires": [
            [
                "c26c727567706a33",
                "0bf674708f7c9b32"
            ]
        ]
    },
    {
        "id": "c26c727567706a33",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2873",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 680,
        "wires": []
    },
    {
        "id": "a663d4a86e7a397d",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 880,
        "wires": [
            [
                "46695f497102112b"
            ]
        ]
    },
    {
        "id": "d650fb830d1ab1ca",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 900,
        "wires": [
            [
                "e0ebd7795293946c"
            ]
        ]
    },
    {
        "id": "d0eaf1dc3bd5f503",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 900,
        "wires": [
            [
                "d650fb830d1ab1ca"
            ]
        ]
    },
    {
        "id": "8a139aeb27dd31bb",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 590,
        "y": 900,
        "wires": [
            [
                "d0eaf1dc3bd5f503"
            ]
        ]
    },
    {
        "id": "4653db7f4436f209",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 880,
        "wires": [
            [
                "a663d4a86e7a397d"
            ]
        ]
    },
    {
        "id": "e0ebd7795293946c",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "53ca2f2ab8070942",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1030,
        "y": 900,
        "wires": [
            [
                "4653db7f4436f209"
            ],
            []
        ]
    },
    {
        "id": "46695f497102112b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "ba5b31131d8c158a",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 840,
        "wires": [
            [
                "e24f98c2863094b2"
            ]
        ]
    },
    {
        "id": "239f004502baa808",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B21,BLOCK-21,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 590,
        "y": 840,
        "wires": [
            [
                "ba5b31131d8c158a"
            ]
        ]
    },
    {
        "id": "e24f98c2863094b2",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 840,
        "wires": [
            [
                "41178a27a9d13c93"
            ]
        ]
    },
    {
        "id": "41178a27a9d13c93",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 840,
        "wires": [
            [
                "ea91d807a6d5d1e9",
                "e0ebd7795293946c"
            ]
        ]
    },
    {
        "id": "ea91d807a6d5d1e9",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2874",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 840,
        "wires": []
    },
    {
        "id": "c6f31bd7c23145d9",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1310,
        "y": 1080,
        "wires": [
            [
                "f1ab39199a793b19"
            ]
        ]
    },
    {
        "id": "2559f586fc125fde",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1100,
        "wires": [
            [
                "1cca826dd42b77ce"
            ]
        ]
    },
    {
        "id": "e65e9041cb471f2d",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1100,
        "wires": [
            [
                "2559f586fc125fde"
            ]
        ]
    },
    {
        "id": "1e727daa90f6547b",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "e65e9041cb471f2d"
            ]
        ]
    },
    {
        "id": "916bc729a6e5d2a2",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1080,
        "wires": [
            [
                "c6f31bd7c23145d9"
            ]
        ]
    },
    {
        "id": "1cca826dd42b77ce",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "3b4a191f290a5e30",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1010,
        "y": 1100,
        "wires": [
            [
                "916bc729a6e5d2a2"
            ],
            []
        ]
    },
    {
        "id": "f1ab39199a793b19",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "db2a96aa418daec5",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1040,
        "wires": [
            [
                "135dd5be29c72ae2"
            ]
        ]
    },
    {
        "id": "b871a74f45c57548",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B21,BLOCK-21,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 570,
        "y": 1040,
        "wires": [
            [
                "db2a96aa418daec5"
            ]
        ]
    },
    {
        "id": "135dd5be29c72ae2",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1040,
        "wires": [
            [
                "45bbf2cc3a938594"
            ]
        ]
    },
    {
        "id": "45bbf2cc3a938594",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1040,
        "wires": [
            [
                "8bd5a75a51f3cc8a"
            ]
        ]
    },
    {
        "id": "8bd5a75a51f3cc8a",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "debug 2875",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e6482743eb9d1fd3",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1310,
        "y": 1460,
        "wires": [
            [
                "93465dd22da8c8c0"
            ]
        ]
    },
    {
        "id": "ab14e1b32df0ce11",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "ca535549fbcd6850"
            ]
        ]
    },
    {
        "id": "94656a0f39b8785e",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1480,
        "wires": [
            [
                "ab14e1b32df0ce11"
            ]
        ]
    },
    {
        "id": "65a3fc10e9581c6b",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 570,
        "y": 1480,
        "wires": [
            [
                "94656a0f39b8785e"
            ]
        ]
    },
    {
        "id": "2a3639747902c768",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1460,
        "wires": [
            [
                "e6482743eb9d1fd3"
            ]
        ]
    },
    {
        "id": "ca535549fbcd6850",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "8da2d31f751ee7fd",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1010,
        "y": 1480,
        "wires": [
            [
                "2a3639747902c768"
            ],
            []
        ]
    },
    {
        "id": "93465dd22da8c8c0",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "d70fe2b1d9fb549b",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1420,
        "wires": [
            [
                "354ea4230aa7a20b"
            ]
        ]
    },
    {
        "id": "562675b0f123634e",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B22,BLOCK-22,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 570,
        "y": 1420,
        "wires": [
            [
                "d70fe2b1d9fb549b"
            ]
        ]
    },
    {
        "id": "354ea4230aa7a20b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1420,
        "wires": [
            [
                "2d85e3e9798ebe59"
            ]
        ]
    },
    {
        "id": "2d85e3e9798ebe59",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1420,
        "wires": [
            [
                "a0acb0847cc333ab",
                "ca535549fbcd6850"
            ]
        ]
    },
    {
        "id": "a0acb0847cc333ab",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2877",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1420,
        "wires": []
    },
    {
        "id": "2f34eb6d19031ef1",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1310,
        "y": 1260,
        "wires": [
            [
                "622a412867db0904"
            ]
        ]
    },
    {
        "id": "42bd18dfd479fc3b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1280,
        "wires": [
            [
                "0b1ab228ff6d6b4c"
            ]
        ]
    },
    {
        "id": "78c988a444853189",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1280,
        "wires": [
            [
                "42bd18dfd479fc3b"
            ]
        ]
    },
    {
        "id": "6c0ad78f3a2b0fc1",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 570,
        "y": 1280,
        "wires": [
            [
                "78c988a444853189"
            ]
        ]
    },
    {
        "id": "ae3fe22f55f11052",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1260,
        "wires": [
            [
                "2f34eb6d19031ef1"
            ]
        ]
    },
    {
        "id": "0b1ab228ff6d6b4c",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "1622f30871b90e8c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1010,
        "y": 1280,
        "wires": [
            [
                "ae3fe22f55f11052"
            ],
            []
        ]
    },
    {
        "id": "622a412867db0904",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "7943db1b78d9abea",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1220,
        "wires": [
            [
                "b065670b5f7d399e"
            ]
        ]
    },
    {
        "id": "dc2aa308ca0a43be",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B22,BLOCK-22,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "7943db1b78d9abea"
            ]
        ]
    },
    {
        "id": "b065670b5f7d399e",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1220,
        "wires": [
            [
                "ac5a3772d15dd656"
            ]
        ]
    },
    {
        "id": "ac5a3772d15dd656",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1220,
        "wires": [
            [
                "5ff8ffe83fc17955",
                "0b1ab228ff6d6b4c"
            ]
        ]
    },
    {
        "id": "5ff8ffe83fc17955",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2878",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1220,
        "wires": []
    },
    {
        "id": "942f56ce2a318552",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 1680,
        "wires": [
            [
                "dd09fb514f367d80"
            ]
        ]
    },
    {
        "id": "98f218fb741f295b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1700,
        "wires": [
            [
                "a68006231ff15b88"
            ]
        ]
    },
    {
        "id": "06206b1343729298",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 1700,
        "wires": [
            [
                "98f218fb741f295b"
            ]
        ]
    },
    {
        "id": "28549161410e86cf",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 550,
        "y": 1700,
        "wires": [
            [
                "06206b1343729298"
            ]
        ]
    },
    {
        "id": "bf912b2bbb12ed79",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1680,
        "wires": [
            [
                "942f56ce2a318552"
            ]
        ]
    },
    {
        "id": "a68006231ff15b88",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "efc4efa57f6bb119",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 990,
        "y": 1700,
        "wires": [
            [
                "bf912b2bbb12ed79"
            ],
            []
        ]
    },
    {
        "id": "dd09fb514f367d80",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "e6eb00e99b95461f",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 1640,
        "wires": [
            [
                "c8d0cc9370784ac8"
            ]
        ]
    },
    {
        "id": "2149cfa517e3fc69",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B23,BLOCK-23,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 550,
        "y": 1640,
        "wires": [
            [
                "e6eb00e99b95461f"
            ]
        ]
    },
    {
        "id": "c8d0cc9370784ac8",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1640,
        "wires": [
            [
                "d74be040ee5f74c7"
            ]
        ]
    },
    {
        "id": "d74be040ee5f74c7",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1640,
        "wires": [
            [
                "87da65b325213556"
            ]
        ]
    },
    {
        "id": "87da65b325213556",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "debug 2879",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1640,
        "wires": []
    },
    {
        "id": "2191c19118ec1a44",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 1880,
        "wires": [
            [
                "72b72be76cbf1d20"
            ]
        ]
    },
    {
        "id": "fd02a5cfb59e513a",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1900,
        "wires": [
            [
                "86f1477f1d071438"
            ]
        ]
    },
    {
        "id": "11573250534879b0",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 1900,
        "wires": [
            [
                "fd02a5cfb59e513a"
            ]
        ]
    },
    {
        "id": "c68f4fcdb46c8219",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 550,
        "y": 1900,
        "wires": [
            [
                "11573250534879b0"
            ]
        ]
    },
    {
        "id": "83b7339f76d43f59",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1880,
        "wires": [
            [
                "2191c19118ec1a44"
            ]
        ]
    },
    {
        "id": "86f1477f1d071438",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "a1f97a02dbb14eb2",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 990,
        "y": 1900,
        "wires": [
            [
                "83b7339f76d43f59"
            ],
            []
        ]
    },
    {
        "id": "72b72be76cbf1d20",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "43673ec1d4966a0a",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 1840,
        "wires": [
            [
                "87e977debc65b9f6"
            ]
        ]
    },
    {
        "id": "f626c8022dd231ec",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B23,BLOCK-23,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 550,
        "y": 1840,
        "wires": [
            [
                "43673ec1d4966a0a"
            ]
        ]
    },
    {
        "id": "87e977debc65b9f6",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1840,
        "wires": [
            [
                "54fe7b0a39b09152"
            ]
        ]
    },
    {
        "id": "54fe7b0a39b09152",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1840,
        "wires": [
            [
                "86344ddd7d2af3d4"
            ]
        ]
    },
    {
        "id": "86344ddd7d2af3d4",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "debug 2880",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1840,
        "wires": []
    },
    {
        "id": "07e9fd96386a854f",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 2080,
        "wires": [
            [
                "54fcdbedc0b33377"
            ]
        ]
    },
    {
        "id": "14624feea4a3908a",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2100,
        "wires": [
            [
                "26ff85526819d528"
            ]
        ]
    },
    {
        "id": "30241a109a95343d",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 2100,
        "wires": [
            [
                "14624feea4a3908a"
            ]
        ]
    },
    {
        "id": "9c5eb390fadf3bce",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 550,
        "y": 2100,
        "wires": [
            [
                "30241a109a95343d"
            ]
        ]
    },
    {
        "id": "66947e5d36ca2fe7",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2080,
        "wires": [
            [
                "07e9fd96386a854f"
            ]
        ]
    },
    {
        "id": "26ff85526819d528",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "f66a8c816623294a",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 990,
        "y": 2100,
        "wires": [
            [
                "66947e5d36ca2fe7"
            ],
            []
        ]
    },
    {
        "id": "54fcdbedc0b33377",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "4a95a5c34ad0022a",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 2040,
        "wires": [
            [
                "4b6b487470316764"
            ]
        ]
    },
    {
        "id": "46b13e52d2426ad3",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B24,BLOCK-24,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 550,
        "y": 2040,
        "wires": [
            [
                "4a95a5c34ad0022a"
            ]
        ]
    },
    {
        "id": "4b6b487470316764",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2040,
        "wires": [
            [
                "8f31ebbf5e290c65"
            ]
        ]
    },
    {
        "id": "8f31ebbf5e290c65",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2040,
        "wires": [
            [
                "599d45a0defd36df",
                "26ff85526819d528"
            ]
        ]
    },
    {
        "id": "599d45a0defd36df",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2881",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2040,
        "wires": []
    },
    {
        "id": "1146d2536bcb2202",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1270,
        "y": 2240,
        "wires": [
            [
                "90f1de311a523437"
            ]
        ]
    },
    {
        "id": "aa9326174ce88b4b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2260,
        "wires": [
            [
                "08118480ad29d4e7"
            ]
        ]
    },
    {
        "id": "f28176c6128b0db3",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 2260,
        "wires": [
            [
                "aa9326174ce88b4b"
            ]
        ]
    },
    {
        "id": "c207f56144b9c31c",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 530,
        "y": 2260,
        "wires": [
            [
                "f28176c6128b0db3"
            ]
        ]
    },
    {
        "id": "c08231397405c51f",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 2240,
        "wires": [
            [
                "1146d2536bcb2202"
            ]
        ]
    },
    {
        "id": "08118480ad29d4e7",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "f23271f541ed5236",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 970,
        "y": 2260,
        "wires": [
            [
                "c08231397405c51f"
            ],
            []
        ]
    },
    {
        "id": "90f1de311a523437",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "2340444a1d90fd3e",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 2200,
        "wires": [
            [
                "d3e2b0315677c6ed"
            ]
        ]
    },
    {
        "id": "68638795e048a3d4",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B24,BLOCK-24,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 530,
        "y": 2200,
        "wires": [
            [
                "2340444a1d90fd3e"
            ]
        ]
    },
    {
        "id": "d3e2b0315677c6ed",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2200,
        "wires": [
            [
                "2447a81cfd1253fe"
            ]
        ]
    },
    {
        "id": "2447a81cfd1253fe",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2200,
        "wires": [
            [
                "6f4aa1410dfa279b",
                "08118480ad29d4e7"
            ]
        ]
    },
    {
        "id": "6f4aa1410dfa279b",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2882",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 2200,
        "wires": []
    },
    {
        "id": "2c0bce9e9c159624",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 240,
        "wires": [
            [
                "c334eb513c4d7be3"
            ]
        ]
    },
    {
        "id": "f4cdb481d9b17cd6",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 260,
        "wires": [
            [
                "28361f31d808ba34"
            ]
        ]
    },
    {
        "id": "8b32c5eb80c11fe4",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 260,
        "wires": [
            [
                "f4cdb481d9b17cd6"
            ]
        ]
    },
    {
        "id": "29306302eb7afa2d",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 260,
        "wires": [
            [
                "8b32c5eb80c11fe4"
            ]
        ]
    },
    {
        "id": "7f664b69255730ec",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 240,
        "wires": [
            [
                "2c0bce9e9c159624"
            ]
        ]
    },
    {
        "id": "28361f31d808ba34",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "41cda0735b0b1345",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 260,
        "wires": [
            [
                "7f664b69255730ec"
            ],
            []
        ]
    },
    {
        "id": "c334eb513c4d7be3",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "49c08830735ec3ec",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 200,
        "wires": [
            [
                "134648e5a84a56dd"
            ]
        ]
    },
    {
        "id": "951aaa0760fb6116",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B25,BLOCK-25,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 200,
        "wires": [
            [
                "49c08830735ec3ec"
            ]
        ]
    },
    {
        "id": "134648e5a84a56dd",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 200,
        "wires": [
            [
                "7db44524184bd501"
            ]
        ]
    },
    {
        "id": "7db44524184bd501",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 200,
        "wires": [
            [
                "26dd51e0cedd5d2c",
                "28361f31d808ba34"
            ]
        ]
    },
    {
        "id": "26dd51e0cedd5d2c",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2883",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 200,
        "wires": []
    },
    {
        "id": "bcd2d0acbaaa08e6",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 400,
        "wires": [
            [
                "d52eaadd560a0586"
            ]
        ]
    },
    {
        "id": "1af1ba1b911e57f6",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 420,
        "wires": [
            [
                "b6a187580c6c49d2"
            ]
        ]
    },
    {
        "id": "7d9276ff608202ef",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 420,
        "wires": [
            [
                "1af1ba1b911e57f6"
            ]
        ]
    },
    {
        "id": "a00fb4697dcd2dbe",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 420,
        "wires": [
            [
                "7d9276ff608202ef"
            ]
        ]
    },
    {
        "id": "c9a1bbab5756db64",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 400,
        "wires": [
            [
                "bcd2d0acbaaa08e6"
            ]
        ]
    },
    {
        "id": "b6a187580c6c49d2",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "a2e5c2031f5965dd",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 420,
        "wires": [
            [
                "c9a1bbab5756db64"
            ],
            []
        ]
    },
    {
        "id": "d52eaadd560a0586",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "bdfcde8bf186134c",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 360,
        "wires": [
            [
                "79b29c86092a23ec"
            ]
        ]
    },
    {
        "id": "4788c9c9301b03d7",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B25,BLOCK-25,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 360,
        "wires": [
            [
                "bdfcde8bf186134c"
            ]
        ]
    },
    {
        "id": "79b29c86092a23ec",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 360,
        "wires": [
            [
                "b9cdb7026e0e3d30"
            ]
        ]
    },
    {
        "id": "b9cdb7026e0e3d30",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 360,
        "wires": [
            [
                "13ccdb7a4f140595",
                "b6a187580c6c49d2"
            ]
        ]
    },
    {
        "id": "13ccdb7a4f140595",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2884",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 360,
        "wires": []
    },
    {
        "id": "06235d2d82a0925b",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 560,
        "wires": [
            [
                "b49b807d54f06e17"
            ]
        ]
    },
    {
        "id": "2e7adc2782a0d08b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 580,
        "wires": [
            [
                "2fee63d6eb64c67b"
            ]
        ]
    },
    {
        "id": "28ba3b974397113c",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 580,
        "wires": [
            [
                "2e7adc2782a0d08b"
            ]
        ]
    },
    {
        "id": "215162a26344bc3f",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 580,
        "wires": [
            [
                "28ba3b974397113c"
            ]
        ]
    },
    {
        "id": "eee6ce5b0dcd09d3",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 560,
        "wires": [
            [
                "06235d2d82a0925b"
            ]
        ]
    },
    {
        "id": "2fee63d6eb64c67b",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "16d6a04bc39ab037",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 580,
        "wires": [
            [
                "eee6ce5b0dcd09d3"
            ],
            []
        ]
    },
    {
        "id": "b49b807d54f06e17",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "34f0da41bbd31bae",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 520,
        "wires": [
            [
                "1b74e7b7ede62134"
            ]
        ]
    },
    {
        "id": "2f3bd1f282894eb4",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B26,BLOCK-26,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 520,
        "wires": [
            [
                "34f0da41bbd31bae"
            ]
        ]
    },
    {
        "id": "1b74e7b7ede62134",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 520,
        "wires": [
            [
                "707d6d717a4f232a"
            ]
        ]
    },
    {
        "id": "707d6d717a4f232a",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 520,
        "wires": [
            [
                "5e2c1fd62753a181",
                "2fee63d6eb64c67b"
            ]
        ]
    },
    {
        "id": "5e2c1fd62753a181",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2885",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 520,
        "wires": []
    },
    {
        "id": "569c2e848cd264e7",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 720,
        "wires": [
            [
                "78cb20c5d0d7a96f"
            ]
        ]
    },
    {
        "id": "ac65c08f4e391403",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 740,
        "wires": [
            [
                "1648d1d5e2933775"
            ]
        ]
    },
    {
        "id": "74f760ebf469ddf3",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 740,
        "wires": [
            [
                "ac65c08f4e391403"
            ]
        ]
    },
    {
        "id": "72e1cc6ed6baa4dd",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 740,
        "wires": [
            [
                "74f760ebf469ddf3"
            ]
        ]
    },
    {
        "id": "ba30dbe57e8f9123",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 720,
        "wires": [
            [
                "569c2e848cd264e7"
            ]
        ]
    },
    {
        "id": "1648d1d5e2933775",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "cc949d3a99d92acd",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 740,
        "wires": [
            [
                "ba30dbe57e8f9123"
            ],
            []
        ]
    },
    {
        "id": "78cb20c5d0d7a96f",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4d2a80eee202fa34",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 680,
        "wires": [
            [
                "424cfc3a4a919576"
            ]
        ]
    },
    {
        "id": "7a8518740698810c",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B26,BLOCK-26,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 680,
        "wires": [
            [
                "4d2a80eee202fa34"
            ]
        ]
    },
    {
        "id": "424cfc3a4a919576",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 680,
        "wires": [
            [
                "59b6f86bf3cfb4e4"
            ]
        ]
    },
    {
        "id": "59b6f86bf3cfb4e4",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 680,
        "wires": [
            [
                "2412cc4fbcf74c5a",
                "1648d1d5e2933775"
            ]
        ]
    },
    {
        "id": "2412cc4fbcf74c5a",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2886",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 680,
        "wires": []
    },
    {
        "id": "a9f5c308ec03568e",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 880,
        "wires": [
            [
                "0aa9ca5c97a03842"
            ]
        ]
    },
    {
        "id": "bebe44a7964b6b92",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 900,
        "wires": [
            [
                "ed8cab5fb4fed918"
            ]
        ]
    },
    {
        "id": "53286ebae5e0c1ea",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 900,
        "wires": [
            [
                "bebe44a7964b6b92"
            ]
        ]
    },
    {
        "id": "5acacbde612738f9",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 900,
        "wires": [
            [
                "53286ebae5e0c1ea"
            ]
        ]
    },
    {
        "id": "90ec41ab643f5886",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 880,
        "wires": [
            [
                "a9f5c308ec03568e"
            ]
        ]
    },
    {
        "id": "ed8cab5fb4fed918",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "3ed37b87e6865e7c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 900,
        "wires": [
            [
                "90ec41ab643f5886"
            ],
            []
        ]
    },
    {
        "id": "0aa9ca5c97a03842",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "02e9db0839de5f97",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 840,
        "wires": [
            [
                "5d9b21ede2edaa39"
            ]
        ]
    },
    {
        "id": "f18fb3c0b66bf021",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B33,BLOCK-33,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 840,
        "wires": [
            [
                "02e9db0839de5f97"
            ]
        ]
    },
    {
        "id": "5d9b21ede2edaa39",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 840,
        "wires": [
            [
                "83fbd8823abca15b"
            ]
        ]
    },
    {
        "id": "83fbd8823abca15b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 840,
        "wires": [
            [
                "9384b25334d048b3",
                "ed8cab5fb4fed918"
            ]
        ]
    },
    {
        "id": "9384b25334d048b3",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2887",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 840,
        "wires": []
    },
    {
        "id": "b5d4dfb31c65910b",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 1040,
        "wires": [
            [
                "bb1d85c5a47e21f0"
            ]
        ]
    },
    {
        "id": "9b8c5ea87877abaa",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1060,
        "wires": [
            [
                "881843dfa7a5e135"
            ]
        ]
    },
    {
        "id": "3509139bb415afa1",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1060,
        "wires": [
            [
                "9b8c5ea87877abaa"
            ]
        ]
    },
    {
        "id": "6c11e85484c67d4d",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 1060,
        "wires": [
            [
                "3509139bb415afa1"
            ]
        ]
    },
    {
        "id": "f5aeb49a5327f121",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1040,
        "wires": [
            [
                "b5d4dfb31c65910b"
            ]
        ]
    },
    {
        "id": "881843dfa7a5e135",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "37fbc4f29bb3b9ab",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 1060,
        "wires": [
            [
                "f5aeb49a5327f121"
            ],
            []
        ]
    },
    {
        "id": "bb1d85c5a47e21f0",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "13462d820ebde390",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1000,
        "wires": [
            [
                "b3a009bbaea5af6b"
            ]
        ]
    },
    {
        "id": "944a411d46aa4e3c",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B33,BLOCK-33,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 1000,
        "wires": [
            [
                "13462d820ebde390"
            ]
        ]
    },
    {
        "id": "b3a009bbaea5af6b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1000,
        "wires": [
            [
                "6c3d5ab7f949dd04"
            ]
        ]
    },
    {
        "id": "6c3d5ab7f949dd04",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1000,
        "wires": [
            [
                "83487fe3abc92249",
                "881843dfa7a5e135"
            ]
        ]
    },
    {
        "id": "83487fe3abc92249",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2888",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1000,
        "wires": []
    },
    {
        "id": "414b9294da289361",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 1200,
        "wires": [
            [
                "3a6c61465bd07590"
            ]
        ]
    },
    {
        "id": "36beb6425fe63e0f",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1220,
        "wires": [
            [
                "1a16d6de1380e459"
            ]
        ]
    },
    {
        "id": "ae1217f7d9e19aaf",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1220,
        "wires": [
            [
                "36beb6425fe63e0f"
            ]
        ]
    },
    {
        "id": "7ae3eadb178f472c",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 1220,
        "wires": [
            [
                "ae1217f7d9e19aaf"
            ]
        ]
    },
    {
        "id": "53a97b99d67c4a98",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1200,
        "wires": [
            [
                "414b9294da289361"
            ]
        ]
    },
    {
        "id": "1a16d6de1380e459",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "ce8227575427df28",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 1220,
        "wires": [
            [
                "53a97b99d67c4a98"
            ],
            []
        ]
    },
    {
        "id": "3a6c61465bd07590",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "40f0633ff29124b4",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1160,
        "wires": [
            [
                "d655aca9c85efd4c"
            ]
        ]
    },
    {
        "id": "2b6cc4510142d84f",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B41,BLOCK-41,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 1160,
        "wires": [
            [
                "40f0633ff29124b4"
            ]
        ]
    },
    {
        "id": "d655aca9c85efd4c",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1160,
        "wires": [
            [
                "b83a366a30547880"
            ]
        ]
    },
    {
        "id": "b83a366a30547880",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1160,
        "wires": [
            [
                "9fa50a9651e91cc7",
                "1a16d6de1380e459"
            ]
        ]
    },
    {
        "id": "9fa50a9651e91cc7",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2889",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1160,
        "wires": []
    },
    {
        "id": "fb042cef027fc491",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 1360,
        "wires": [
            [
                "3891584b8a1e74df"
            ]
        ]
    },
    {
        "id": "888dd8520fc9fca5",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1380,
        "wires": [
            [
                "cf70c6ba896fa57c"
            ]
        ]
    },
    {
        "id": "c7eaf6c9886c748a",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1380,
        "wires": [
            [
                "888dd8520fc9fca5"
            ]
        ]
    },
    {
        "id": "7dd8e6f5d254f369",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 1380,
        "wires": [
            [
                "c7eaf6c9886c748a"
            ]
        ]
    },
    {
        "id": "131684d76a2556cb",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1360,
        "wires": [
            [
                "fb042cef027fc491"
            ]
        ]
    },
    {
        "id": "cf70c6ba896fa57c",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "fb538301cc25aade",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 1380,
        "wires": [
            [
                "131684d76a2556cb"
            ],
            []
        ]
    },
    {
        "id": "3891584b8a1e74df",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "ff4d4b2f4adacc39",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1320,
        "wires": [
            [
                "3027be5b73621099"
            ]
        ]
    },
    {
        "id": "756745bff3bf132d",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B41,BLOCK-41,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 1320,
        "wires": [
            [
                "ff4d4b2f4adacc39"
            ]
        ]
    },
    {
        "id": "3027be5b73621099",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1320,
        "wires": [
            [
                "211b8f168a65e4e9"
            ]
        ]
    },
    {
        "id": "211b8f168a65e4e9",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1320,
        "wires": [
            [
                "1dcd990c97489c0b",
                "cf70c6ba896fa57c"
            ]
        ]
    },
    {
        "id": "1dcd990c97489c0b",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2890",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1320,
        "wires": []
    },
    {
        "id": "c99d2138c8a77739",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 1540,
        "wires": [
            [
                "e0a252787f34f991"
            ]
        ]
    },
    {
        "id": "be884c05dc59a5fb",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1560,
        "wires": [
            [
                "aaff9462a3c1fb73"
            ]
        ]
    },
    {
        "id": "0fad769aff082225",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1560,
        "wires": [
            [
                "be884c05dc59a5fb"
            ]
        ]
    },
    {
        "id": "48b58d5d9cb15ae7",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 1560,
        "wires": [
            [
                "0fad769aff082225"
            ]
        ]
    },
    {
        "id": "1156f12a559a9810",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1540,
        "wires": [
            [
                "c99d2138c8a77739"
            ]
        ]
    },
    {
        "id": "aaff9462a3c1fb73",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "695f520ed762c60c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 1560,
        "wires": [
            [
                "1156f12a559a9810"
            ],
            []
        ]
    },
    {
        "id": "e0a252787f34f991",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "94ce3feea708bf33",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1500,
        "wires": [
            [
                "2e99b0260d2e2e7a"
            ]
        ]
    },
    {
        "id": "257a9ad1441510c2",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B42,BLOCK-42,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 1500,
        "wires": [
            [
                "94ce3feea708bf33"
            ]
        ]
    },
    {
        "id": "2e99b0260d2e2e7a",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1500,
        "wires": [
            [
                "7e8194a5ad9eaa93"
            ]
        ]
    },
    {
        "id": "7e8194a5ad9eaa93",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1500,
        "wires": [
            [
                "070060c4900f0b35",
                "aaff9462a3c1fb73"
            ]
        ]
    },
    {
        "id": "070060c4900f0b35",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2891",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1500,
        "wires": []
    },
    {
        "id": "7bf51d68d14c0a6a",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 1680,
        "wires": [
            [
                "3e4a4977b1ed4a20"
            ]
        ]
    },
    {
        "id": "93a4d8630c68d4a3",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1700,
        "wires": [
            [
                "1d810d0c0ab99d50"
            ]
        ]
    },
    {
        "id": "18227122092d724d",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1700,
        "wires": [
            [
                "93a4d8630c68d4a3"
            ]
        ]
    },
    {
        "id": "7fcca773293836eb",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 1700,
        "wires": [
            [
                "18227122092d724d"
            ]
        ]
    },
    {
        "id": "b15bb9e86d8ff609",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1680,
        "wires": [
            [
                "7bf51d68d14c0a6a"
            ]
        ]
    },
    {
        "id": "1d810d0c0ab99d50",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "b6950fc2d98155ab",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 1700,
        "wires": [
            [
                "b15bb9e86d8ff609"
            ],
            []
        ]
    },
    {
        "id": "3e4a4977b1ed4a20",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "ae621336b1d9f802",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1640,
        "wires": [
            [
                "e110f404f297cf7b"
            ]
        ]
    },
    {
        "id": "8ac311497b6b426f",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B42,BLOCK-42,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 1640,
        "wires": [
            [
                "ae621336b1d9f802"
            ]
        ]
    },
    {
        "id": "e110f404f297cf7b",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1640,
        "wires": [
            [
                "02a8b295d0ba2681"
            ]
        ]
    },
    {
        "id": "02a8b295d0ba2681",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1640,
        "wires": [
            [
                "2d6a4455ad3fdf1f"
            ]
        ]
    },
    {
        "id": "2d6a4455ad3fdf1f",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "debug 2892",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1640,
        "wires": []
    },
    {
        "id": "ca456635ca68f5f5",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 1840,
        "wires": [
            [
                "a301a7c2ec866565"
            ]
        ]
    },
    {
        "id": "bc0e1a2461f4e3f0",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1860,
        "wires": [
            [
                "3847af6f51fa066e"
            ]
        ]
    },
    {
        "id": "5fce0847e5cd8de6",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1860,
        "wires": [
            [
                "bc0e1a2461f4e3f0"
            ]
        ]
    },
    {
        "id": "43eef33d85593cc3",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 1860,
        "wires": [
            [
                "5fce0847e5cd8de6"
            ]
        ]
    },
    {
        "id": "c9e7dc19f211458a",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1840,
        "wires": [
            [
                "ca456635ca68f5f5"
            ]
        ]
    },
    {
        "id": "3847af6f51fa066e",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "77d75ba115f6b74f",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 1860,
        "wires": [
            [
                "c9e7dc19f211458a"
            ],
            []
        ]
    },
    {
        "id": "a301a7c2ec866565",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "bbf52a37607c9624",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1800,
        "wires": [
            [
                "5ee7b7b962484ec5"
            ]
        ]
    },
    {
        "id": "04247c0cabcc3d4e",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B44,BLOCK-44,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 1800,
        "wires": [
            [
                "bbf52a37607c9624"
            ]
        ]
    },
    {
        "id": "5ee7b7b962484ec5",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1800,
        "wires": [
            [
                "dd74ea315624d605"
            ]
        ]
    },
    {
        "id": "dd74ea315624d605",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1800,
        "wires": [
            [
                "a3b8549662538a12",
                "3847af6f51fa066e"
            ]
        ]
    },
    {
        "id": "a3b8549662538a12",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "debug 2893",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1800,
        "wires": []
    },
    {
        "id": "1201468e69dd06ea",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 2020,
        "wires": [
            [
                "3529f198c14c4620"
            ]
        ]
    },
    {
        "id": "d61b626994c6088f",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 2040,
        "wires": [
            [
                "5296d40eb3518b9f"
            ]
        ]
    },
    {
        "id": "a53693ea8e6064f6",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 2040,
        "wires": [
            [
                "d61b626994c6088f"
            ]
        ]
    },
    {
        "id": "ce25a91677a18969",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2190,
        "y": 2040,
        "wires": [
            [
                "a53693ea8e6064f6"
            ]
        ]
    },
    {
        "id": "a68b3baf08553106",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 2020,
        "wires": [
            [
                "1201468e69dd06ea"
            ]
        ]
    },
    {
        "id": "5296d40eb3518b9f",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "ba5a215f7efce9d5",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2630,
        "y": 2040,
        "wires": [
            [
                "a68b3baf08553106"
            ],
            []
        ]
    },
    {
        "id": "3529f198c14c4620",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "df9e4163292994f3",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2310,
        "y": 1980,
        "wires": [
            [
                "7998526410064af8"
            ]
        ]
    },
    {
        "id": "d32aed52639f2cf9",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B44,BLOCK-44,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2190,
        "y": 1980,
        "wires": [
            [
                "df9e4163292994f3"
            ]
        ]
    },
    {
        "id": "7998526410064af8",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1980,
        "wires": [
            [
                "bfa222d6d3e3df59"
            ]
        ]
    },
    {
        "id": "bfa222d6d3e3df59",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1980,
        "wires": [
            [
                "79280108424fcb1a",
                "5296d40eb3518b9f"
            ]
        ]
    },
    {
        "id": "79280108424fcb1a",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2894",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1980,
        "wires": []
    },
    {
        "id": "792f720a8349b693",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 2200,
        "wires": [
            [
                "28877fb31064ea5d"
            ]
        ]
    },
    {
        "id": "2f4ee420c6144e0a",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 2220,
        "wires": [
            [
                "a5d621d6d60c56fc"
            ]
        ]
    },
    {
        "id": "f1fdb2e2539f92c8",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 2220,
        "wires": [
            [
                "2f4ee420c6144e0a"
            ]
        ]
    },
    {
        "id": "bc163dda4eb9128e",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2170,
        "y": 2220,
        "wires": [
            [
                "f1fdb2e2539f92c8"
            ]
        ]
    },
    {
        "id": "6e7fcf051cc2324d",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 2200,
        "wires": [
            [
                "792f720a8349b693"
            ]
        ]
    },
    {
        "id": "a5d621d6d60c56fc",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "b7e8f5c9ba98111f",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2610,
        "y": 2220,
        "wires": [
            [
                "6e7fcf051cc2324d"
            ],
            []
        ]
    },
    {
        "id": "28877fb31064ea5d",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "b1b5a1311186434d",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 2160,
        "wires": [
            [
                "956271bfa7954ef1"
            ]
        ]
    },
    {
        "id": "9cfcd6cf892aa01e",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B47,BLOCK-47,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2170,
        "y": 2160,
        "wires": [
            [
                "b1b5a1311186434d"
            ]
        ]
    },
    {
        "id": "956271bfa7954ef1",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 2160,
        "wires": [
            [
                "616d03fc9a1f0083"
            ]
        ]
    },
    {
        "id": "616d03fc9a1f0083",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 2160,
        "wires": [
            [
                "9e2582db9b3f6ca6",
                "a5d621d6d60c56fc"
            ]
        ]
    },
    {
        "id": "9e2582db9b3f6ca6",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2895",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2800,
        "y": 2160,
        "wires": []
    },
    {
        "id": "86a352dc679eeb52",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 2380,
        "wires": [
            [
                "0495fc723057a312"
            ]
        ]
    },
    {
        "id": "7cb4b38831ed0ec6",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 2400,
        "wires": [
            [
                "8c07945ba4c6e650"
            ]
        ]
    },
    {
        "id": "08317f757b1867b5",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 2400,
        "wires": [
            [
                "7cb4b38831ed0ec6"
            ]
        ]
    },
    {
        "id": "b9d2b46604424e65",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 2170,
        "y": 2400,
        "wires": [
            [
                "08317f757b1867b5"
            ]
        ]
    },
    {
        "id": "62fc2e7dab3e9a70",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 2380,
        "wires": [
            [
                "86a352dc679eeb52"
            ]
        ]
    },
    {
        "id": "8c07945ba4c6e650",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "bcbfbdad70b285e1",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2610,
        "y": 2400,
        "wires": [
            [
                "62fc2e7dab3e9a70"
            ],
            []
        ]
    },
    {
        "id": "0495fc723057a312",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "d0eeea8bef3937d0",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 2340,
        "wires": [
            [
                "4fed24e6522799b6"
            ]
        ]
    },
    {
        "id": "2a88c74764731ab3",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B47,BLOCK-47,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 2170,
        "y": 2340,
        "wires": [
            [
                "d0eeea8bef3937d0"
            ]
        ]
    },
    {
        "id": "4fed24e6522799b6",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 2340,
        "wires": [
            [
                "87b2fd123dba7c01"
            ]
        ]
    },
    {
        "id": "87b2fd123dba7c01",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 2340,
        "wires": [
            [
                "a022587671c8b3c3",
                "8c07945ba4c6e650"
            ]
        ]
    },
    {
        "id": "a022587671c8b3c3",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 2896",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2800,
        "y": 2340,
        "wires": []
    },
    {
        "id": "5e7f0ed28f30eb57",
        "type": "interval",
        "z": "5dce1ee58ebc7724",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 150,
        "y": 1160,
        "wires": [
            [
                "c20d3d1501005e3c"
            ]
        ]
    },
    {
        "id": "383aa912b98f88bb",
        "type": "interval",
        "z": "5dce1ee58ebc7724",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 1790,
        "y": 1280,
        "wires": [
            [
                "4df8a90d6ec1e45b"
            ]
        ]
    },
    {
        "id": "4f66ddb27dd9bb4d",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4610,
        "y": 700,
        "wires": [
            [
                "51257e00d414149d"
            ]
        ]
    },
    {
        "id": "4c40a393aa93138d",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 720,
        "wires": [
            [
                "5936d512b0453d8d"
            ]
        ]
    },
    {
        "id": "95d9d38337aa2cf1",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 720,
        "wires": [
            [
                "4c40a393aa93138d"
            ]
        ]
    },
    {
        "id": "8aa1e267789074f6",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8501,8501,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8501,8501,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8501,8501,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8501,8501,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 3870,
        "y": 720,
        "wires": [
            [
                "95d9d38337aa2cf1"
            ]
        ]
    },
    {
        "id": "bee11655b24c6bb3",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 700,
        "wires": [
            [
                "4f66ddb27dd9bb4d"
            ]
        ]
    },
    {
        "id": "5936d512b0453d8d",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "ae5f309b761bd201",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4310,
        "y": 720,
        "wires": [
            [
                "bee11655b24c6bb3"
            ],
            []
        ]
    },
    {
        "id": "51257e00d414149d",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4740,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "8f0a4c7cdafedcf2",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 660,
        "wires": [
            [
                "bbe17a84ab57e307"
            ]
        ]
    },
    {
        "id": "1cbdb3f5019390f3",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8501,8501,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B50,BLOCK-50,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8501,8501,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 3870,
        "y": 660,
        "wires": [
            [
                "8f0a4c7cdafedcf2"
            ]
        ]
    },
    {
        "id": "bbe17a84ab57e307",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 660,
        "wires": [
            [
                "47195aa755f7d0ea"
            ]
        ]
    },
    {
        "id": "47195aa755f7d0ea",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4310,
        "y": 660,
        "wires": [
            [
                "4508abf3e8bf7339",
                "5936d512b0453d8d"
            ]
        ]
    },
    {
        "id": "4508abf3e8bf7339",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4500,
        "y": 660,
        "wires": []
    },
    {
        "id": "5d2ec19e07884882",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4610,
        "y": 840,
        "wires": [
            [
                "d214874ca110341d"
            ]
        ]
    },
    {
        "id": "358db0af50b3277c",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 860,
        "wires": [
            [
                "2e1708ed4f09bd27"
            ]
        ]
    },
    {
        "id": "e1b7d373d45308d3",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 860,
        "wires": [
            [
                "358db0af50b3277c"
            ]
        ]
    },
    {
        "id": "2ab31f06f1ca5ad0",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8501,8501,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8501,8501,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8501,8501,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8501,8501,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,0,,,0.001,n\n\n\n",
        "output": "str",
        "x": 3870,
        "y": 860,
        "wires": [
            [
                "e1b7d373d45308d3"
            ]
        ]
    },
    {
        "id": "34ab8c0ad5024de3",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 840,
        "wires": [
            [
                "5d2ec19e07884882"
            ]
        ]
    },
    {
        "id": "2e1708ed4f09bd27",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "d13123151422e6d6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4310,
        "y": 860,
        "wires": [
            [
                "34ab8c0ad5024de3"
            ],
            []
        ]
    },
    {
        "id": "d214874ca110341d",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4740,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "291a08f0318ff6df",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 800,
        "wires": [
            [
                "340008ecb52e9dd1"
            ]
        ]
    },
    {
        "id": "b302d4397966c951",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8501,8501,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B50,BLOCK-50,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8501,8501,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 3870,
        "y": 800,
        "wires": [
            [
                "291a08f0318ff6df"
            ]
        ]
    },
    {
        "id": "340008ecb52e9dd1",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 800,
        "wires": [
            [
                "0f98ad22571c5b83"
            ]
        ]
    },
    {
        "id": "0f98ad22571c5b83",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 800,
        "wires": [
            [
                "63857f18a25529fa",
                "2e1708ed4f09bd27"
            ]
        ]
    },
    {
        "id": "63857f18a25529fa",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4500,
        "y": 800,
        "wires": []
    },
    {
        "id": "e648dd4be4f3ebbd",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4610,
        "y": 420,
        "wires": [
            [
                "d8b6cd19d2cb5675"
            ]
        ]
    },
    {
        "id": "6789ca4ba4cea2ec",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 440,
        "wires": [
            [
                "299648d064646b8e"
            ]
        ]
    },
    {
        "id": "be815f1f49db9db9",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 440,
        "wires": [
            [
                "6789ca4ba4cea2ec"
            ]
        ]
    },
    {
        "id": "52325ba43f0b0cb5",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8501,8501,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8501,8501,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8501,8501,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8501,8501,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,0,,,0.001,n\n\n\n",
        "output": "str",
        "x": 3870,
        "y": 440,
        "wires": [
            [
                "be815f1f49db9db9"
            ]
        ]
    },
    {
        "id": "2bd37396cd9c5484",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 420,
        "wires": [
            [
                "e648dd4be4f3ebbd"
            ]
        ]
    },
    {
        "id": "299648d064646b8e",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "703758502a913ad6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4310,
        "y": 440,
        "wires": [
            [
                "2bd37396cd9c5484"
            ],
            []
        ]
    },
    {
        "id": "d8b6cd19d2cb5675",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4740,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5540d57b806f6791",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 380,
        "wires": [
            [
                "f74cd783055d2fa2"
            ]
        ]
    },
    {
        "id": "3d764367881ba56f",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8501,8501,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B49,BLOCK-49,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8501,8501,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 3870,
        "y": 380,
        "wires": [
            [
                "5540d57b806f6791"
            ]
        ]
    },
    {
        "id": "f74cd783055d2fa2",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 380,
        "wires": [
            [
                "541e6929c2ed566e"
            ]
        ]
    },
    {
        "id": "541e6929c2ed566e",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)      \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 380,
        "wires": [
            [
                "ccd4f731315ad5ab",
                "299648d064646b8e"
            ]
        ]
    },
    {
        "id": "ccd4f731315ad5ab",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4500,
        "y": 380,
        "wires": []
    },
    {
        "id": "29472edca0790eec",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4610,
        "y": 560,
        "wires": [
            [
                "4f8070ae84530900"
            ]
        ]
    },
    {
        "id": "fa45be3dbb93ef49",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 580,
        "wires": [
            [
                "e358fe8c330fcd68"
            ]
        ]
    },
    {
        "id": "5129fc04858b6b60",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 580,
        "wires": [
            [
                "fa45be3dbb93ef49"
            ]
        ]
    },
    {
        "id": "88ded2f55d4a063b",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8501,8501,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8501,8501,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8501,8501,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8501,8501,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,0,,,0.001,n\n\n\n",
        "output": "str",
        "x": 3870,
        "y": 580,
        "wires": [
            [
                "5129fc04858b6b60"
            ]
        ]
    },
    {
        "id": "9d0966581c0067b2",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 560,
        "wires": [
            [
                "29472edca0790eec"
            ]
        ]
    },
    {
        "id": "e358fe8c330fcd68",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "7113333fdd30126b",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4310,
        "y": 580,
        "wires": [
            [
                "9d0966581c0067b2"
            ],
            []
        ]
    },
    {
        "id": "4f8070ae84530900",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4740,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e25e30cb06a91f3d",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 520,
        "wires": [
            [
                "f5750b1ef9402599"
            ]
        ]
    },
    {
        "id": "8788588524c34ce8",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8501,8501,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8501,8501,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B49,BLOCK-49,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8501,8501,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 3870,
        "y": 520,
        "wires": [
            [
                "e25e30cb06a91f3d"
            ]
        ]
    },
    {
        "id": "f5750b1ef9402599",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 520,
        "wires": [
            [
                "f3f71bdb5d3cf0d1"
            ]
        ]
    },
    {
        "id": "f3f71bdb5d3cf0d1",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\nvar remote_value = global.get(remote_tag)\n\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)      \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 520,
        "wires": [
            [
                "62012402d96a9636",
                "e358fe8c330fcd68"
            ]
        ]
    },
    {
        "id": "62012402d96a9636",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4500,
        "y": 520,
        "wires": []
    },
    {
        "id": "20b016c416d9c5d9",
        "type": "interval",
        "z": "5dce1ee58ebc7724",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 3530,
        "y": 480,
        "wires": [
            [
                "037a525bdad20317"
            ]
        ]
    },
    {
        "id": "6a4ab7d88c8ade05",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4610,
        "y": 140,
        "wires": [
            [
                "aa1ae72bc8269066"
            ]
        ]
    },
    {
        "id": "1646c84825ceab28",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 160,
        "wires": [
            [
                "572835fc5142054e"
            ]
        ]
    },
    {
        "id": "c6f1c0bad44fe35b",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 160,
        "wires": [
            [
                "1646c84825ceab28"
            ]
        ]
    },
    {
        "id": "9efa85b04f219e04",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,1,n\n",
        "output": "str",
        "x": 3870,
        "y": 160,
        "wires": [
            [
                "c6f1c0bad44fe35b"
            ]
        ]
    },
    {
        "id": "29d6919322cbc216",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 140,
        "wires": [
            [
                "6a4ab7d88c8ade05"
            ]
        ]
    },
    {
        "id": "572835fc5142054e",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "5ff0365c40178a72",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4310,
        "y": 160,
        "wires": [
            [
                "29d6919322cbc216"
            ],
            []
        ]
    },
    {
        "id": "aa1ae72bc8269066",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4740,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "dd96fa70452f226b",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 100,
        "wires": [
            [
                "69fbd63627c76f22"
            ]
        ]
    },
    {
        "id": "02ffca1eeb5dc967",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B48,BLOCK-48,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 3870,
        "y": 100,
        "wires": [
            [
                "dd96fa70452f226b"
            ]
        ]
    },
    {
        "id": "69fbd63627c76f22",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 100,
        "wires": [
            [
                "d4a40114dc3cb2b0"
            ]
        ]
    },
    {
        "id": "d4a40114dc3cb2b0",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4310,
        "y": 100,
        "wires": [
            [
                "71454acd3c085904",
                "572835fc5142054e"
            ]
        ]
    },
    {
        "id": "71454acd3c085904",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4500,
        "y": 100,
        "wires": []
    },
    {
        "id": "f7ce0a096ed1b54d",
        "type": "join",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4610,
        "y": 280,
        "wires": [
            [
                "73d0126ca7627f16"
            ]
        ]
    },
    {
        "id": "d1851d21086bd340",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 300,
        "wires": [
            [
                "76119537ca5468d1"
            ]
        ]
    },
    {
        "id": "9c7ad69662ac7148",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 300,
        "wires": [
            [
                "d1851d21086bd340"
            ]
        ]
    },
    {
        "id": "939b243be81406af",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Trueboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Trueboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Trueboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Trueboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Trueboard,0,,,0.001,n\n\n\n",
        "output": "str",
        "x": 3870,
        "y": 300,
        "wires": [
            [
                "9c7ad69662ac7148"
            ]
        ]
    },
    {
        "id": "8e43a6a1d2a09536",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 280,
        "wires": [
            [
                "f7ce0a096ed1b54d"
            ]
        ]
    },
    {
        "id": "76119537ca5468d1",
        "type": "Main-Modbus-Read-Write",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "97742cafe0b8af2d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4310,
        "y": 300,
        "wires": [
            [
                "8e43a6a1d2a09536"
            ],
            []
        ]
    },
    {
        "id": "73d0126ca7627f16",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4740,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2f8486227dd1c8af",
        "type": "csv",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3990,
        "y": 240,
        "wires": [
            [
                "95ef7d3979f7e291"
            ]
        ]
    },
    {
        "id": "dfa7be5746449e77",
        "type": "template",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server488782,488782,1,Trueboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server488782,488782,1,Trueboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B48,BLOCK-48,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server488782,488782,1,Trueboard,,,kW,1",
        "output": "str",
        "x": 3870,
        "y": 240,
        "wires": [
            [
                "2f8486227dd1c8af"
            ]
        ]
    },
    {
        "id": "95ef7d3979f7e291",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 240,
        "wires": [
            [
                "3a08a838e530f821"
            ]
        ]
    },
    {
        "id": "3a08a838e530f821",
        "type": "function",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 240,
        "wires": [
            [
                "2bbfb43a4050c07f",
                "76119537ca5468d1"
            ]
        ]
    },
    {
        "id": "2bbfb43a4050c07f",
        "type": "debug",
        "z": "5dce1ee58ebc7724",
        "d": true,
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4500,
        "y": 240,
        "wires": []
    },
    {
        "id": "1a8ae1edc8a93637",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "PAC SDF",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18.INV01.PAC+B18.INV02.PAC+B19.INV01.PAC+B19.INV02.PAC+B21.INV01.PAC+B21.INV02.PAC+B22.INV01.PAC+B22.INV02.PAC+B23.INV01.PAC+B23.INV02.PAC+B24.INV01.PAC+B24.INV02.PAC+B25.INV01.PAC+B25.INV02.PAC+B26.INV01.PAC+B26.INV02.PAC+B41.INV01.PAC+B41.INV02.PAC+B42.INV01.PAC+B42.INV02.PAC+B44.INV01.PAC+B44.INV02.PAC+B47.INV01.PAC+B47.INV02.PAC+B48.INV01.PAC+B48.INV02.PAC+B49.INV01.PAC+B49.INV02.PAC+B50.INV01.PAC+B50.INV02.PAC,SUM,B02,B02_VR_INV,VR_INV,VR_INV,INV,PAC,PAC,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "b8c9e6031779fd8b"
            ]
        ]
    },
    {
        "id": "d7aa89b49317d879",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18.INV01.QAC+B18.INV02.QAC+B19.INV01.QAC+B19.INV02.QAC+B21.INV01.QAC+B21.INV02.QAC+B22.INV01.QAC+B22.INV02.QAC+B23.INV01.QAC+B23.INV02.QAC+B24.INV01.QAC+B24.INV02.QAC+B25.INV01.QAC+B25.INV02.QAC+B26.INV01.QAC+B26.INV02.QAC+B41.INV01.QAC+B41.INV02.QAC+B42.INV01.QAC+B42.INV02.QAC+B44.INV01.QAC+B44.INV02.QAC+B47.INV01.QAC+B47.INV02.QAC+B48.INV01.QAC+B48.INV02.QAC+B49.INV01.QAC+B49.INV02.QAC+B50.INV01.QAC+B50.INV02.QAC,SUM,B02,B02_VR_INV,VR_INV,VR_INV,INV,QAC,QAC,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 320,
        "y": 220,
        "wires": [
            [
                "9e7ec77d5b606af2"
            ]
        ]
    },
    {
        "id": "bf9a7b5b73aaf1ab",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "PF SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B06.INV01.PF+B06.INV02.PF+B06.INV03.PF+B06.INV04.PF+B07.INV01.PF+B07.INV02.PF+B07.INV03.PF+B07.INV04.PF+B08.INV01.PF+B08.INV02.PF+B08.INV03.PF+B08.INV04.PF+B09.INV01.PF+B09.INV02.PF+B09.INV03.PF+B09.INV04.PF+B10.INV01.PF+B10.INV02.PF+B10.INV03.PF+B10.INV04.PF+B11.INV01.PF+B11.INV02.PF+B11.INV03.PF+B11.INV04.PF+B12.INV01.PF,AVG,B02,B02_VR_INV,VR_INV,VR_INV,INV,PF,PF,Server9382,9382,1,TATA_AP_70MW,0,,MW,1",
        "output": "str",
        "x": 320,
        "y": 260,
        "wires": [
            [
                "61136f2aef893d59"
            ]
        ]
    },
    {
        "id": "98701ea5e6a4cb5e",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "OLD PAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18.INV01.OLD_PAC_LIMIT+B18.INV02.OLD_PAC_LIMIT+B19.INV01.OLD_PAC_LIMIT+B19.INV02.OLD_PAC_LIMIT+B21.INV01.OLD_PAC_LIMIT+B21.INV02.OLD_PAC_LIMIT+B22.INV01.OLD_PAC_LIMIT+B22.INV02.OLD_PAC_LIMIT+B23.INV01.OLD_PAC_LIMIT+B23.INV02.OLD_PAC_LIMIT+B24.INV01.OLD_PAC_LIMIT+B24.INV02.OLD_PAC_LIMIT+B25.INV01.OLD_PAC_LIMIT+B25.INV02.OLD_PAC_LIMIT+B26.INV01.OLD_PAC_LIMIT+B26.INV02.OLD_PAC_LIMIT+B41.INV01.OLD_PAC_LIMIT+B41.INV02.OLD_PAC_LIMIT+B42.INV01.OLD_PAC_LIMIT+B42.INV02.OLD_PAC_LIMIT+B44.INV01.OLD_PAC_LIMIT+B44.INV02.OLD_PAC_LIMIT+B47.INV01.OLD_PAC_LIMIT+B47.INV02.OLD_PAC_LIMIT+B48.INV01.OLD_PAC_LIMIT+B48.INV02.OLD_PAC_LIMIT+B49.INV01.OLD_PAC_LIMIT+B49.INV02.OLD_PAC_LIMIT+B50.INV01.OLD_PAC_LIMIT+B50.INV02.OLD_PAC_LIMIT,SUM,B02,B02_VR_INV,VR_INV,VR_INV,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 340,
        "y": 300,
        "wires": [
            [
                "74b42b21ee38b3c4"
            ]
        ]
    },
    {
        "id": "96cb7fcaf0ee8a7e",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "OLD QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18.INV01.OLD_QAC_LIMIT+B18.INV02.OLD_QAC_LIMIT+B19.INV01.OLD_QAC_LIMIT+B19.INV02.OLD_QAC_LIMIT+B21.INV01.OLD_QAC_LIMIT+B21.INV02.OLD_QAC_LIMIT+B22.INV01.OLD_QAC_LIMIT+B22.INV02.OLD_QAC_LIMIT+B23.INV01.OLD_QAC_LIMIT+B23.INV02.OLD_QAC_LIMIT+B24.INV01.OLD_QAC_LIMIT+B24.INV02.OLD_QAC_LIMIT+B25.INV01.OLD_QAC_LIMIT+B25.INV02.OLD_QAC_LIMIT+B26.INV01.OLD_QAC_LIMIT+B26.INV02.OLD_QAC_LIMIT+B41.INV01.OLD_QAC_LIMIT+B41.INV02.OLD_QAC_LIMIT+B42.INV01.OLD_QAC_LIMIT+B42.INV02.OLD_QAC_LIMIT+B44.INV01.OLD_QAC_LIMIT+B44.INV02.OLD_QAC_LIMIT+B47.INV01.OLD_QAC_LIMIT+B47.INV02.OLD_QAC_LIMIT+B48.INV01.OLD_QAC_LIMIT+B48.INV02.OLD_QAC_LIMIT+B49.INV01.OLD_QAC_LIMIT+B49.INV02.OLD_QAC_LIMIT+B50.INV01.OLD_QAC_LIMIT+B50.INV02.OLD_QAC_LIMIT,SUM,B02,B02_VR_INV,VR_INV,VR_INV,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 340,
        "y": 340,
        "wires": [
            [
                "e870e6966bd60dfa"
            ]
        ]
    },
    {
        "id": "8e410fc0ee233d45",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "OLD_QAC_REF_SEL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18.INV01.OLD_QAC_REF_SEL+B18.INV02.OLD_QAC_REF_SEL+B19.INV01.OLD_QAC_REF_SEL+B19.INV02.OLD_QAC_REF_SEL+B21.INV01.OLD_QAC_REF_SEL+B21.INV02.OLD_QAC_REF_SEL+B22.INV01.OLD_QAC_REF_SEL+B22.INV02.OLD_QAC_REF_SEL+B23.INV01.OLD_QAC_REF_SEL+B23.INV02.OLD_QAC_REF_SEL+B24.INV01.OLD_QAC_REF_SEL+B24.INV02.OLD_QAC_REF_SEL+B25.INV01.OLD_QAC_REF_SEL+B25.INV02.OLD_QAC_REF_SEL+B26.INV01.OLD_QAC_REF_SEL+B26.INV02.OLD_QAC_REF_SEL+B41.INV01.OLD_QAC_REF_SEL+B41.INV02.OLD_QAC_REF_SEL+B42.INV01.OLD_QAC_REF_SEL+B42.INV02.OLD_QAC_REF_SEL+B44.INV01.OLD_QAC_REF_SEL+B44.INV02.OLD_QAC_REF_SEL+B47.INV01.OLD_QAC_REF_SEL+B47.INV02.OLD_QAC_REF_SEL+B48.INV01.OLD_QAC_REF_SEL+B48.INV02.OLD_QAC_REF_SEL+B49.INV01.OLD_QAC_REF_SEL+B49.INV02.OLD_QAC_REF_SEL+B50.INV01.OLD_QAC_REF_SEL+B50.INV02.OLD_QAC_REF_SEL,AVG,B02,B02_VR_INV,VR_INV,VR_INV,INV,OLD_QAC_REF_SEL,OLD_QAC_REF_SEL,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "86a6212865d2ec53"
            ]
        ]
    },
    {
        "id": "b8c9e6031779fd8b",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 590,
        "y": 180,
        "wires": [
            [
                "054652b05be51bf3"
            ]
        ]
    },
    {
        "id": "9e7ec77d5b606af2",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 590,
        "y": 220,
        "wires": [
            [
                "ba70090167aa83a0"
            ]
        ]
    },
    {
        "id": "61136f2aef893d59",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 590,
        "y": 260,
        "wires": [
            [
                "56ad65cb0138c60f"
            ]
        ]
    },
    {
        "id": "74b42b21ee38b3c4",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 590,
        "y": 300,
        "wires": [
            [
                "d00b3c354f68425a"
            ]
        ]
    },
    {
        "id": "e870e6966bd60dfa",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 590,
        "y": 340,
        "wires": [
            [
                "7f8ca7b79df3a9b9"
            ]
        ]
    },
    {
        "id": "86a6212865d2ec53",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "9d80b35089238532"
            ]
        ]
    },
    {
        "id": "054652b05be51bf3",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\")\n    {\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                \n            }\n            else\n            {\n                val = val + 0;;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\")\n    {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else\n            {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;  \n   \n    }\n\n   \n        val = (val * msg.payload[i].mf).toFixed(2);\n        val = parseFloat(val)\n        var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n        global.set(tag_name, val)\n\n         var length = flow.get(\"length\")\n\n         var value = global.get(tag_name)\n\n            obj.payload = {\n                value: value,\n                b: msg.payload[i].b,\n                bd: msg.payload[i].bd,\n                d: msg.payload[i].d,\n                dd: msg.payload[i].dd,\n                dt: msg.payload[i].dt,\n                f: msg.payload[i].f,\n                fd: msg.payload[i].fd,\n                h: msg.payload[i].h,\n                iid: msg.payload[i].iid,\n                m: msg.payload[i].m,\n                p: msg.payload[i].p,\n                qu: msg.payload[i].qu,\n                text: msg.payload[i].text,\n                u: msg.payload[i].u,\n                mf: msg.payload[i].mf,\n                reg_id: msg.payload[i].vr_wr_reg,\n                data_type: msg.payload[i].data_type,\n                qty: msg.payload[i].qty,\n                fc: msg.payload[i].fc,\n                SNo: msg.payload[i].SNo,\n                time: time,        \n            }\n            node.send(obj)\n    }\n\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            [
                "d8429c3c65c98399",
                "741703ef52269768"
            ]
        ]
    },
    {
        "id": "ba70090167aa83a0",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;        \n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n    var length = flow.get(\"length\")\n\n     var value = global.get(tag_name)\n   \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 220,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "56ad65cb0138c60f",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d00b3c354f68425a",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n    \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,\n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 300,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "7f8ca7b79df3a9b9",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n    var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "9d80b35089238532",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "dfe1d94cddd7d855",
        "type": "mqtt out",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "topic": "INC_INV2",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf5ddb6c5930fafc",
        "x": 1135,
        "y": 300,
        "wires": [],
        "l": false
    },
    {
        "id": "d8429c3c65c98399",
        "type": "join",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 950,
        "y": 280,
        "wires": [
            [
                "dfe1d94cddd7d855"
            ]
        ]
    },
    {
        "id": "6589fd70f47f071a",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "NO_OF_INV_ONLINE",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n7,NO_OF_INV,SUM,B02,B02_VR_INV,VR_INV,VR_INV,INV,NO_OF_INV,NO_OF_INV,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 360,
        "y": 460,
        "wires": [
            [
                "9afcf6e61fb5608a"
            ]
        ]
    },
    {
        "id": "9afcf6e61fb5608a",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 590,
        "y": 460,
        "wires": [
            [
                "e9012506857fdea8"
            ]
        ]
    },
    {
        "id": "67dc8cd08db9384b",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "    var length = flow.get(\"length\")\n    global.set(\"No_of_Inv\", length)\n    if(length != 0)\n    {\n        var time = new Date().getTime()\n        var obj = {};\n        obj.payload = {\n            value:length,\n            b: msg.payload.b,\n            bd: msg.payload.bd,\n            d: msg.payload.d,\n            dd: msg.payload.dd,\n            dt: msg.payload.dt,\n            f: msg.payload.f,\n            fd: msg.payload.fd,\n            h: msg.payload.h,\n            iid: msg.payload.iid,\n            m: msg.payload.m,\n            p: msg.payload.p,\n            qu: msg.payload.qu,     \n            u: msg.payload.u,\n            mf: msg.payload.mf,        \n            SNo: msg.payload.SNo, \n            time:time     \n     \n    }\n    node.send(obj)\n    }\n    return null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e9012506857fdea8",
        "type": "split",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 460,
        "wires": [
            [
                "67dc8cd08db9384b"
            ]
        ]
    },
    {
        "id": "741703ef52269768",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "name": "debug 2404",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 180,
        "wires": []
    },
    {
        "id": "d9ceef5de60461c3",
        "type": "interval",
        "z": "2d6f5881f4cbe237",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": false,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 109.765625,
        "y": 301.75,
        "wires": [
            [
                "96cb7fcaf0ee8a7e",
                "98701ea5e6a4cb5e",
                "d7aa89b49317d879",
                "1a8ae1edc8a93637"
            ]
        ]
    },
    {
        "id": "8eb3f9991cae04fe",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "PV_ST SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B06.INV01.PV_ST+B06.INV02.PV_ST+B06.INV03.PV_ST+B06.INV04.PV_ST+B07.INV01.PV_ST+B07.INV02.PV_ST+B07.INV03.PV_ST+B07.INV04.PV_ST+B08.INV01.PV_ST+B08.INV02.PV_ST+B08.INV03.PV_ST+B08.INV04.PV_ST+B09.INV01.PV_ST+B09.INV02.PV_ST+B09.INV03.PV_ST+B09.INV04.PV_ST+B10.INV01.PV_ST+B10.INV02.PV_ST+B10.INV03.PV_ST+B10.INV04.PV_ST+B11.INV01.PV_ST+B11.INV02.PV_ST+B11.INV03.PV_ST+B11.INV04.PV_ST+B12.INV01.PV_ST,AVG,B02,B02_VR_INV,VR_INV,VR_INV,INV,PV_ST,PV_ST,Server9382,9382,1,TATA_AP_70MW,0,,MW,1",
        "output": "str",
        "x": 330,
        "y": 420,
        "wires": [
            [
                "f325ad86148a7e0d"
            ]
        ]
    },
    {
        "id": "8bef1747385f0dae",
        "type": "template",
        "z": "2d6f5881f4cbe237",
        "name": "NO_OF_INV_Q",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n8,NO_OF_INV_Q,SUM,B02,B02_VR_INV,VR_INV,VR_INV,INV,NO_OF_INV_Q,NO_OF_INV_Q,Server9382,9382,1,TATA_AP_70MW,0,,MW,1",
        "output": "str",
        "x": 340,
        "y": 500,
        "wires": [
            [
                "d87cedf76c6c210d"
            ]
        ]
    },
    {
        "id": "d87cedf76c6c210d",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 590,
        "y": 500,
        "wires": [
            [
                "5b8e7e5d825a0cfd"
            ]
        ]
    },
    {
        "id": "5b8e7e5d825a0cfd",
        "type": "split",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "4e3e179f269f0694"
            ]
        ]
    },
    {
        "id": "f325ad86148a7e0d",
        "type": "csv",
        "z": "2d6f5881f4cbe237",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "c991cb685aa86604"
            ]
        ]
    },
    {
        "id": "c991cb685aa86604",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined && tmp_val == 7) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var svg_length = arr_length;\n        flow.set(\"svg_length\", svg_length)\n        global.set(\"svg_length\", svg_length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4e3e179f269f0694",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "name": "function 236",
        "func": "    var length = flow.get(\"length\")\n    var svg_length = flow.get(\"svg_length\")\n    var PAC = global.get(\"CR_EM_PAC\")\n    var Inverter_online_Q\n    \n    if (PAC > 0) \n    {\n        Inverter_online_Q = length\n    }\n\n    else if (PAC <= 0)\n    {\n        Inverter_online_Q = svg_length \n    } \n\n    global.set(\"No_of_Inv_Q\", Inverter_online_Q)\n    \n    if(length != 0)\n    {\n        var time = new Date().getTime()\n        var obj = {};\n        obj.payload = {\n            value: Inverter_online_Q,\n            b: msg.payload.b,\n            bd: msg.payload.bd,\n            d: msg.payload.d,\n            dd: msg.payload.dd,\n            dt: msg.payload.dt,\n            f: msg.payload.f,\n            fd: msg.payload.fd,\n            h: msg.payload.h,\n            iid: msg.payload.iid,\n            m: msg.payload.m,\n            p: msg.payload.p,\n            qu: msg.payload.qu,     \n            u: msg.payload.u,\n            mf: msg.payload.mf,        \n            SNo: msg.payload.SNo, \n            time:time     \n     \n    }\n    node.send(obj)\n    }\n    return null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "fd92247130b88cc3",
        "type": "mqtt out",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "",
        "topic": "ENGINE_1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf5ddb6c5930fafc",
        "x": 1290,
        "y": 680,
        "wires": []
    },
    {
        "id": "e49daaa61deabaf9",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "function 1",
        "func": "const inverterNames = [\"B01.INV01\", \"B01.INV02\", \"B01.INV03\", \"B01.INV04\",\n                       \"B02.INV01\", \"B02.INV02\", \"B02.INV03\", \"B02.INV04\",\n                       \"B05.INV01\", \"B05.INV02\"];\nconst payload = {};\n\nfor (const name of inverterNames) {\n    const invData = global.get(name);\n    if (invData && typeof invData === \"object\") {\n        payload[name] = {\n            QAC_LIMIT_CMD: invData.QAC_LIMIT_CMD || 0,\n            finalMVAr: invData.finalMVAr || 0,\n            PAC: invData.PAC || 0,\n            PF: invData.PF || 0,\n            QAC: invData.QAC || 0,\n            OLD_QAC_LIMIT: invData.OLD_QAC_LIMIT || 0,\n            OLD_QAC_REF_SEL: invData.OLD_QAC_REF_SEL || 0,\n            OLD_PAC_LIMIT: invData.OLD_PAC_LIMIT || 0\n        };\n    } else {\n        node.warn(\"Missing or invalid data for \" + name);\n    }\n}\n\nmsg.payload = payload;\nmsg.topic = \"inverter/status/B01\";  // 🔁 Adjust this topic as needed\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 680,
        "wires": [
            [
                "d41d5b7390d59fd2",
                "fd92247130b88cc3"
            ]
        ]
    },
    {
        "id": "d41d5b7390d59fd2",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 640,
        "wires": []
    },
    {
        "id": "54d9750c22bfe598",
        "type": "interval",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "interval",
        "interval": "250",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": false,
        "unit": "milliseconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 830,
        "y": 680,
        "wires": [
            [
                "e49daaa61deabaf9"
            ]
        ]
    },
    {
        "id": "99244a37bc3810e3",
        "type": "mqtt in",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "",
        "topic": "QAC_LIMIT_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 820,
        "wires": [
            [
                "e147401f99299dad",
                "8ba170981813f993"
            ]
        ]
    },
    {
        "id": "e147401f99299dad",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "debug 2317",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 780,
        "wires": []
    },
    {
        "id": "8ba170981813f993",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "function 237",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].tag_val\n    var value = msg.payload[i].value\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "671b22409c768f8d",
        "type": "mqtt in",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "",
        "topic": "PAC_LIMIT_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 920,
        "wires": [
            [
                "2f05394ecb781c28",
                "3666d05366139b1a"
            ]
        ]
    },
    {
        "id": "2f05394ecb781c28",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "function 2",
        "func": "var tag_val = \"PAC_LIMIT_CMD\"; // This is the name of the global variable you want to set\n\n// Example value you want to store globally\n// You can replace this with a real value, e.g., from msg.payload\nvar value = msg.payload.PAC_LIMIT_CMD;\n\n// Set the value as a global variable using the tag name\nglobal.set(tag_val, value);\n\n// (Optional) Add a confirmation to the payload\nmsg.payload = `Global variable '${tag_val}' set to: ${value}`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "3666d05366139b1a",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 880,
        "wires": []
    },
    {
        "id": "8efb7730fd020dab",
        "type": "mqtt in",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "",
        "topic": "QAC_REF_SEL_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 880,
        "y": 1000,
        "wires": [
            [
                "ef90eeecd33d1f39",
                "5cf954a3fdab1736"
            ]
        ]
    },
    {
        "id": "ef90eeecd33d1f39",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "function 3",
        "func": "var tag_val = \"QAC_REF_SEL_CMD\"; // This is the name of the global variable you want to set\n\n// Example value you want to store globally\n// You can replace this with a real value, e.g., from msg.payload\nvar value = msg.payload.QAC_REF_SEL_CMD;\n\n// Set the value as a global variable using the tag name\nglobal.set(tag_val, value);\n\n// (Optional) Add a confirmation to the payload\nmsg.payload = `Global variable '${tag_val}' set to: ${value}`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "5cf954a3fdab1736",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "85daa5ecd4a98e20",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 960,
        "wires": []
    },
    {
        "id": "47142774231ad397",
        "type": "mqtt in",
        "z": "2d6f5881f4cbe237",
        "g": "e3200b981b426cbd",
        "name": "",
        "topic": "INC_INV1_WR",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 680,
        "wires": [
            [
                "221feba182c5b732",
                "98364ec30f4e420c"
            ]
        ]
    },
    {
        "id": "221feba182c5b732",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "e3200b981b426cbd",
        "name": "function 234",
        "func": "var obj = {};\nvar field = msg.payload; \nvar no_of_inv = flow.get(\"length\");  \n\n// Check if 'field' is defined and is a string\nif (msg.payload.PAC_LIMIT_CMD) {\n    var tag_field = msg.payload.f;\n    var actual_pac_limit = msg.payload.value;\n    global.set(tag_field, actual_pac_limit);\n}\nelse if (msg.payload.QAC_LIMIT_CMD) {\n    var tag_field = msg.payload.f;\n    var actual_qac_limit = msg.payload.value;\n    global.set(tag_field, actual_qac_limit);\n}\nelse if (msg.payload.QAC_REF_SEL) {\n    var tag_field = msg.payload.f;\n    var actual_qac_ref_sel = msg.payload.value;\n    global.set(tag_field, actual_qac_ref_sel);\n}\n\n\n// Return null as per original code\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 640,
        "wires": [
            [
                "88905707aa47da92"
            ]
        ]
    },
    {
        "id": "88905707aa47da92",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "g": "e3200b981b426cbd",
        "name": "debug 2328",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 640,
        "wires": []
    },
    {
        "id": "98364ec30f4e420c",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "g": "e3200b981b426cbd",
        "name": "function 235",
        "func": "// Get the key and value from the incoming object\nvar payload = msg.payload;\nvar inverteronline = global.get(\"No_of_Inv\")\n\n// Extract the first (and only) key from the object\n//active power\nvar tag_field1 = Object.keys(payload)[0];\nvar tag_val1 = payload[tag_field1];\nvar tag_value1 = tag_val1\n//var tag_value1 = 20000\n//var tag_value1 = undefined\n\n\n//reactive power\nvar tag_field2 = Object.keys(payload)[1];\nvar tag_val2 = payload[tag_field2];\nvar tag_value2 = tag_val2 \n\n//reactive power ref selection\nvar tag_field3 = Object.keys(payload)[2];\nvar tag_val3 = payload[tag_field3];\nvar tag_value3 = tag_val3\n\n\n// Set the global variable with the dynamic key and value\nglobal.set(tag_field1, tag_value1);\nglobal.set(tag_field2, tag_value2);\nglobal.set(tag_field3, tag_value3);\n\n\n// Return the modified message object or null as per the original flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 680,
        "wires": [
            [
                "aeaa3c9408e8804d"
            ]
        ]
    },
    {
        "id": "aeaa3c9408e8804d",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "g": "e3200b981b426cbd",
        "name": "debug 2772",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 680,
        "wires": []
    },
    {
        "id": "b4eca53a55a61301",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "d": true,
        "g": "e3200b981b426cbd",
        "name": "function 4",
        "func": "// Get the key and value from the incoming object\nvar payload = msg.payload;\nvar inverteronline = global.get(\"No_of_Inv\")\n\n// Extract the first (and only) key from the object\nvar tag_field = Object.keys(payload)[0];\nvar tag_val = payload[tag_field];\n//var tag_value = tag_val \n//var tag_value = 20000\nvar tag_value = undefined\n\n\n//reactive power\nvar tag_field1 = Object.keys(payload)[1];\nvar tag_val1 = payload[tag_field1];\nvar tag_value1 = tag_val1 \n\n//reactive power ref selection\nvar tag_field2 = Object.keys(payload)[2];\nvar tag_val2 = payload[tag_field2];\nvar tag_value2 = tag_val2\n\n//radiation\nvar tag_field3 = Object.keys(payload)[3];\nvar tag_val3 = payload[tag_field3];\nvar tag_value3 = tag_val3 \n\n\n//em pac\nvar tag_field4 = Object.keys(payload)[4];\nvar tag_val4 = payload[tag_field4];\nvar tag_value4 = tag_val4 \n\n\n// Set the global variable with the dynamic key and value\nglobal.set(tag_field, tag_value);\nglobal.set(tag_field1, tag_value1);\nglobal.set(tag_field2, tag_value2);\nglobal.set(tag_field3, tag_value3);\nglobal.set(tag_field4, tag_value4);\n\n\n// Return the modified message object or null as per the original flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "a48fbbafe71a3c78",
        "type": "function",
        "z": "2d6f5881f4cbe237",
        "g": "8a8e68d8fde2a0ee",
        "name": "function 5",
        "func": "// incoming object from msg.payload\nconst input = msg.payload;\n\n// define which blocks you want to keep\nconst allowedBlocks = [\n  \"B18\", \"B19\", \"B21\", \"B22\", \"B23\",\n  \"B24\", \"B25\", \"B26\", \"B33\", \"B41\",\n  \"B42\", \"B44\", \"B47\", \"B48\", \"B49\",\n  \"B50\"\n];\n\nlet filtered = {};\n\n// loop and copy only allowed blocks\nfor (let block of allowedBlocks) {\n    if (input.hasOwnProperty(block)) {\n        filtered[block] = input[block];\n    }\n}\n\nmsg.payload = filtered;\nglobal.set(\"RM_COMM\",msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 880,
        "wires": [
            [
                "c5025979c95d8993"
            ]
        ]
    },
    {
        "id": "c5025979c95d8993",
        "type": "debug",
        "z": "2d6f5881f4cbe237",
        "g": "8a8e68d8fde2a0ee",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 860,
        "wires": []
    },
    {
        "id": "f2ed2bcee2b26bd9",
        "type": "mqtt in",
        "z": "2d6f5881f4cbe237",
        "g": "8a8e68d8fde2a0ee",
        "name": "",
        "topic": "RM_COMM",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4012a214602a528a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 880,
        "wires": [
            [
                "a48fbbafe71a3c78"
            ]
        ]
    },
    {
        "id": "caa34a6ce5c070c3",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 700,
        "wires": [
            [
                "1fd6f265b24c43f7",
                "d355814392ab18d5"
            ]
        ]
    },
    {
        "id": "696aad116011f9f1",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B18_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18,B18-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B18,B18-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B18,B18-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B18,B18-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B18,B18-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B18,B18-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B18,B18-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "a3a4524074ea89a3"
            ]
        ]
    },
    {
        "id": "a3a4524074ea89a3",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "410ced895003e0ff"
            ]
        ]
    },
    {
        "id": "410ced895003e0ff",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "2375be6439f16747",
        "type": "debug",
        "z": "67aced96bd7c9761",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 660,
        "wires": []
    },
    {
        "id": "042a4deba70a4ec4",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B18_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18,B18-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B18,B18-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B18,B18-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B18,B18-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B18,B18-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B18,B18-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B18,B18-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "e4698971a95837e0"
            ]
        ]
    },
    {
        "id": "e4698971a95837e0",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "1643fcdcd1b72dc8"
            ]
        ]
    },
    {
        "id": "1643fcdcd1b72dc8",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 180,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "5c4ada8f574124f3",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 260,
        "wires": [
            [
                "b7a71f39b0cc8169"
            ]
        ]
    },
    {
        "id": "b7a71f39b0cc8169",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 260,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "bb9d267bb7f9f9f9",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 300,
        "wires": [
            [
                "46ef9da62e6f5b35"
            ]
        ]
    },
    {
        "id": "46ef9da62e6f5b35",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 300,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "67097d8a3cfc3a97",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 380,
        "wires": [
            [
                "f8c505e6626ca572"
            ]
        ]
    },
    {
        "id": "f8c505e6626ca572",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 380,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "d7231759880ce105",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 420,
        "wires": [
            [
                "aacadfd60543f481"
            ]
        ]
    },
    {
        "id": "aacadfd60543f481",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "9cbae90462ec1367",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "b9244a5c9a26c1d5"
            ]
        ]
    },
    {
        "id": "b9244a5c9a26c1d5",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 500,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "5666d86dee11fd2e",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "eca352401a2ffe7b"
            ]
        ]
    },
    {
        "id": "eca352401a2ffe7b",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 540,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "1fd6f265b24c43f7",
        "type": "influxdb batch",
        "z": "67aced96bd7c9761",
        "d": true,
        "influxdb": "9e6b7d4fa70e76f2",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 1390,
        "y": 620,
        "wires": []
    },
    {
        "id": "358153a8276127ec",
        "type": "inject",
        "z": "67aced96bd7c9761",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "4d2974c4dc374531"
            ]
        ]
    },
    {
        "id": "b2cfe5c30667ab5c",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B19_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B19,B19-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B19,B19-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B19,B19-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B19,B19-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B19,B19-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B19,B19-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B19,B19-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "5c4ada8f574124f3"
            ]
        ]
    },
    {
        "id": "f5567c291e1d73d7",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B19_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B19,B19-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B19,B19-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B19,B19-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B19,B19-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B19,B19-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B19,B19-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B19,B19-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "bb9d267bb7f9f9f9"
            ]
        ]
    },
    {
        "id": "fdd8d8ce26cac96c",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B21_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B21,B21-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B21,B21-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B21,B21-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B21,B21-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B21,B21-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B21,B21-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B21,B21-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "67097d8a3cfc3a97"
            ]
        ]
    },
    {
        "id": "a91f5890797a602b",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B21_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B21,B21-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B21,B21-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B21,B21-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B21,B21-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B21,B21-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B21,B21-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B21,B21-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 420,
        "wires": [
            [
                "d7231759880ce105"
            ]
        ]
    },
    {
        "id": "86cabf56a4aa6033",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B22_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B22,B22-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B22,B22-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B22,B22-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B22,B22-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B22,B22-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B22,B22-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B22,B22-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "9cbae90462ec1367"
            ]
        ]
    },
    {
        "id": "7cbefe44c4e69ab0",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B22_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B22,B22-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B22,B22-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B22,B22-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B22,B22-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B22,B22-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B22,B22-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B22,B22-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 540,
        "wires": [
            [
                "5666d86dee11fd2e"
            ]
        ]
    },
    {
        "id": "38f6587deaaa6a3b",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B23_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B23,B23-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B23,B23-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B23,B23-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B23,B23-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B23,B23-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B23,B23-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B23,B23-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 620,
        "wires": [
            [
                "9da33f0f42a697e2"
            ]
        ]
    },
    {
        "id": "39424c2dad8e50a7",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B23_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B23,B23-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B23,B23-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B23,B23-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B23,B23-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B23,B23-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B23,B23-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B23,B23-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 660,
        "wires": [
            [
                "3c2f935f24e74B22"
            ]
        ]
    },
    {
        "id": "9da33f0f42a697e2",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "d9d14458543720f5"
            ]
        ]
    },
    {
        "id": "d9d14458543720f5",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 620,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "3c2f935f24e74B22",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 660,
        "wires": [
            [
                "8eac7a0557699568"
            ]
        ]
    },
    {
        "id": "8eac7a0557699568",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 660,
        "wires": [
            [
                "34e7019dbB21ca1c"
            ]
        ]
    },
    {
        "id": "24775a11dff3efcb",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B24_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B24,B24-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B24,B24-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B24,B24-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B24,B24-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B24,B24-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B24,B24-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B24,B24-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 740,
        "wires": [
            [
                "b7555b5a91da52c0"
            ]
        ]
    },
    {
        "id": "b7555b5a91da52c0",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "826090648a6c5fdb"
            ]
        ]
    },
    {
        "id": "826090648a6c5fdb",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 740,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "c3cf3828a6ae42ec",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B24_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B24,B24-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B24,B24-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B24,B24-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B24,B24-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B24,B24-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B24,B24-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B24,B24-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 780,
        "wires": [
            [
                "8464df2dad97a2a1"
            ]
        ]
    },
    {
        "id": "8464df2dad97a2a1",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 780,
        "wires": [
            [
                "3ca9e0110073dc4b"
            ]
        ]
    },
    {
        "id": "3ca9e0110073dc4b",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "0a69ea719e190a34",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 860,
        "wires": [
            [
                "718deB429ef71083"
            ]
        ]
    },
    {
        "id": "718deB429ef71083",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 860,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "b9ec0ee0084ba54c",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 900,
        "wires": [
            [
                "f1bff45a964bbdb6"
            ]
        ]
    },
    {
        "id": "f1bff45a964bbdb6",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 900,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "684ff2721343e6c0",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 980,
        "wires": [
            [
                "e9522555e4de4d09"
            ]
        ]
    },
    {
        "id": "e9522555e4de4d09",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 980,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "f5c050483733504b",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "c26aaefc66510708"
            ]
        ]
    },
    {
        "id": "c26aaefc66510708",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1020,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "67aa203db62604ff",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1100,
        "wires": [
            [
                "415ac18cfc23b796"
            ]
        ]
    },
    {
        "id": "415ac18cfc23b796",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1100,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "5ee1f4a8226d7616",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1140,
        "wires": [
            [
                "1e3521c9eefeb3db"
            ]
        ]
    },
    {
        "id": "1e3521c9eefeb3db",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1140,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "8f4150e371320938",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B25_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B25,B25-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B25,B25-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B25,B25-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B25,B25-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B25,B25-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B25,B25-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B25,B25-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 860,
        "wires": [
            [
                "0a69ea719e190a34"
            ]
        ]
    },
    {
        "id": "9d040d2996189335",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B25_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B25,B25-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B25,B25-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B25,B25-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B25,B25-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B25,B25-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B25,B25-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B25,B25-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 900,
        "wires": [
            [
                "b9ec0ee0084ba54c"
            ]
        ]
    },
    {
        "id": "9545f441ac1c095f",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B26_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B26,B26-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B26,B26-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B26,B26-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B26,B26-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B26,B26-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B26,B26-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B26,B26-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 980,
        "wires": [
            [
                "684ff2721343e6c0"
            ]
        ]
    },
    {
        "id": "e13fb71fc55e1244",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B26_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B26,B26-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B26,B26-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B26,B26-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B26,B26-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B26,B26-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B26,B26-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B26,B26-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1020,
        "wires": [
            [
                "f5c050483733504b"
            ]
        ]
    },
    {
        "id": "2e127B2423904cfd",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B33_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B33,B33-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B33,B33-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B33,B33-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B33,B33-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B33,B33-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B33,B33-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B33,B33-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "67aa203db62604ff"
            ]
        ]
    },
    {
        "id": "271f3b6d7a86c0c7",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B33_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B33,B33-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B33,B33-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B33,B33-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B33,B33-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B33,B33-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B33,B33-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B33,B33-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1140,
        "wires": [
            [
                "5ee1f4a8226d7616"
            ]
        ]
    },
    {
        "id": "ea829087784e2042",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B41_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B41,B41-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B41,B41-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B41,B41-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B41,B41-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B41,B41-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B41,B41-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B41,B41-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "03303aed154d60e7"
            ]
        ]
    },
    {
        "id": "679687116577ce90",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B41_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B41,B41-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B41,B41-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B41,B41-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B41,B41-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B41,B41-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B41,B41-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B41,B41-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1260,
        "wires": [
            [
                "41a4f7d0aB493e4a"
            ]
        ]
    },
    {
        "id": "03303aed154d60e7",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "4943038b2d9cc5ce"
            ]
        ]
    },
    {
        "id": "4943038b2d9cc5ce",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "41a4f7d0aB493e4a",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1260,
        "wires": [
            [
                "db78b4792ddec523"
            ]
        ]
    },
    {
        "id": "db78b4792ddec523",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1260,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "04e3954f27f6d608",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n\n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 700,
        "wires": [
            [
                "b82677f5b287428f",
                "3c01cf3219666667",
                "d7a6cbdeee943445"
            ]
        ]
    },
    {
        "id": "c74a16f7f582150e",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B42_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B42,B42-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B42,B42-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B42,B42-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B42,B42-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B42,B42-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B42,B42-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B42,B42-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 380,
        "wires": [
            [
                "a488e2a7ffeaad59"
            ]
        ]
    },
    {
        "id": "a488e2a7ffeaad59",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 380,
        "wires": [
            [
                "135f8e47e9491df4"
            ]
        ]
    },
    {
        "id": "135f8e47e9491df4",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 380,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "b82677f5b287428f",
        "type": "debug",
        "z": "67aced96bd7c9761",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2970,
        "y": 660,
        "wires": []
    },
    {
        "id": "29e95ea1a184faa9",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B42_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B42,B42-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B42,B42-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B42,B42-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B42,B42-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B42,B42-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B42,B42-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B42,B42-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 420,
        "wires": [
            [
                "9fbf86d60f74f786"
            ]
        ]
    },
    {
        "id": "9fbf86d60f74f786",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 420,
        "wires": [
            [
                "7b4537f655bdfdd1"
            ]
        ]
    },
    {
        "id": "7b4537f655bdfdd1",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 420,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "50a6bc0a4aefbdfb",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 500,
        "wires": [
            [
                "f87a76161c0d5305"
            ]
        ]
    },
    {
        "id": "f87a76161c0d5305",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 500,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "68fe160a59794a74",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 540,
        "wires": [
            [
                "c3bb0041282dc44d"
            ]
        ]
    },
    {
        "id": "c3bb0041282dc44d",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 540,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "ee29eac41afa7a07",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 620,
        "wires": [
            [
                "79e064d024b3dba3"
            ]
        ]
    },
    {
        "id": "79e064d024b3dba3",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 620,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "172c5f7a007efbb9",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 660,
        "wires": [
            [
                "6a300d353e9b0009"
            ]
        ]
    },
    {
        "id": "6a300d353e9b0009",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 660,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "9136a095ed9384e9",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 740,
        "wires": [
            [
                "ded11B50ea760abb"
            ]
        ]
    },
    {
        "id": "ded11B50ea760abb",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 740,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "c70db4c83b6c9283",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 780,
        "wires": [
            [
                "6490406c8797a901"
            ]
        ]
    },
    {
        "id": "6490406c8797a901",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 780,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "3c01cf3219666667",
        "type": "influxdb batch",
        "z": "67aced96bd7c9761",
        "d": true,
        "influxdb": "9e6b7d4fa70e76f2",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 2950,
        "y": 620,
        "wires": []
    },
    {
        "id": "0301452f2ee50979",
        "type": "inject",
        "z": "67aced96bd7c9761",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1690,
        "y": 700,
        "wires": [
            [
                "5704384bfb18daea"
            ]
        ]
    },
    {
        "id": "2f735a3b4d20acb4",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B44_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B44,B44-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B44,B44-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B44,B44-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B44,B44-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B44,B44-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B44,B44-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B44,B44-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 500,
        "wires": [
            [
                "50a6bc0a4aefbdfb"
            ]
        ]
    },
    {
        "id": "cd02971ab6ff38aa",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B44_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B44,B44-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B44,B44-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B44,B44-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B44,B44-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B44,B44-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B44,B44-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B44,B44-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 540,
        "wires": [
            [
                "68fe160a59794a74"
            ]
        ]
    },
    {
        "id": "e38a2db92da97149",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B47_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B47,B47-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B47,B47-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B47,B47-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B47,B47-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B47,B47-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B47,B47-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B47,B47-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 620,
        "wires": [
            [
                "ee29eac41afa7a07"
            ]
        ]
    },
    {
        "id": "45811681e89fcc80",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B47_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B47,B47-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B47,B47-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B47,B47-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B47,B47-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B47,B47-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B47,B47-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B47,B47-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 660,
        "wires": [
            [
                "172c5f7a007efbb9"
            ]
        ]
    },
    {
        "id": "0f39b2f05f59658a",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B48_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B48,B48-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B48,B48-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B48,B48-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B48,B48-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B48,B48-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B48,B48-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B48,B48-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 740,
        "wires": [
            [
                "9136a095ed9384e9"
            ]
        ]
    },
    {
        "id": "78ef2a0892641806",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B48_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B48,B48-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B48,B48-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B48,B48-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B48,B48-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B48,B48-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B48,B48-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B48,B48-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 780,
        "wires": [
            [
                "c70db4c83b6c9283"
            ]
        ]
    },
    {
        "id": "a60297c9f60eb59e",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B49_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B49,B49-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B49,B49-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B49,B49-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B49,B49-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B49,B49-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B49,B49-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B49,B49-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 860,
        "wires": [
            [
                "0ba8623777fd43fb"
            ]
        ]
    },
    {
        "id": "967210e271089726",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B49_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B49,B49-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B49,B49-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B49,B49-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B49,B49-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B49,B49-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B49,B49-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B49,B49-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 900,
        "wires": [
            [
                "08702065926eea6f"
            ]
        ]
    },
    {
        "id": "0ba8623777fd43fb",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 860,
        "wires": [
            [
                "4f10f164c146d0c5"
            ]
        ]
    },
    {
        "id": "4f10f164c146d0c5",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 860,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "08702065926eea6f",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 900,
        "wires": [
            [
                "93efB22675a2bf79"
            ]
        ]
    },
    {
        "id": "93efB22675a2bf79",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 900,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "65be42d77ab6465e",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B50_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B50,B50-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B50,B50-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B50,B50-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B50,B50-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B50,B50-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B50,B50-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B50,B50-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 960,
        "wires": [
            [
                "33a157f74B183a9c"
            ]
        ]
    },
    {
        "id": "33a157f74B183a9c",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 960,
        "wires": [
            [
                "3110b6e90ed8a87a"
            ]
        ]
    },
    {
        "id": "3110b6e90ed8a87a",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 960,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "cd5572f07eed81bb",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "B50_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B50,B50-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B50,B50-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B50,B50-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B50,B50-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B50,B50-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B50,B50-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B50,B50-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 1000,
        "wires": [
            [
                "fd8aeb7b9ec29a57"
            ]
        ]
    },
    {
        "id": "fd8aeb7b9ec29a57",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 1000,
        "wires": [
            [
                "eb5368623baae566"
            ]
        ]
    },
    {
        "id": "eb5368623baae566",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1000,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "76687d7f83eb786c",
        "type": "mqtt out",
        "z": "67aced96bd7c9761",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 1530,
        "y": 720,
        "wires": []
    },
    {
        "id": "d355814392ab18d5",
        "type": "join",
        "z": "67aced96bd7c9761",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1390,
        "y": 720,
        "wires": [
            [
                "76687d7f83eb786c",
                "2375be6439f16747"
            ]
        ]
    },
    {
        "id": "9d1aa7ae75833bb8",
        "type": "mqtt out",
        "z": "67aced96bd7c9761",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 3090,
        "y": 700,
        "wires": []
    },
    {
        "id": "d7a6cbdeee943445",
        "type": "join",
        "z": "67aced96bd7c9761",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2950,
        "y": 700,
        "wires": [
            [
                "9d1aa7ae75833bb8"
            ]
        ]
    },
    {
        "id": "332bf4a9a8c9b96e",
        "type": "template",
        "z": "67aced96bd7c9761",
        "name": "COMM",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18,BLOCK_18,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n2,B18,BLOCK_18,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n3,B19,BLOCK_19,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n4,B19,BLOCK_19,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n5,B21,BLOCK_21,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n6,B21,BLOCK_21,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n7,B22,BLOCK_22,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n8,B22,BLOCK_22,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n9,B23,BLOCK_23,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n10,B23,BLOCK_23,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n11,B24,BLOCK_24,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n12,B24,BLOCK_24,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n13,B25,BLOCK_25,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n14,B25,BLOCK_25,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n15,B26,BLOCK_26,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n16,B26,BLOCK_26,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n17,B33,BLOCK_33,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n18,B33,BLOCK_33,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n19,B41,BLOCK_41,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n20,B41,BLOCK_41,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n21,B42,BLOCK_42,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n22,B42,BLOCK_42,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n23,B44,BLOCK_44,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n24,B44,BLOCK_44,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n25,B47,BLOCK_47,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n26,B47,BLOCK_47,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n27,B48,BLOCK_48,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n28,B48,BLOCK_48,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n29,B49,BLOCK_49,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n30,B49,BLOCK_49,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n31,B50,BLOCK_50,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n32,B50,BLOCK_50,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 560,
        "y": 1320,
        "wires": [
            [
                "c48d65dda2168c89"
            ]
        ]
    },
    {
        "id": "c48d65dda2168c89",
        "type": "csv",
        "z": "67aced96bd7c9761",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1320,
        "wires": [
            [
                "bc641d976ffa7966"
            ]
        ]
    },
    {
        "id": "bc641d976ffa7966",
        "type": "function",
        "z": "67aced96bd7c9761",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].f}.${msg.payload[i].b}.${msg.payload[i].d}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": msg.payload[i].u\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1320,
        "wires": [
            [
                "f4eda9c7cbc80927",
                "c877b7fbfd125b59"
            ]
        ]
    },
    {
        "id": "c877b7fbfd125b59",
        "type": "debug",
        "z": "67aced96bd7c9761",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1320,
        "wires": []
    },
    {
        "id": "191f0bb17818b938",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 700,
        "wires": [
            [
                "8b2b5caf7261981c",
                "2982232bd4da62a6"
            ]
        ]
    },
    {
        "id": "ad6a0f852d8120df",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B18_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18,B18-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B18,B18-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B18,B18-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B18,B18-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B18,B18-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B18,B18-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B18,B18-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "d4eb26cf129ba1fe"
            ]
        ]
    },
    {
        "id": "d4eb26cf129ba1fe",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "967a7619a5f50828"
            ]
        ]
    },
    {
        "id": "967a7619a5f50828",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "a8bce7b3fd48b55f",
        "type": "debug",
        "z": "0c34fef90e1f7ed5",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 660,
        "wires": []
    },
    {
        "id": "09b59083e0f91efb",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B18_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18,B18-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B18,B18-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B18,B18-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B18,B18-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B18,B18-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B18,B18-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B18,B18-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "8a316159e4c0bbf2"
            ]
        ]
    },
    {
        "id": "8a316159e4c0bbf2",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "f2f1063e12db491d"
            ]
        ]
    },
    {
        "id": "f2f1063e12db491d",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 180,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "3e07db6f1ae24982",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 260,
        "wires": [
            [
                "d256f71d7c892556"
            ]
        ]
    },
    {
        "id": "d256f71d7c892556",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 260,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "f44ae45083de70e5",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 300,
        "wires": [
            [
                "822ffb3641e583c6"
            ]
        ]
    },
    {
        "id": "822ffb3641e583c6",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 300,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "8ecf6991d4d28016",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 380,
        "wires": [
            [
                "5ef6465f1a4f1713"
            ]
        ]
    },
    {
        "id": "5ef6465f1a4f1713",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 380,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "b11f13fdc107ac8c",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 420,
        "wires": [
            [
                "523a0aa0df925d42"
            ]
        ]
    },
    {
        "id": "523a0aa0df925d42",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "b6541694469dc507",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "d1813b56424bd8c3"
            ]
        ]
    },
    {
        "id": "d1813b56424bd8c3",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 500,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "8ad38bf79ada5c23",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "c0882cb9630a4953"
            ]
        ]
    },
    {
        "id": "c0882cb9630a4953",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 540,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "8b2b5caf7261981c",
        "type": "influxdb batch",
        "z": "0c34fef90e1f7ed5",
        "d": true,
        "influxdb": "9e6b7d4fa70e76f2",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 1390,
        "y": 620,
        "wires": []
    },
    {
        "id": "c557b7c0358ad2ad",
        "type": "inject",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "9172fb6f3b948711"
            ]
        ]
    },
    {
        "id": "ccb54e4cc7803efc",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B19_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B19,B19-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B19,B19-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B19,B19-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B19,B19-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B19,B19-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B19,B19-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B19,B19-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "3e07db6f1ae24982"
            ]
        ]
    },
    {
        "id": "a9c5d5ff95c0438b",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B19_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B19,B19-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B19,B19-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B19,B19-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B19,B19-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B19,B19-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B19,B19-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B19,B19-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "f44ae45083de70e5"
            ]
        ]
    },
    {
        "id": "885d106b96d3ee5f",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B21_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B21,B21-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B21,B21-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B21,B21-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B21,B21-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B21,B21-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B21,B21-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B21,B21-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "8ecf6991d4d28016"
            ]
        ]
    },
    {
        "id": "f103867e394807e8",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B21_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B21,B21-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B21,B21-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B21,B21-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B21,B21-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B21,B21-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B21,B21-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B21,B21-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 420,
        "wires": [
            [
                "b11f13fdc107ac8c"
            ]
        ]
    },
    {
        "id": "1b5658f1851454f9",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B22_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B22,B22-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B22,B22-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B22,B22-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B22,B22-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B22,B22-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B22,B22-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B22,B22-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "b6541694469dc507"
            ]
        ]
    },
    {
        "id": "3b6680459ab446d4",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B22_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B22,B22-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B22,B22-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B22,B22-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B22,B22-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B22,B22-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B22,B22-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B22,B22-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 540,
        "wires": [
            [
                "8ad38bf79ada5c23"
            ]
        ]
    },
    {
        "id": "3fb063535a4be023",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B23_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B23,B23-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B23,B23-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B23,B23-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B23,B23-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B23,B23-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B23,B23-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B23,B23-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 620,
        "wires": [
            [
                "eff5b0bb11814014"
            ]
        ]
    },
    {
        "id": "cbb1752c77f7ec75",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B23_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B23,B23-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B23,B23-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B23,B23-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B23,B23-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B23,B23-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B23,B23-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B23,B23-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 660,
        "wires": [
            [
                "9830e4da8b886086"
            ]
        ]
    },
    {
        "id": "eff5b0bb11814014",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "f36a93c9477701b1"
            ]
        ]
    },
    {
        "id": "f36a93c9477701b1",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 620,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "9830e4da8b886086",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 660,
        "wires": [
            [
                "29948a278f67585f"
            ]
        ]
    },
    {
        "id": "29948a278f67585f",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 660,
        "wires": [
            [
                "5c3fba88199b7c53"
            ]
        ]
    },
    {
        "id": "720262fb41cc2671",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B24_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B24,B24-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B24,B24-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B24,B24-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B24,B24-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B24,B24-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B24,B24-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B24,B24-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 740,
        "wires": [
            [
                "9c85ff024cef2874"
            ]
        ]
    },
    {
        "id": "9c85ff024cef2874",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "7bae29edf6b8023c"
            ]
        ]
    },
    {
        "id": "7bae29edf6b8023c",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 740,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "e99210e98d8b1115",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B24_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B24,B24-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B24,B24-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B24,B24-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B24,B24-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B24,B24-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B24,B24-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B24,B24-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 780,
        "wires": [
            [
                "8e1b8989e301b975"
            ]
        ]
    },
    {
        "id": "8e1b8989e301b975",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 780,
        "wires": [
            [
                "f8d7ba46ed0c42b6"
            ]
        ]
    },
    {
        "id": "f8d7ba46ed0c42b6",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "f0e40e842cf3618f",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 860,
        "wires": [
            [
                "71d36a1a8630d89c"
            ]
        ]
    },
    {
        "id": "71d36a1a8630d89c",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 860,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "caa00adaf28b5965",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 900,
        "wires": [
            [
                "a3c53111bab97f39"
            ]
        ]
    },
    {
        "id": "a3c53111bab97f39",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 900,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "27d96f20dde88fe4",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 980,
        "wires": [
            [
                "3087d227aba0924a"
            ]
        ]
    },
    {
        "id": "3087d227aba0924a",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 980,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "77fa09f73c116a4c",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "9529964952cc37b9"
            ]
        ]
    },
    {
        "id": "9529964952cc37b9",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1020,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "d8c1d020c4813912",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1100,
        "wires": [
            [
                "fea5e56ba22cef19"
            ]
        ]
    },
    {
        "id": "fea5e56ba22cef19",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1100,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "a386c62d03775be4",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1140,
        "wires": [
            [
                "4b8e648bc7a6d4a4"
            ]
        ]
    },
    {
        "id": "4b8e648bc7a6d4a4",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1140,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "a1e57ad87f7f9225",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B25_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B25,B25-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B25,B25-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B25,B25-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B25,B25-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B25,B25-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B25,B25-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B25,B25-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 860,
        "wires": [
            [
                "f0e40e842cf3618f"
            ]
        ]
    },
    {
        "id": "8c61caad8e837b74",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B25_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B25,B25-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B25,B25-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B25,B25-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B25,B25-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B25,B25-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B25,B25-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B25,B25-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 900,
        "wires": [
            [
                "caa00adaf28b5965"
            ]
        ]
    },
    {
        "id": "b4a068d1393812c8",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B26_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B26,B26-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B26,B26-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B26,B26-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B26,B26-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B26,B26-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B26,B26-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B26,B26-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 980,
        "wires": [
            [
                "27d96f20dde88fe4"
            ]
        ]
    },
    {
        "id": "7d433a9ce6916aac",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B26_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B26,B26-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B26,B26-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B26,B26-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B26,B26-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B26,B26-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B26,B26-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B26,B26-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1020,
        "wires": [
            [
                "77fa09f73c116a4c"
            ]
        ]
    },
    {
        "id": "83e0e90995ec4a10",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B33_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B33,B33-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B33,B33-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B33,B33-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B33,B33-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B33,B33-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B33,B33-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B33,B33-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "d8c1d020c4813912"
            ]
        ]
    },
    {
        "id": "6865ed9a218d8c4d",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B33_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B33,B33-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B33,B33-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B33,B33-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B33,B33-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B33,B33-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B33,B33-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B33,B33-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1140,
        "wires": [
            [
                "a386c62d03775be4"
            ]
        ]
    },
    {
        "id": "af9c718161d993aa",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B41_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B41,B41-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B41,B41-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B41,B41-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B41,B41-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B41,B41-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B41,B41-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B41,B41-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "a578f5f49030b749"
            ]
        ]
    },
    {
        "id": "b42a9b8286d4e4aa",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B41_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B41,B41-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B41,B41-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B41,B41-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B41,B41-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B41,B41-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B41,B41-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B41,B41-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 570,
        "y": 1260,
        "wires": [
            [
                "fe69ebb331925bc3"
            ]
        ]
    },
    {
        "id": "a578f5f49030b749",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "7ff29fd65b406a7d"
            ]
        ]
    },
    {
        "id": "7ff29fd65b406a7d",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "fe69ebb331925bc3",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1260,
        "wires": [
            [
                "ca0f100ad4d32f1f"
            ]
        ]
    },
    {
        "id": "ca0f100ad4d32f1f",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1260,
        "wires": [
            [
                "963c24662bb00fe0"
            ]
        ]
    },
    {
        "id": "5317e47b96b62ac7",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n\n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 700,
        "wires": [
            [
                "b4bc95fbde6a19f6",
                "5c629becd52fe926",
                "3a49cdd4f2074aa2"
            ]
        ]
    },
    {
        "id": "0cc914bb290cf893",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B42_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B42,B42-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B42,B42-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B42,B42-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B42,B42-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B42,B42-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B42,B42-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B42,B42-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 380,
        "wires": [
            [
                "f2714390b79f8622"
            ]
        ]
    },
    {
        "id": "f2714390b79f8622",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 380,
        "wires": [
            [
                "c9a43ddbb1416faa"
            ]
        ]
    },
    {
        "id": "c9a43ddbb1416faa",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 380,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "b4bc95fbde6a19f6",
        "type": "debug",
        "z": "0c34fef90e1f7ed5",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2970,
        "y": 660,
        "wires": []
    },
    {
        "id": "5fb6f911df86b7dc",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B42_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B42,B42-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B42,B42-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B42,B42-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B42,B42-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B42,B42-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B42,B42-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B42,B42-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 420,
        "wires": [
            [
                "5a5a2a4aad225e5e"
            ]
        ]
    },
    {
        "id": "5a5a2a4aad225e5e",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 420,
        "wires": [
            [
                "6c8fc4e1bc6a3bd9"
            ]
        ]
    },
    {
        "id": "6c8fc4e1bc6a3bd9",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 420,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "f683c84a8658975a",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 500,
        "wires": [
            [
                "72ca54a528878a0a"
            ]
        ]
    },
    {
        "id": "72ca54a528878a0a",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 500,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "a28c51195ce63585",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 540,
        "wires": [
            [
                "012d154f84e45b74"
            ]
        ]
    },
    {
        "id": "012d154f84e45b74",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 540,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "589457b60755cfed",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 620,
        "wires": [
            [
                "f6203c86f99575e3"
            ]
        ]
    },
    {
        "id": "f6203c86f99575e3",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 620,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "a99cf66ddf4c8d75",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 660,
        "wires": [
            [
                "59f45affc9bd2bfe"
            ]
        ]
    },
    {
        "id": "59f45affc9bd2bfe",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 660,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "554ee642c1b2a0d8",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 740,
        "wires": [
            [
                "da7b88b1f464697c"
            ]
        ]
    },
    {
        "id": "da7b88b1f464697c",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 740,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "a46c334f47782879",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 780,
        "wires": [
            [
                "bf45e7a2b5061d5b"
            ]
        ]
    },
    {
        "id": "bf45e7a2b5061d5b",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 780,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "5c629becd52fe926",
        "type": "influxdb batch",
        "z": "0c34fef90e1f7ed5",
        "d": true,
        "influxdb": "9e6b7d4fa70e76f2",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 2950,
        "y": 620,
        "wires": []
    },
    {
        "id": "e0b1a04ec71a7ec2",
        "type": "inject",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1690,
        "y": 700,
        "wires": [
            [
                "4df8af329b8797a0"
            ]
        ]
    },
    {
        "id": "cb3cb395850c90ab",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B44_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B44,B44-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B44,B44-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B44,B44-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B44,B44-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B44,B44-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B44,B44-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B44,B44-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 500,
        "wires": [
            [
                "f683c84a8658975a"
            ]
        ]
    },
    {
        "id": "96d5595ff1160d68",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B44_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B44,B44-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B44,B44-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B44,B44-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B44,B44-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B44,B44-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B44,B44-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B44,B44-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 540,
        "wires": [
            [
                "a28c51195ce63585"
            ]
        ]
    },
    {
        "id": "8c32478eed3e566d",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B47_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B47,B47-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B47,B47-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B47,B47-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B47,B47-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B47,B47-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B47,B47-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B47,B47-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 620,
        "wires": [
            [
                "589457b60755cfed"
            ]
        ]
    },
    {
        "id": "097981093d0241f1",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B47_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B47,B47-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B47,B47-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B47,B47-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B47,B47-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B47,B47-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B47,B47-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B47,B47-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 660,
        "wires": [
            [
                "a99cf66ddf4c8d75"
            ]
        ]
    },
    {
        "id": "5f764afa47d77b0f",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B48_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B48,B48-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B48,B48-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B48,B48-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B48,B48-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B48,B48-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B48,B48-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B48,B48-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 740,
        "wires": [
            [
                "554ee642c1b2a0d8"
            ]
        ]
    },
    {
        "id": "d9bd12aeab8eb720",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B48_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B48,B48-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B48,B48-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B48,B48-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B48,B48-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B48,B48-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B48,B48-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B48,B48-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 780,
        "wires": [
            [
                "a46c334f47782879"
            ]
        ]
    },
    {
        "id": "93968ab01418f631",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B49_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B49,B49-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B49,B49-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B49,B49-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B49,B49-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B49,B49-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B49,B49-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B49,B49-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 860,
        "wires": [
            [
                "8b7c756d5b63e20f"
            ]
        ]
    },
    {
        "id": "0bf15a6ac44a397c",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B49_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B49,B49-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B49,B49-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B49,B49-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B49,B49-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B49,B49-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B49,B49-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B49,B49-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 900,
        "wires": [
            [
                "b6dc3a31f8bbf028"
            ]
        ]
    },
    {
        "id": "8b7c756d5b63e20f",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 860,
        "wires": [
            [
                "7108627893fe02a3"
            ]
        ]
    },
    {
        "id": "7108627893fe02a3",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 860,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "b6dc3a31f8bbf028",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 900,
        "wires": [
            [
                "4f49573bbbed04b0"
            ]
        ]
    },
    {
        "id": "4f49573bbbed04b0",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 900,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "8ae58c6c09208865",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B50_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B50,B50-INV01,INV01,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B50,B50-INV01,INV01,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B50,B50-INV01,INV01,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B50,B50-INV01,INV01,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B50,B50-INV01,INV01,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B50,B50-INV01,INV01,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B50,B50-INV01,INV01,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 960,
        "wires": [
            [
                "73b21ab5dee4406a"
            ]
        ]
    },
    {
        "id": "73b21ab5dee4406a",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 960,
        "wires": [
            [
                "10424c940a431c5b"
            ]
        ]
    },
    {
        "id": "10424c940a431c5b",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 960,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "e9d2b382caca6903",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "B50_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B50,B50-INV02,INV02,ICT-2,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B50,B50-INV02,INV02,ICT-2,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B50,B50-INV02,INV02,ICT-2,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B50,B50-INV02,INV02,ICT-2,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B50,B50-INV02,INV02,ICT-2,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B50,B50-INV02,INV02,ICT-2,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B50,B50-INV02,INV02,ICT-2,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2130,
        "y": 1000,
        "wires": [
            [
                "f2072dc0e240d9e5"
            ]
        ]
    },
    {
        "id": "f2072dc0e240d9e5",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2290,
        "y": 1000,
        "wires": [
            [
                "025d3eb290ab0c3a"
            ]
        ]
    },
    {
        "id": "025d3eb290ab0c3a",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1000,
        "wires": [
            [
                "98b281dcbe2108ad"
            ]
        ]
    },
    {
        "id": "8787985e61242c33",
        "type": "mqtt out",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 1530,
        "y": 720,
        "wires": []
    },
    {
        "id": "2982232bd4da62a6",
        "type": "join",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1390,
        "y": 720,
        "wires": [
            [
                "8787985e61242c33",
                "a8bce7b3fd48b55f"
            ]
        ]
    },
    {
        "id": "2abaefbbf767ab1e",
        "type": "mqtt out",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 3090,
        "y": 700,
        "wires": []
    },
    {
        "id": "3a49cdd4f2074aa2",
        "type": "join",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2950,
        "y": 700,
        "wires": [
            [
                "2abaefbbf767ab1e"
            ]
        ]
    },
    {
        "id": "67889df1766618c0",
        "type": "template",
        "z": "0c34fef90e1f7ed5",
        "name": "COMM",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B18,BLOCK_18,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n2,B18,BLOCK_18,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n3,B19,BLOCK_19,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n4,B19,BLOCK_19,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n5,B21,BLOCK_21,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n6,B21,BLOCK_21,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n7,B22,BLOCK_22,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n8,B22,BLOCK_22,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n9,B23,BLOCK_23,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n10,B23,BLOCK_23,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n11,B24,BLOCK_24,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n12,B24,BLOCK_24,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n13,B25,BLOCK_25,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n14,B25,BLOCK_25,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n15,B26,BLOCK_26,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n16,B26,BLOCK_26,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n17,B33,BLOCK_33,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n18,B33,BLOCK_33,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n19,B41,BLOCK_41,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n20,B41,BLOCK_41,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n21,B42,BLOCK_42,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n22,B42,BLOCK_42,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n23,B44,BLOCK_44,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n24,B44,BLOCK_44,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n25,B47,BLOCK_47,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n26,B47,BLOCK_47,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n27,B48,BLOCK_48,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n28,B48,BLOCK_48,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n29,B49,BLOCK_49,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n30,B49,BLOCK_49,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n31,B50,BLOCK_50,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n32,B50,BLOCK_50,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 560,
        "y": 1320,
        "wires": [
            [
                "757039f93403f8ee"
            ]
        ]
    },
    {
        "id": "757039f93403f8ee",
        "type": "csv",
        "z": "0c34fef90e1f7ed5",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 1320,
        "wires": [
            [
                "1575ef7397e81727"
            ]
        ]
    },
    {
        "id": "1575ef7397e81727",
        "type": "function",
        "z": "0c34fef90e1f7ed5",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].f}.${msg.payload[i].b}.${msg.payload[i].d}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": msg.payload[i].u\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1320,
        "wires": [
            [
                "963c24662bb00fe0",
                "f39ffce3f44f185e"
            ]
        ]
    },
    {
        "id": "f39ffce3f44f185e",
        "type": "debug",
        "z": "0c34fef90e1f7ed5",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1320,
        "wires": []
    }
]