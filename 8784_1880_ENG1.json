[
    {
        "id": "193b454093f4eff3",
        "type": "tab",
        "label": "Engine_1 - TR_1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e03abaf24abf01d0",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a4e973eb7737e934",
        "type": "tab",
        "label": "Influx",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "579668379cc20d36",
        "type": "tab",
        "label": "Influx",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e5f15136f28abf49",
        "type": "group",
        "z": "e03abaf24abf01d0",
        "name": "MQTT SEND",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fd92247130b88cc3",
            "e49daaa61deabaf9",
            "d41d5b7390d59fd2",
            "54d9750c22bfe598"
        ],
        "x": 754,
        "y": 619,
        "w": 632,
        "h": 142
    },
    {
        "id": "e26ad53a78c1c035",
        "type": "group",
        "z": "e03abaf24abf01d0",
        "name": "MQTT_RECIEVE",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "21a2413983be0c53",
            "1f01580cf1e27d13",
            "19003ff0c4c393a7",
            "be643126def3cda4",
            "f1abc38a0d89300d",
            "2a46a3992a3d65d2",
            "3a6565f62fa8cd42",
            "386273bac3190c90",
            "c05a80a130cd65cc"
        ],
        "x": 754,
        "y": 799,
        "w": 512,
        "h": 302
    },
    {
        "id": "dc5cbb990e10bae9",
        "type": "group",
        "z": "e03abaf24abf01d0",
        "name": "MQTT_REC",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "66dcbc54a4d647bb",
            "6e4acfbed8ac3a42",
            "1cd4671a5c6be248",
            "2837dd1674e230a8",
            "d71002ee99559d2a",
            "ee6a8e4dbb320cac"
        ],
        "x": 94,
        "y": 619,
        "w": 632,
        "h": 162
    },
    {
        "id": "8a8e68d8fde2a0ee",
        "type": "group",
        "z": "e03abaf24abf01d0",
        "name": "MQTT_REC_FOR_REMOTE ON/OFF",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a48fbbafe71a3c78",
            "c5025979c95d8993",
            "f2ed2bcee2b26bd9"
        ],
        "x": 94,
        "y": 839,
        "w": 572,
        "h": 102
    },
    {
        "id": "93d09c30c69e874a",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "696aad116011f9f1",
                "042a4deba70a4ec4",
                "b2cfe5c30667ab5c",
                "f5567c291e1d73d7",
                "fdd8d8ce26cac96c",
                "a91f5890797a602b",
                "86cabf56a4aa6033",
                "7cbefe44c4e69ab0",
                "38f6587deaaa6a3b",
                "39424c2dad8e50a7"
            ]
        ]
    },
    {
        "id": "9c9efb53c4986cd5",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 400,
        "y": 920,
        "wires": [
            [
                "24775a11dff3efcb",
                "c3cf3828a6ae42ec",
                "8f4150e371320938",
                "9d040d2996189335",
                "9545f441ac1c095f",
                "e13fb71fc55e1244",
                "2e127b0623904cfd",
                "271f3b6d7a86c0c7",
                "ea829087784e2042",
                "679687116577ce90",
                "332bf4a9a8c9b96e"
            ]
        ]
    },
    {
        "id": "34e7019dbb03ca1c",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "514a38cc0f154140"
            ]
        ]
    },
    {
        "id": "f4eda9c7cbc80927",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "514a38cc0f154140"
            ]
        ]
    },
    {
        "id": "514a38cc0f154140",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 1040,
        "y": 620,
        "wires": [
            [
                "caa34a6ce5c070c3"
            ]
        ]
    },
    {
        "id": "4d2974c4dc374531",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 340,
        "y": 620,
        "wires": [
            [
                "9c9efb53c4986cd5",
                "93d09c30c69e874a"
            ]
        ]
    },
    {
        "id": "5704384bfb18daea",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 1960,
        "y": 320,
        "wires": [
            [
                "c74a16f7f582150e",
                "29e95ea1a184faa9",
                "2f735a3b4d20acb4",
                "cd02971ab6ff38aa",
                "e38a2db92da97149",
                "45811681e89fcc80",
                "0f39b2f05f59658a",
                "78ef2a0892641806",
                "a60297c9f60eb59e",
                "967210e271089726"
            ]
        ]
    },
    {
        "id": "c0a7faa591b9d7d3",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "65be42d77ab6465e",
                "cd5572f07eed81bb",
                "6d36d4b922b5c56e",
                "bd804a3b48d62f8d",
                "39fc9c0dd30a7415",
                "aa9aa1885364db79"
            ]
        ]
    },
    {
        "id": "e444bc462016e753",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 2560,
        "y": 320,
        "wires": [
            [
                "0ee6580a198ccc66"
            ]
        ]
    },
    {
        "id": "40f87ccf7ac20c63",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 2560,
        "y": 920,
        "wires": [
            [
                "0ee6580a198ccc66"
            ]
        ]
    },
    {
        "id": "0ee6580a198ccc66",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 2600,
        "y": 620,
        "wires": [
            [
                "04e3954f27f6d608"
            ]
        ]
    },
    {
        "id": "00b09c5f778f4b29",
        "type": "junction",
        "z": "a4e973eb7737e934",
        "x": 1900,
        "y": 620,
        "wires": [
            [
                "c0a7faa591b9d7d3",
                "5704384bfb18daea"
            ]
        ]
    },
    {
        "id": "6c2a17fa354583e1",
        "type": "junction",
        "z": "193b454093f4eff3",
        "x": 520,
        "y": 940,
        "wires": [
            [
                "a1dead9c70123628",
                "1ad10a78630c9656",
                "3bfc26dc7266d3f7",
                "8e9902647db9d025",
                "d29a9ea02e05ca43",
                "129cad3545e87f09",
                "9cf459c065c00d34",
                "48e14cea41a7d648",
                "2dc062888e56ccf6",
                "c5b52fcad2e78e39",
                "9505f4613033ad7d",
                "12fc2b1f411e16a2",
                "45488b892bf5e190",
                "9d2441c2afa1f308",
                "b86f15f56992fea6",
                "1eb8332c71c17eea",
                "819b4975caaf9de2",
                "a052a7b1b8360578",
                "ed4ab7f4f6ebdd88",
                "b2e55e425afa2528",
                "c7dd03b239144594",
                "f3eb80a0afe95d23",
                "845eb1d8bb550073",
                "f77719e24dea349b"
            ]
        ]
    },
    {
        "id": "1261a1d9aa2b3b31",
        "type": "junction",
        "z": "193b454093f4eff3",
        "x": 1960,
        "y": 960,
        "wires": [
            [
                "acc61e396858505d",
                "50dd8c0ba88cadea",
                "cf2c8330c3423e07",
                "31a0148c9157e54c",
                "f1a89f8a112d9a5b",
                "66846a702a1893d6",
                "2473dbe6f74553e3",
                "a70b530f14b2d5d3",
                "145dae3ad09a962f",
                "d69a04d469524abd",
                "25910b7eae817af8",
                "e348e0a2f398a4e8",
                "6a450748dea515d6",
                "9fa987fd075a2459",
                "7f332e3bac2f8597",
                "e5ce29ba38358705",
                "33677a376729becd",
                "fd4de7979a804631",
                "9a736cbd36532836",
                "6fcfa9a6e918c541",
                "0ac6a0022f043d7f",
                "7046e684efe68245",
                "972ced0111d27a1d",
                "b9fbc55c36ccd518"
            ]
        ]
    },
    {
        "id": "f1ad26030c9a4cdb",
        "type": "junction",
        "z": "193b454093f4eff3",
        "x": 3460,
        "y": 1020,
        "wires": [
            [
                "03dae02c0d5170ad",
                "6901f4b592611464",
                "f590dce75e31459f",
                "d17fef8ae9ca5f05",
                "c36a85b40298165d",
                "dc407223ef396d2d",
                "d4a0d7e8f68060aa",
                "94d2ce4b568973b4",
                "3a32a6698fef0ff0",
                "60ddc5dadf735873",
                "f43b7983439965bc",
                "37a4f10c6647c7f5",
                "ab85923f451c86bd",
                "359eb23df6e62067",
                "a9124dc479c4a6ad",
                "98f945d1cc127f95",
                "2f0f372d70a7bd1e",
                "ae328e8415659cea",
                "f67869d89768f46a",
                "81d328921df92f9f",
                "33d31571868a6ff2",
                "8b43f65d31addb03",
                "14bb6233f9c78cac",
                "b64b76aa6c58fbc2"
            ]
        ]
    },
    {
        "id": "fa3840ee4c0a2b6d",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "14e526447cf448e7",
                "8c7d5029383904f7",
                "88850ebe5e53948d",
                "a9b1b7f10a735b21",
                "21a95dedd4dd7fc0",
                "ae16ba47014c7f83",
                "3c25166b00c3cf44",
                "c641942489a64991",
                "c4eee3bb5609351c",
                "ec6e7dcc153b04a3"
            ]
        ]
    },
    {
        "id": "abcc198d17b6bb1e",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 400,
        "y": 920,
        "wires": [
            [
                "0bc5741cdb835560",
                "d2b51b06769ba5ec",
                "ea42981e1a4f1da9",
                "1614aa5b142fb436",
                "7530aacf001a6dae",
                "a19efa721c30556b",
                "3b8d9f3ac6402dc0",
                "e82566fc67adaf24",
                "5f31b353a5d6ed12",
                "3a8fa39de4875821",
                "c2c630d1c21b93de"
            ]
        ]
    },
    {
        "id": "4cbd386ddca19f9f",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "d5b7ab625c65eae1"
            ]
        ]
    },
    {
        "id": "1f19bbf695e844b3",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "d5b7ab625c65eae1"
            ]
        ]
    },
    {
        "id": "d5b7ab625c65eae1",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 1040,
        "y": 620,
        "wires": [
            [
                "facdc2f33782d683"
            ]
        ]
    },
    {
        "id": "08ecb247ea3c35f3",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 340,
        "y": 620,
        "wires": [
            [
                "abcc198d17b6bb1e",
                "fa3840ee4c0a2b6d"
            ]
        ]
    },
    {
        "id": "00bcb1beb1a07dfe",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 1960,
        "y": 320,
        "wires": [
            [
                "f8299fe1e17f4760",
                "7f74e53cd11427e4",
                "fddc5ddae55677a5",
                "4b5b4b1082c8876a",
                "77ae8c7bcaa9b307",
                "7da48b0d08258fe3",
                "11a59cb4355fd405",
                "7347da0e609377c6",
                "27504b22b508d4ef",
                "52eebdd552a7a718"
            ]
        ]
    },
    {
        "id": "ac5d97acceb1da25",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "0e8797878edfaf26",
                "5b440863d9984705",
                "3fa2f9987f7fb179",
                "1977ead1eef8d378",
                "87bb7a002d32e122",
                "59bfde6cd39b4e9d"
            ]
        ]
    },
    {
        "id": "897576abf48f6158",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 2560,
        "y": 320,
        "wires": [
            [
                "d3b5207c3cf9a942"
            ]
        ]
    },
    {
        "id": "16fe0cb2d438632a",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 2560,
        "y": 920,
        "wires": [
            [
                "d3b5207c3cf9a942"
            ]
        ]
    },
    {
        "id": "d3b5207c3cf9a942",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 2600,
        "y": 620,
        "wires": [
            [
                "e055d6bda0d0cde7"
            ]
        ]
    },
    {
        "id": "7b1a98eaf9c7f165",
        "type": "junction",
        "z": "579668379cc20d36",
        "x": 1900,
        "y": 620,
        "wires": [
            [
                "ac5d97acceb1da25",
                "00bcb1beb1a07dfe"
            ]
        ]
    },
    {
        "id": "f7dc57f35fcfe8fe",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.87.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bf5ddb6c5930fafc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.87.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ea571d30b091616d",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.87.82:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "13d6dd7eae47c2a7",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.1.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "2a120fead7c3544d",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.1.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "57c8383d91e99964",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.2.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "79f69b6014fd6a17",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.2.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 50,
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f16443249c4c8002",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.3.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "42bb26a4fbcb1794",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.3.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6b5bddbd41be1ec2",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.4.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 50,
        "clientTimeout": 2000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 200,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e9cc32156a5871dd",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.4.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "872d05c48f35d483",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.5.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fb0c25e59737ed1e",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.5.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b439c8fe75b63b15",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.6.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "54bbba41d90edcef",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.6.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d202e4d44872b18e",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.7.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9813b51730cbbb6c",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.7.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8df78942fb583ec2",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.8.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "da1d213b41b74eb3",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.8.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "dc66902d439f9bde",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.9.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "884a1807dcd162ee",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.9.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fd1183019dfcbd7f",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.10.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c3c193069afe56b1",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.10.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e7a510a3788f3e05",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.11.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "79d63d5de74e4496",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.11.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a3ae684f142add51",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.12.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f581abcc0f424bb5",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.12.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ce4f361842afd98b",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.13.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4ba467fa3add6b53",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.13.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "54fedac1c2768075",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.14.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fef2313b418f8684",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.14.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "be8bf2523f9c1ed3",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.15.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a7283a13a922f1e3",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.15.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8db3c6b6cf594fda",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.16.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "0be93415b1310d35",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.16.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "2becd8e444a5bb80",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.17.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "55f6f9611d82a845",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.17.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": 2000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 200,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "57ad9ac3b8300c1e",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.20.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d457fcf2bcedc465",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.20.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4012a214602a528a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c310f3dd51420beb",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 01 - INV 01",
        "info": "",
        "x": 560,
        "y": 220,
        "wires": []
    },
    {
        "id": "53b23faae571c92d",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 01 - INV 02",
        "info": "",
        "x": 560,
        "y": 340,
        "wires": []
    },
    {
        "id": "f8fe637a87f9103e",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 02 - INV 01",
        "info": "",
        "x": 560,
        "y": 460,
        "wires": []
    },
    {
        "id": "dc9e6c9cce1f3570",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 02 - INV 02",
        "info": "",
        "x": 560,
        "y": 580,
        "wires": []
    },
    {
        "id": "11828a2ab13613c7",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 03 - INV 01",
        "info": "",
        "x": 560,
        "y": 700,
        "wires": []
    },
    {
        "id": "8bfb23f7a09ea213",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 03 - INV 02",
        "info": "",
        "x": 560,
        "y": 820,
        "wires": []
    },
    {
        "id": "b5643453cbe9663b",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 04 - INV 01",
        "info": "",
        "x": 700,
        "y": 940,
        "wires": []
    },
    {
        "id": "7734f1cbdfe20467",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 04 - INV 02",
        "info": "",
        "x": 560,
        "y": 1060,
        "wires": []
    },
    {
        "id": "f28b027d22bd8379",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 05 - INV 01",
        "info": "",
        "x": 560,
        "y": 1180,
        "wires": []
    },
    {
        "id": "590815aa51abce6c",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 05 - INV 02",
        "info": "",
        "x": 580,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0fb06a9defaeb6ce",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 06 - INV 01",
        "info": "",
        "x": 580,
        "y": 1420,
        "wires": []
    },
    {
        "id": "08c6a7b94b4d4ea3",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 06 - INV 02",
        "info": "",
        "x": 580,
        "y": 1540,
        "wires": []
    },
    {
        "id": "820af74f5ba16f11",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 07 - INV 01",
        "info": "",
        "x": 2060,
        "y": 240,
        "wires": []
    },
    {
        "id": "2aba43e88089b200",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 07 - INV 02",
        "info": "",
        "x": 2060,
        "y": 360,
        "wires": []
    },
    {
        "id": "5c0122a9fa50c9df",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 08 - INV 01",
        "info": "",
        "x": 2060,
        "y": 480,
        "wires": []
    },
    {
        "id": "1384f251ec9f3287",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 08- INV 02",
        "info": "",
        "x": 2060,
        "y": 600,
        "wires": []
    },
    {
        "id": "2b70d9c64b6c7745",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 09 - INV 01",
        "info": "",
        "x": 2060,
        "y": 720,
        "wires": []
    },
    {
        "id": "85668cb88dc4d865",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 09 - INV 02",
        "info": "",
        "x": 2060,
        "y": 840,
        "wires": []
    },
    {
        "id": "d71718699f5e192d",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 10 - INV 01",
        "info": "",
        "x": 2140,
        "y": 960,
        "wires": []
    },
    {
        "id": "bdc8684f573d24fc",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 10 - INV 02",
        "info": "",
        "x": 2060,
        "y": 1080,
        "wires": []
    },
    {
        "id": "cc822270e539499d",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 11 - INV 01",
        "info": "",
        "x": 2060,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a7833186a42218cd",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 11 - INV 02",
        "info": "",
        "x": 2060,
        "y": 1320,
        "wires": []
    },
    {
        "id": "9a6ca57eb30a7b76",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 12 - INV 01",
        "info": "",
        "x": 2060,
        "y": 1440,
        "wires": []
    },
    {
        "id": "4eb2bc0a36c4fa2a",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 12 - INV 02",
        "info": "",
        "x": 2060,
        "y": 1560,
        "wires": []
    },
    {
        "id": "81f5a789d2cba434",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 13 - INV 01",
        "info": "",
        "x": 3540,
        "y": 240,
        "wires": []
    },
    {
        "id": "53bce79cb7701c3d",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 13 - INV 02",
        "info": "",
        "x": 3540,
        "y": 360,
        "wires": []
    },
    {
        "id": "d84f2c908ad27cc6",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 14 - INV 01",
        "info": "",
        "x": 3540,
        "y": 480,
        "wires": []
    },
    {
        "id": "1c0159267626fbcd",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 14 - INV 02",
        "info": "",
        "x": 3540,
        "y": 600,
        "wires": []
    },
    {
        "id": "b79095a0f28b8064",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 15 - INV 01",
        "info": "",
        "x": 3540,
        "y": 720,
        "wires": []
    },
    {
        "id": "56b35ed3ddeb8454",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 15 - INV 02",
        "info": "",
        "x": 3540,
        "y": 840,
        "wires": []
    },
    {
        "id": "aaa039ef4862736b",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 16 - INV 01",
        "info": "",
        "x": 3540,
        "y": 960,
        "wires": []
    },
    {
        "id": "47b68f961a713ed8",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 16 - INV 02",
        "info": "",
        "x": 3540,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1c3ffd11d11ec422",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 17 - INV 02",
        "info": "",
        "x": 3540,
        "y": 1320,
        "wires": []
    },
    {
        "id": "21368c559710c689",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 20 - INV 01",
        "info": "",
        "x": 3540,
        "y": 1440,
        "wires": []
    },
    {
        "id": "22d8740d87f20517",
        "type": "comment",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Engine 01- Block 20 - INV 02",
        "info": "",
        "x": 3540,
        "y": 1560,
        "wires": []
    },
    {
        "id": "a6b80761cbc07f5c",
        "type": "comment",
        "z": "193b454093f4eff3",
        "name": "Engine 01- Block 17 - INV 01",
        "info": "",
        "x": 3540,
        "y": 1200,
        "wires": []
    },
    {
        "id": "de76b069b4e850ef",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 300,
        "wires": [
            [
                "6143e0c9751606c8"
            ]
        ]
    },
    {
        "id": "b3f0276e8e758c50",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 300,
        "wires": [
            [
                "9ead38a4a0ca3c29"
            ]
        ]
    },
    {
        "id": "e8e4baa66d6733af",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 300,
        "wires": [
            [
                "b3f0276e8e758c50"
            ]
        ]
    },
    {
        "id": "1ad10a78630c9656",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 300,
        "wires": [
            [
                "e8e4baa66d6733af"
            ]
        ]
    },
    {
        "id": "c3a8d0411e60348c",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 300,
        "wires": [
            [
                "de76b069b4e850ef"
            ]
        ]
    },
    {
        "id": "9ead38a4a0ca3c29",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "13d6dd7eae47c2a7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "c3a8d0411e60348c"
            ],
            []
        ]
    },
    {
        "id": "6143e0c9751606c8",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "77e7c025562503a3",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 260,
        "wires": [
            [
                "ec126ccf4989318d"
            ]
        ]
    },
    {
        "id": "a1dead9c70123628",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B01,BLOCK-01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 260,
        "wires": [
            [
                "77e7c025562503a3"
            ]
        ]
    },
    {
        "id": "ec126ccf4989318d",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 260,
        "wires": [
            [
                "12855abecd12dc3d"
            ]
        ]
    },
    {
        "id": "12855abecd12dc3d",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "98854336316f2af4",
                "9ead38a4a0ca3c29"
            ]
        ]
    },
    {
        "id": "98854336316f2af4",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2897",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 260,
        "wires": []
    },
    {
        "id": "305794524ece1e9f",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 420,
        "wires": [
            [
                "c8cf08bb6c319832"
            ]
        ]
    },
    {
        "id": "e099a64ea7718b91",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "b714cbdf6cbbc245"
            ]
        ]
    },
    {
        "id": "5bea88b0d5e3d3d2",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "e099a64ea7718b91"
            ]
        ]
    },
    {
        "id": "8e9902647db9d025",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 420,
        "wires": [
            [
                "5bea88b0d5e3d3d2"
            ]
        ]
    },
    {
        "id": "8521a6e1ee8abef6",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 420,
        "wires": [
            [
                "305794524ece1e9f"
            ]
        ]
    },
    {
        "id": "b714cbdf6cbbc245",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "2a120fead7c3544d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "8521a6e1ee8abef6"
            ],
            []
        ]
    },
    {
        "id": "c8cf08bb6c319832",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "30acb2eedb0f467b",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 380,
        "wires": [
            [
                "4a814cb3b484b3d4"
            ]
        ]
    },
    {
        "id": "3bfc26dc7266d3f7",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B01,BLOCK-01,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 380,
        "wires": [
            [
                "30acb2eedb0f467b"
            ]
        ]
    },
    {
        "id": "4a814cb3b484b3d4",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 380,
        "wires": [
            [
                "652d4a22a8c86a6f"
            ]
        ]
    },
    {
        "id": "652d4a22a8c86a6f",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "fa13be0d6827ebbe",
                "b714cbdf6cbbc245"
            ]
        ]
    },
    {
        "id": "fa13be0d6827ebbe",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2898",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 380,
        "wires": []
    },
    {
        "id": "813d5749f4eb80d8",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 540,
        "wires": [
            [
                "f52ce9abc5e57202"
            ]
        ]
    },
    {
        "id": "3346acbe921284ac",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 540,
        "wires": [
            [
                "6219d7bfa69e948a"
            ]
        ]
    },
    {
        "id": "0f2b53e1ae287340",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 540,
        "wires": [
            [
                "3346acbe921284ac"
            ]
        ]
    },
    {
        "id": "129cad3545e87f09",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 540,
        "wires": [
            [
                "0f2b53e1ae287340"
            ]
        ]
    },
    {
        "id": "372aa14f44b73b05",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 540,
        "wires": [
            [
                "813d5749f4eb80d8"
            ]
        ]
    },
    {
        "id": "6219d7bfa69e948a",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "57c8383d91e99964",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 540,
        "wires": [
            [
                "372aa14f44b73b05"
            ],
            []
        ]
    },
    {
        "id": "f52ce9abc5e57202",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "0a6accbc9b6837a0",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 500,
        "wires": [
            [
                "5e81c188a9183ad0"
            ]
        ]
    },
    {
        "id": "d29a9ea02e05ca43",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B02,BLOCK-02,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 500,
        "wires": [
            [
                "0a6accbc9b6837a0"
            ]
        ]
    },
    {
        "id": "5e81c188a9183ad0",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 500,
        "wires": [
            [
                "f93e778d4763b644"
            ]
        ]
    },
    {
        "id": "f93e778d4763b644",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "5a3139e105a22d3a",
                "6219d7bfa69e948a"
            ]
        ]
    },
    {
        "id": "5a3139e105a22d3a",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2899",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 500,
        "wires": []
    },
    {
        "id": "04c70fa1c9d6f94b",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 660,
        "wires": [
            [
                "99cb434ed52796d1"
            ]
        ]
    },
    {
        "id": "44015bb56e0bd115",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 660,
        "wires": [
            [
                "62378297e94c1db3"
            ]
        ]
    },
    {
        "id": "fe775ac66d53ad23",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 660,
        "wires": [
            [
                "44015bb56e0bd115"
            ]
        ]
    },
    {
        "id": "48e14cea41a7d648",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 660,
        "wires": [
            [
                "fe775ac66d53ad23"
            ]
        ]
    },
    {
        "id": "afc7f94f1acf8ee0",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 660,
        "wires": [
            [
                "04c70fa1c9d6f94b"
            ]
        ]
    },
    {
        "id": "62378297e94c1db3",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "79f69b6014fd6a17",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 660,
        "wires": [
            [
                "afc7f94f1acf8ee0"
            ],
            []
        ]
    },
    {
        "id": "99cb434ed52796d1",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "9e3e1e29e3bdd53c",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 620,
        "wires": [
            [
                "b097868a065c9ada"
            ]
        ]
    },
    {
        "id": "9cf459c065c00d34",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B02,BLOCK-02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 620,
        "wires": [
            [
                "9e3e1e29e3bdd53c"
            ]
        ]
    },
    {
        "id": "b097868a065c9ada",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 620,
        "wires": [
            [
                "1eb602c977dc66b4"
            ]
        ]
    },
    {
        "id": "1eb602c977dc66b4",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 620,
        "wires": [
            [
                "686e4139fd6b95c0",
                "62378297e94c1db3"
            ]
        ]
    },
    {
        "id": "686e4139fd6b95c0",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2900",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 620,
        "wires": []
    },
    {
        "id": "d1026bad39c1b920",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 780,
        "wires": [
            [
                "14fd8a07c28a7d70"
            ]
        ]
    },
    {
        "id": "60c899aac5c9776f",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "9f92c870374f1bf8"
            ]
        ]
    },
    {
        "id": "20ae26af4a46d024",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 780,
        "wires": [
            [
                "60c899aac5c9776f"
            ]
        ]
    },
    {
        "id": "c5b52fcad2e78e39",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 780,
        "wires": [
            [
                "20ae26af4a46d024"
            ]
        ]
    },
    {
        "id": "42621eca9453e23a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 780,
        "wires": [
            [
                "d1026bad39c1b920"
            ]
        ]
    },
    {
        "id": "9f92c870374f1bf8",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "f16443249c4c8002",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 780,
        "wires": [
            [
                "42621eca9453e23a"
            ],
            []
        ]
    },
    {
        "id": "14fd8a07c28a7d70",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "38cdb27c4a8adb67",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 740,
        "wires": [
            [
                "fcf2dc73bb62e9bf"
            ]
        ]
    },
    {
        "id": "2dc062888e56ccf6",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B03,BLOCK-03,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 740,
        "wires": [
            [
                "38cdb27c4a8adb67"
            ]
        ]
    },
    {
        "id": "fcf2dc73bb62e9bf",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 740,
        "wires": [
            [
                "35574b8645a747c9"
            ]
        ]
    },
    {
        "id": "35574b8645a747c9",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 740,
        "wires": [
            [
                "1784a8364492a842",
                "9f92c870374f1bf8"
            ]
        ]
    },
    {
        "id": "1784a8364492a842",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2901",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 740,
        "wires": []
    },
    {
        "id": "86ece60d2f1858e3",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 900,
        "wires": [
            [
                "b9f5724d21ab2584"
            ]
        ]
    },
    {
        "id": "f75977533a3a859d",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 900,
        "wires": [
            [
                "87cb098d1726cfb6"
            ]
        ]
    },
    {
        "id": "28462f1732bc604e",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 900,
        "wires": [
            [
                "f75977533a3a859d"
            ]
        ]
    },
    {
        "id": "12fc2b1f411e16a2",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 900,
        "wires": [
            [
                "28462f1732bc604e"
            ]
        ]
    },
    {
        "id": "a6f88c5e9555fc4e",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 900,
        "wires": [
            [
                "86ece60d2f1858e3"
            ]
        ]
    },
    {
        "id": "87cb098d1726cfb6",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "42bb26a4fbcb1794",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 900,
        "wires": [
            [
                "a6f88c5e9555fc4e"
            ],
            []
        ]
    },
    {
        "id": "b9f5724d21ab2584",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "15666623ce488b28",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 860,
        "wires": [
            [
                "927a3e46a61af423"
            ]
        ]
    },
    {
        "id": "9505f4613033ad7d",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B03,BLOCK-03,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 860,
        "wires": [
            [
                "15666623ce488b28"
            ]
        ]
    },
    {
        "id": "927a3e46a61af423",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 860,
        "wires": [
            [
                "ccfb36b9286753c2"
            ]
        ]
    },
    {
        "id": "ccfb36b9286753c2",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 860,
        "wires": [
            [
                "58d7eb2d56e442e8",
                "87cb098d1726cfb6"
            ]
        ]
    },
    {
        "id": "58d7eb2d56e442e8",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2902",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 860,
        "wires": []
    },
    {
        "id": "283b56269e079f7b",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 1020,
        "wires": [
            [
                "d10fa42cd2073acf"
            ]
        ]
    },
    {
        "id": "b05f4dbef351d1be",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1020,
        "wires": [
            [
                "63f712c26c76c9f4"
            ]
        ]
    },
    {
        "id": "08f9acd5e3365c6a",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "b05f4dbef351d1be"
            ]
        ]
    },
    {
        "id": "9d2441c2afa1f308",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 1020,
        "wires": [
            [
                "08f9acd5e3365c6a"
            ]
        ]
    },
    {
        "id": "6646bdb5bea0d161",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1020,
        "wires": [
            [
                "283b56269e079f7b"
            ]
        ]
    },
    {
        "id": "63f712c26c76c9f4",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "6b5bddbd41be1ec2",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 1020,
        "wires": [
            [
                "6646bdb5bea0d161"
            ],
            []
        ]
    },
    {
        "id": "d10fa42cd2073acf",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "5f111ba476ab5df3",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 980,
        "wires": [
            [
                "ccaf1bd1223f4a2f"
            ]
        ]
    },
    {
        "id": "45488b892bf5e190",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B04,BLOCK-04,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 980,
        "wires": [
            [
                "5f111ba476ab5df3"
            ]
        ]
    },
    {
        "id": "ccaf1bd1223f4a2f",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 980,
        "wires": [
            [
                "f5dd2e9f3036bf58"
            ]
        ]
    },
    {
        "id": "f5dd2e9f3036bf58",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 980,
        "wires": [
            [
                "740ab5147c4c2c58",
                "63f712c26c76c9f4"
            ]
        ]
    },
    {
        "id": "740ab5147c4c2c58",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2903",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 980,
        "wires": []
    },
    {
        "id": "99f06db8bc670862",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 1140,
        "wires": [
            [
                "b13211a97ef1c7e1"
            ]
        ]
    },
    {
        "id": "0b56daf259223b3a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1140,
        "wires": [
            [
                "427b43c01ccf947c"
            ]
        ]
    },
    {
        "id": "c78d30742b725dab",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1140,
        "wires": [
            [
                "0b56daf259223b3a"
            ]
        ]
    },
    {
        "id": "1eb8332c71c17eea",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 1140,
        "wires": [
            [
                "c78d30742b725dab"
            ]
        ]
    },
    {
        "id": "4b15fc1b89b2eb7e",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1140,
        "wires": [
            [
                "99f06db8bc670862"
            ]
        ]
    },
    {
        "id": "427b43c01ccf947c",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "e9cc32156a5871dd",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 1140,
        "wires": [
            [
                "4b15fc1b89b2eb7e"
            ],
            []
        ]
    },
    {
        "id": "b13211a97ef1c7e1",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "c563c89fcbb4dadc",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1100,
        "wires": [
            [
                "c07095969db21091"
            ]
        ]
    },
    {
        "id": "b86f15f56992fea6",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B04,BLOCK-04,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "c563c89fcbb4dadc"
            ]
        ]
    },
    {
        "id": "c07095969db21091",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1100,
        "wires": [
            [
                "b9a4563a364d4ab5"
            ]
        ]
    },
    {
        "id": "b9a4563a364d4ab5",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1100,
        "wires": [
            [
                "186006708f6c8591",
                "427b43c01ccf947c"
            ]
        ]
    },
    {
        "id": "186006708f6c8591",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2904",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1100,
        "wires": []
    },
    {
        "id": "2c3af269ddc5ba37",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 1260,
        "wires": [
            [
                "baef2a376ea309e5"
            ]
        ]
    },
    {
        "id": "c6a46b6e0bbba341",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1260,
        "wires": [
            [
                "8335054dc9ab8f92"
            ]
        ]
    },
    {
        "id": "2f9651478f1d0062",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1260,
        "wires": [
            [
                "c6a46b6e0bbba341"
            ]
        ]
    },
    {
        "id": "a052a7b1b8360578",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 1260,
        "wires": [
            [
                "2f9651478f1d0062"
            ]
        ]
    },
    {
        "id": "a3eafbcd8e895dac",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1260,
        "wires": [
            [
                "2c3af269ddc5ba37"
            ]
        ]
    },
    {
        "id": "8335054dc9ab8f92",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "872d05c48f35d483",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 1260,
        "wires": [
            [
                "a3eafbcd8e895dac"
            ],
            []
        ]
    },
    {
        "id": "baef2a376ea309e5",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "c70595616f329f9a",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1220,
        "wires": [
            [
                "6afd9b46f65e459f"
            ]
        ]
    },
    {
        "id": "819b4975caaf9de2",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B05,BLOCK-05,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 1220,
        "wires": [
            [
                "c70595616f329f9a"
            ]
        ]
    },
    {
        "id": "6afd9b46f65e459f",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1220,
        "wires": [
            [
                "2bc5887685ebb591"
            ]
        ]
    },
    {
        "id": "2bc5887685ebb591",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1220,
        "wires": [
            [
                "86bf3d1d58a60a64",
                "8335054dc9ab8f92"
            ]
        ]
    },
    {
        "id": "86bf3d1d58a60a64",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2905",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1220,
        "wires": []
    },
    {
        "id": "c1baae196a74c7ef",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 1380,
        "wires": [
            [
                "1b414b0f11711b83",
                "d1216da520ee2573"
            ]
        ]
    },
    {
        "id": "f00fa873996a0408",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1380,
        "wires": [
            [
                "0fd6c9506d3b5387"
            ]
        ]
    },
    {
        "id": "bd815808863179bc",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1380,
        "wires": [
            [
                "f00fa873996a0408"
            ]
        ]
    },
    {
        "id": "b2e55e425afa2528",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 1380,
        "wires": [
            [
                "bd815808863179bc"
            ]
        ]
    },
    {
        "id": "b8360b7f49e07796",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1380,
        "wires": [
            [
                "c1baae196a74c7ef"
            ]
        ]
    },
    {
        "id": "0fd6c9506d3b5387",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "fb0c25e59737ed1e",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 1380,
        "wires": [
            [
                "b8360b7f49e07796"
            ],
            []
        ]
    },
    {
        "id": "1b414b0f11711b83",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "a23b6f22997f13d1",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1340,
        "wires": [
            [
                "e6a873f198259e50"
            ]
        ]
    },
    {
        "id": "ed4ab7f4f6ebdd88",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B05,BLOCK-05,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 1340,
        "wires": [
            [
                "a23b6f22997f13d1"
            ]
        ]
    },
    {
        "id": "e6a873f198259e50",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1340,
        "wires": [
            [
                "03c45c827033c6d5"
            ]
        ]
    },
    {
        "id": "03c45c827033c6d5",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1340,
        "wires": [
            [
                "71e89d05900feded",
                "0fd6c9506d3b5387"
            ]
        ]
    },
    {
        "id": "71e89d05900feded",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2906",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1340,
        "wires": []
    },
    {
        "id": "53b2aafe38f68074",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 1500,
        "wires": [
            [
                "3aae3730a672a95f"
            ]
        ]
    },
    {
        "id": "9efef40b80e3be0a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1500,
        "wires": [
            [
                "b4f33b55edfc405d"
            ]
        ]
    },
    {
        "id": "800b0a830a694e6e",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1500,
        "wires": [
            [
                "9efef40b80e3be0a"
            ]
        ]
    },
    {
        "id": "f3eb80a0afe95d23",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 1500,
        "wires": [
            [
                "800b0a830a694e6e"
            ]
        ]
    },
    {
        "id": "fb5bdd47fb139bce",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1500,
        "wires": [
            [
                "53b2aafe38f68074"
            ]
        ]
    },
    {
        "id": "b4f33b55edfc405d",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "b439c8fe75b63b15",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 1500,
        "wires": [
            [
                "fb5bdd47fb139bce"
            ],
            []
        ]
    },
    {
        "id": "3aae3730a672a95f",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "68199cfbe9503977",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1460,
        "wires": [
            [
                "c9fc591d1e04b870"
            ]
        ]
    },
    {
        "id": "c7dd03b239144594",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B06,BLOCK-06,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 1460,
        "wires": [
            [
                "68199cfbe9503977"
            ]
        ]
    },
    {
        "id": "c9fc591d1e04b870",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1460,
        "wires": [
            [
                "0207dbaedfe8636c"
            ]
        ]
    },
    {
        "id": "0207dbaedfe8636c",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1460,
        "wires": [
            [
                "c512fbb714f497d9",
                "b4f33b55edfc405d"
            ]
        ]
    },
    {
        "id": "c512fbb714f497d9",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2907",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f072b23c9da3ed31",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 1620,
        "wires": [
            [
                "22bcb63441055b4a"
            ]
        ]
    },
    {
        "id": "9048c02d97a86b46",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1620,
        "wires": [
            [
                "51b3c3d2f5cbeacf"
            ]
        ]
    },
    {
        "id": "43eaef8d8baf4a0c",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1620,
        "wires": [
            [
                "9048c02d97a86b46"
            ]
        ]
    },
    {
        "id": "f77719e24dea349b",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 650,
        "y": 1620,
        "wires": [
            [
                "43eaef8d8baf4a0c"
            ]
        ]
    },
    {
        "id": "65a6c0cd6ed4ea7b",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1620,
        "wires": [
            [
                "f072b23c9da3ed31"
            ]
        ]
    },
    {
        "id": "51b3c3d2f5cbeacf",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "54bbba41d90edcef",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 1620,
        "wires": [
            [
                "65a6c0cd6ed4ea7b"
            ],
            []
        ]
    },
    {
        "id": "22bcb63441055b4a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "1315d10cdccee05c",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "0ab16466b45ddadd"
            ]
        ]
    },
    {
        "id": "845eb1d8bb550073",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B06,BLOCK-06,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 650,
        "y": 1580,
        "wires": [
            [
                "1315d10cdccee05c"
            ]
        ]
    },
    {
        "id": "0ab16466b45ddadd",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1580,
        "wires": [
            [
                "403a7324694c7da3"
            ]
        ]
    },
    {
        "id": "403a7324694c7da3",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1580,
        "wires": [
            [
                "376bb2a117166c44",
                "51b3c3d2f5cbeacf"
            ]
        ]
    },
    {
        "id": "376bb2a117166c44",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2908",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1580,
        "wires": []
    },
    {
        "id": "770186eeb23d353d",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 320,
        "wires": [
            [
                "54e21602a8dfe94e"
            ]
        ]
    },
    {
        "id": "101b68cfbd733310",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 320,
        "wires": [
            [
                "a322da7d826d0245"
            ]
        ]
    },
    {
        "id": "46ef42341c24190a",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 320,
        "wires": [
            [
                "101b68cfbd733310"
            ]
        ]
    },
    {
        "id": "50dd8c0ba88cadea",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 320,
        "wires": [
            [
                "46ef42341c24190a"
            ]
        ]
    },
    {
        "id": "ced394d43fd6fe1a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 320,
        "wires": [
            [
                "770186eeb23d353d"
            ]
        ]
    },
    {
        "id": "a322da7d826d0245",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "d202e4d44872b18e",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 320,
        "wires": [
            [
                "ced394d43fd6fe1a"
            ],
            []
        ]
    },
    {
        "id": "54e21602a8dfe94e",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d72be6fcada4fda0",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 280,
        "wires": [
            [
                "dd48de3adbdb127b"
            ]
        ]
    },
    {
        "id": "acc61e396858505d",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B07,BLOCK-07,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 280,
        "wires": [
            [
                "d72be6fcada4fda0"
            ]
        ]
    },
    {
        "id": "dd48de3adbdb127b",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 280,
        "wires": [
            [
                "cff0b305fcaa655a"
            ]
        ]
    },
    {
        "id": "cff0b305fcaa655a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 280,
        "wires": [
            [
                "fb108d3ff0493f28",
                "a322da7d826d0245"
            ]
        ]
    },
    {
        "id": "fb108d3ff0493f28",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2909",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 280,
        "wires": []
    },
    {
        "id": "39817bb79ab467d6",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 440,
        "wires": [
            [
                "8d41c88692c95e29"
            ]
        ]
    },
    {
        "id": "5e2f6df839037954",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 440,
        "wires": [
            [
                "4ff9ba3c164bd1a1"
            ]
        ]
    },
    {
        "id": "17d333ddb75a4bee",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 440,
        "wires": [
            [
                "5e2f6df839037954"
            ]
        ]
    },
    {
        "id": "31a0148c9157e54c",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 440,
        "wires": [
            [
                "17d333ddb75a4bee"
            ]
        ]
    },
    {
        "id": "ab392637ea6530bf",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 440,
        "wires": [
            [
                "39817bb79ab467d6"
            ]
        ]
    },
    {
        "id": "4ff9ba3c164bd1a1",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "9813b51730cbbb6c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 440,
        "wires": [
            [
                "ab392637ea6530bf"
            ],
            []
        ]
    },
    {
        "id": "8d41c88692c95e29",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "019dd7c0de7fbc1c",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 400,
        "wires": [
            [
                "2e20da1a956ad929"
            ]
        ]
    },
    {
        "id": "cf2c8330c3423e07",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B07,BLOCK-07,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 400,
        "wires": [
            [
                "019dd7c0de7fbc1c"
            ]
        ]
    },
    {
        "id": "2e20da1a956ad929",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 400,
        "wires": [
            [
                "1c7aa15bdf8a9dfe"
            ]
        ]
    },
    {
        "id": "1c7aa15bdf8a9dfe",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 400,
        "wires": [
            [
                "a4d2ff1dd00da296",
                "4ff9ba3c164bd1a1"
            ]
        ]
    },
    {
        "id": "a4d2ff1dd00da296",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2910",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 400,
        "wires": []
    },
    {
        "id": "b6c3e57149fd8847",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 560,
        "wires": [
            [
                "9bf07be523d803d4"
            ]
        ]
    },
    {
        "id": "eaa1e7b88f0f1ea1",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 560,
        "wires": [
            [
                "733f0edc72b7d06b"
            ]
        ]
    },
    {
        "id": "9ce21ead542a4b03",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 560,
        "wires": [
            [
                "eaa1e7b88f0f1ea1"
            ]
        ]
    },
    {
        "id": "66846a702a1893d6",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 560,
        "wires": [
            [
                "9ce21ead542a4b03"
            ]
        ]
    },
    {
        "id": "70d11ed5c224d276",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 560,
        "wires": [
            [
                "b6c3e57149fd8847"
            ]
        ]
    },
    {
        "id": "733f0edc72b7d06b",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "8df78942fb583ec2",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 560,
        "wires": [
            [
                "70d11ed5c224d276"
            ],
            []
        ]
    },
    {
        "id": "9bf07be523d803d4",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "fa5ff6d7aa118bd4",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 520,
        "wires": [
            [
                "f8ef07a31337256e"
            ]
        ]
    },
    {
        "id": "f1a89f8a112d9a5b",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B08,BLOCK-08,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 520,
        "wires": [
            [
                "fa5ff6d7aa118bd4"
            ]
        ]
    },
    {
        "id": "f8ef07a31337256e",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 520,
        "wires": [
            [
                "ed47ad87c63a8147"
            ]
        ]
    },
    {
        "id": "ed47ad87c63a8147",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 520,
        "wires": [
            [
                "41777cf880704a57",
                "733f0edc72b7d06b"
            ]
        ]
    },
    {
        "id": "41777cf880704a57",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2911",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 520,
        "wires": []
    },
    {
        "id": "096187cec4fb4abb",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 680,
        "wires": [
            [
                "d5ab81bf14a18a40"
            ]
        ]
    },
    {
        "id": "3c8c0a6ff3d3e0fc",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 680,
        "wires": [
            [
                "a8127ba5fb2b4c92"
            ]
        ]
    },
    {
        "id": "9e58fce8ea77ce35",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 680,
        "wires": [
            [
                "3c8c0a6ff3d3e0fc"
            ]
        ]
    },
    {
        "id": "a70b530f14b2d5d3",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 680,
        "wires": [
            [
                "9e58fce8ea77ce35"
            ]
        ]
    },
    {
        "id": "913d31927c6fcec0",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 680,
        "wires": [
            [
                "096187cec4fb4abb"
            ]
        ]
    },
    {
        "id": "a8127ba5fb2b4c92",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "da1d213b41b74eb3",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 680,
        "wires": [
            [
                "913d31927c6fcec0"
            ],
            []
        ]
    },
    {
        "id": "d5ab81bf14a18a40",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c780e1a92fb67030",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 640,
        "wires": [
            [
                "ad03c6a22ec58f21"
            ]
        ]
    },
    {
        "id": "2473dbe6f74553e3",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B08,BLOCK-08,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 640,
        "wires": [
            [
                "c780e1a92fb67030"
            ]
        ]
    },
    {
        "id": "ad03c6a22ec58f21",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 640,
        "wires": [
            [
                "bab87f48735b0767"
            ]
        ]
    },
    {
        "id": "bab87f48735b0767",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 640,
        "wires": [
            [
                "a802b06934ee7c08",
                "a8127ba5fb2b4c92"
            ]
        ]
    },
    {
        "id": "a802b06934ee7c08",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2912",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 640,
        "wires": []
    },
    {
        "id": "2ceb5c227359c255",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 800,
        "wires": [
            [
                "af9aa845673460ca"
            ]
        ]
    },
    {
        "id": "acedc427e3346836",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 800,
        "wires": [
            [
                "dd393e6d94819751"
            ]
        ]
    },
    {
        "id": "c2cb5fe6eed3ada1",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 800,
        "wires": [
            [
                "acedc427e3346836"
            ]
        ]
    },
    {
        "id": "d69a04d469524abd",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 800,
        "wires": [
            [
                "c2cb5fe6eed3ada1"
            ]
        ]
    },
    {
        "id": "04d719096c3247bd",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 800,
        "wires": [
            [
                "2ceb5c227359c255"
            ]
        ]
    },
    {
        "id": "dd393e6d94819751",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "dc66902d439f9bde",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 800,
        "wires": [
            [
                "04d719096c3247bd"
            ],
            []
        ]
    },
    {
        "id": "af9aa845673460ca",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "334f122e5564dd23",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 760,
        "wires": [
            [
                "b816017cbc90bb05"
            ]
        ]
    },
    {
        "id": "145dae3ad09a962f",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B09,BLOCK-09,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 760,
        "wires": [
            [
                "334f122e5564dd23"
            ]
        ]
    },
    {
        "id": "b816017cbc90bb05",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 760,
        "wires": [
            [
                "06d0f618a65fea29"
            ]
        ]
    },
    {
        "id": "06d0f618a65fea29",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 760,
        "wires": [
            [
                "1caf73f8f3a290ba",
                "dd393e6d94819751"
            ]
        ]
    },
    {
        "id": "1caf73f8f3a290ba",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2913",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 760,
        "wires": []
    },
    {
        "id": "099f456a95cc2504",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 920,
        "wires": [
            [
                "d38da6084de6ed10"
            ]
        ]
    },
    {
        "id": "9890839a9c83739a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 920,
        "wires": [
            [
                "4391bbf039125e86"
            ]
        ]
    },
    {
        "id": "be1a54b78609dc09",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 920,
        "wires": [
            [
                "9890839a9c83739a"
            ]
        ]
    },
    {
        "id": "e348e0a2f398a4e8",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 920,
        "wires": [
            [
                "be1a54b78609dc09"
            ]
        ]
    },
    {
        "id": "4fe0f086329aaad1",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 920,
        "wires": [
            [
                "099f456a95cc2504"
            ]
        ]
    },
    {
        "id": "4391bbf039125e86",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "884a1807dcd162ee",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 920,
        "wires": [
            [
                "4fe0f086329aaad1"
            ],
            []
        ]
    },
    {
        "id": "d38da6084de6ed10",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "bf3f136fbed04668",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 880,
        "wires": [
            [
                "9e153c70bd1bf2f4"
            ]
        ]
    },
    {
        "id": "25910b7eae817af8",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B09,BLOCK-09,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 880,
        "wires": [
            [
                "bf3f136fbed04668"
            ]
        ]
    },
    {
        "id": "9e153c70bd1bf2f4",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 880,
        "wires": [
            [
                "94b12e8f5935a9d8"
            ]
        ]
    },
    {
        "id": "94b12e8f5935a9d8",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 880,
        "wires": [
            [
                "4ebbae0d7e29c19e",
                "4391bbf039125e86"
            ]
        ]
    },
    {
        "id": "4ebbae0d7e29c19e",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2914",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 880,
        "wires": []
    },
    {
        "id": "6482ddf00f84d63d",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 1040,
        "wires": [
            [
                "ecb8e361d5383dfe"
            ]
        ]
    },
    {
        "id": "f92e939129f5c549",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1040,
        "wires": [
            [
                "a088b9df1dfbea91"
            ]
        ]
    },
    {
        "id": "7595e7f756d3289d",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1040,
        "wires": [
            [
                "f92e939129f5c549"
            ]
        ]
    },
    {
        "id": "9fa987fd075a2459",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 1040,
        "wires": [
            [
                "7595e7f756d3289d"
            ]
        ]
    },
    {
        "id": "6635101f80bba11b",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1040,
        "wires": [
            [
                "6482ddf00f84d63d"
            ]
        ]
    },
    {
        "id": "a088b9df1dfbea91",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "fd1183019dfcbd7f",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 1040,
        "wires": [
            [
                "6635101f80bba11b"
            ],
            []
        ]
    },
    {
        "id": "ecb8e361d5383dfe",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "8f3c80f7a4ca55fc",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1000,
        "wires": [
            [
                "502b7d1a3670d715"
            ]
        ]
    },
    {
        "id": "6a450748dea515d6",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B10,BLOCK-10,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 1000,
        "wires": [
            [
                "8f3c80f7a4ca55fc"
            ]
        ]
    },
    {
        "id": "502b7d1a3670d715",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1000,
        "wires": [
            [
                "4fb0c408c74bdf83"
            ]
        ]
    },
    {
        "id": "4fb0c408c74bdf83",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 1000,
        "wires": [
            [
                "0b3f42a1ca17ec2b",
                "a088b9df1dfbea91"
            ]
        ]
    },
    {
        "id": "0b3f42a1ca17ec2b",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2915",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9c6df7a852d90ea7",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 1160,
        "wires": [
            [
                "2152d38b8ee58ea9"
            ]
        ]
    },
    {
        "id": "2f24e05baeb83562",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1160,
        "wires": [
            [
                "1f468650e854ed15"
            ]
        ]
    },
    {
        "id": "daf2c0bb6726a2ec",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1160,
        "wires": [
            [
                "2f24e05baeb83562"
            ]
        ]
    },
    {
        "id": "e5ce29ba38358705",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 1160,
        "wires": [
            [
                "daf2c0bb6726a2ec"
            ]
        ]
    },
    {
        "id": "d80beb478a241fe7",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1160,
        "wires": [
            [
                "9c6df7a852d90ea7"
            ]
        ]
    },
    {
        "id": "1f468650e854ed15",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "c3c193069afe56b1",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 1160,
        "wires": [
            [
                "d80beb478a241fe7"
            ],
            []
        ]
    },
    {
        "id": "2152d38b8ee58ea9",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "3997adf8e2f97bf6",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1120,
        "wires": [
            [
                "86859317557d15e7"
            ]
        ]
    },
    {
        "id": "7f332e3bac2f8597",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B10,BLOCK-10,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 1120,
        "wires": [
            [
                "3997adf8e2f97bf6"
            ]
        ]
    },
    {
        "id": "86859317557d15e7",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1120,
        "wires": [
            [
                "eb8c710126d67fb4"
            ]
        ]
    },
    {
        "id": "eb8c710126d67fb4",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 1120,
        "wires": [
            [
                "82684100281790ce"
            ]
        ]
    },
    {
        "id": "82684100281790ce",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2916",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c16b5d37c2e6def6",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 1280,
        "wires": [
            [
                "1ef7b5ecd1e134fc"
            ]
        ]
    },
    {
        "id": "5e1879c9d936482d",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1280,
        "wires": [
            [
                "09aeb2100873f78f"
            ]
        ]
    },
    {
        "id": "1d0f11670ef57873",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1280,
        "wires": [
            [
                "5e1879c9d936482d"
            ]
        ]
    },
    {
        "id": "fd4de7979a804631",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 1280,
        "wires": [
            [
                "1d0f11670ef57873"
            ]
        ]
    },
    {
        "id": "e3f1e0781cad7e25",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1280,
        "wires": [
            [
                "c16b5d37c2e6def6"
            ]
        ]
    },
    {
        "id": "09aeb2100873f78f",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "e7a510a3788f3e05",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 1280,
        "wires": [
            [
                "e3f1e0781cad7e25"
            ],
            []
        ]
    },
    {
        "id": "1ef7b5ecd1e134fc",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "96f7b8d27c1a3fae",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1240,
        "wires": [
            [
                "cb8cb81ee88de478"
            ]
        ]
    },
    {
        "id": "33677a376729becd",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B11,BLOCK-11,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 1240,
        "wires": [
            [
                "96f7b8d27c1a3fae"
            ]
        ]
    },
    {
        "id": "cb8cb81ee88de478",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1240,
        "wires": [
            [
                "e41aaf4a62eed468"
            ]
        ]
    },
    {
        "id": "e41aaf4a62eed468",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 1240,
        "wires": [
            [
                "d4988d7ae929c07b",
                "09aeb2100873f78f"
            ]
        ]
    },
    {
        "id": "d4988d7ae929c07b",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2917",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d375c34f66dbe34b",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 1400,
        "wires": [
            [
                "7ff01bf1a485b1b8"
            ]
        ]
    },
    {
        "id": "b4938a6a7a5993fe",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1400,
        "wires": [
            [
                "8e3ebcf95a0c104f"
            ]
        ]
    },
    {
        "id": "c1468b676eaf0be8",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1400,
        "wires": [
            [
                "b4938a6a7a5993fe"
            ]
        ]
    },
    {
        "id": "6fcfa9a6e918c541",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 1400,
        "wires": [
            [
                "c1468b676eaf0be8"
            ]
        ]
    },
    {
        "id": "a4545e90a929a6f0",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1400,
        "wires": [
            [
                "d375c34f66dbe34b"
            ]
        ]
    },
    {
        "id": "8e3ebcf95a0c104f",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "79d63d5de74e4496",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 1400,
        "wires": [
            [
                "a4545e90a929a6f0"
            ],
            []
        ]
    },
    {
        "id": "7ff01bf1a485b1b8",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "0c80f3233514f1d3",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1360,
        "wires": [
            [
                "e4dc365eecf5ec58"
            ]
        ]
    },
    {
        "id": "9a736cbd36532836",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B11,BLOCK-11,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 1360,
        "wires": [
            [
                "0c80f3233514f1d3"
            ]
        ]
    },
    {
        "id": "e4dc365eecf5ec58",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1360,
        "wires": [
            [
                "ee20c3fdeb67beb0"
            ]
        ]
    },
    {
        "id": "ee20c3fdeb67beb0",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 1360,
        "wires": [
            [
                "e3358a0732b62bcf",
                "8e3ebcf95a0c104f"
            ]
        ]
    },
    {
        "id": "e3358a0732b62bcf",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2918",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2e2284d5a05370c5",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 1520,
        "wires": [
            [
                "eeae28cf593bcb4e"
            ]
        ]
    },
    {
        "id": "e6fb6a0f1b93cea2",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1520,
        "wires": [
            [
                "2ae986242f1155e4"
            ]
        ]
    },
    {
        "id": "337a6b7eba09ec6d",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1520,
        "wires": [
            [
                "e6fb6a0f1b93cea2"
            ]
        ]
    },
    {
        "id": "7046e684efe68245",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 1520,
        "wires": [
            [
                "337a6b7eba09ec6d"
            ]
        ]
    },
    {
        "id": "254bdd27c097586f",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1520,
        "wires": [
            [
                "2e2284d5a05370c5"
            ]
        ]
    },
    {
        "id": "2ae986242f1155e4",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "a3ae684f142add51",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 1520,
        "wires": [
            [
                "254bdd27c097586f"
            ],
            []
        ]
    },
    {
        "id": "eeae28cf593bcb4e",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "3c766c7948d63e42",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1480,
        "wires": [
            [
                "3e5fa786063b897a"
            ]
        ]
    },
    {
        "id": "0ac6a0022f043d7f",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B12,BLOCK-12,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 1480,
        "wires": [
            [
                "3c766c7948d63e42"
            ]
        ]
    },
    {
        "id": "3e5fa786063b897a",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1480,
        "wires": [
            [
                "ba21023b252879d3"
            ]
        ]
    },
    {
        "id": "ba21023b252879d3",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 1480,
        "wires": [
            [
                "c09f1913187eb8e4",
                "2ae986242f1155e4"
            ]
        ]
    },
    {
        "id": "c09f1913187eb8e4",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2919",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c8fe84c8e1e54627",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 1640,
        "wires": [
            [
                "aead0e3903fdd487"
            ]
        ]
    },
    {
        "id": "987774196fbc5541",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1640,
        "wires": [
            [
                "f3f162452af26ad1"
            ]
        ]
    },
    {
        "id": "46ed4dddd44412c5",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1640,
        "wires": [
            [
                "987774196fbc5541"
            ]
        ]
    },
    {
        "id": "b9fbc55c36ccd518",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2090,
        "y": 1640,
        "wires": [
            [
                "46ed4dddd44412c5"
            ]
        ]
    },
    {
        "id": "c836c211bda4f83e",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1640,
        "wires": [
            [
                "c8fe84c8e1e54627"
            ]
        ]
    },
    {
        "id": "f3f162452af26ad1",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "f581abcc0f424bb5",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2580,
        "y": 1640,
        "wires": [
            [
                "c836c211bda4f83e"
            ],
            []
        ]
    },
    {
        "id": "aead0e3903fdd487",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "a38d9652ee13da4c",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2210,
        "y": 1600,
        "wires": [
            [
                "08e8ad230b4933fd"
            ]
        ]
    },
    {
        "id": "972ced0111d27a1d",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B12,BLOCK-12,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2090,
        "y": 1600,
        "wires": [
            [
                "a38d9652ee13da4c"
            ]
        ]
    },
    {
        "id": "08e8ad230b4933fd",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1600,
        "wires": [
            [
                "c793d7a38a6997c0"
            ]
        ]
    },
    {
        "id": "c793d7a38a6997c0",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 1600,
        "wires": [
            [
                "764d6cfb045ca4fa",
                "f3f162452af26ad1"
            ]
        ]
    },
    {
        "id": "764d6cfb045ca4fa",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2920",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 1600,
        "wires": []
    },
    {
        "id": "eae7b93d01c7a129",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 320,
        "wires": [
            [
                "0574993728df074d"
            ]
        ]
    },
    {
        "id": "1c0d3b0229dce14f",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 320,
        "wires": [
            [
                "95b966e8274d8a8d"
            ]
        ]
    },
    {
        "id": "5784d223bcb4ead2",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 320,
        "wires": [
            [
                "1c0d3b0229dce14f"
            ]
        ]
    },
    {
        "id": "6901f4b592611464",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 320,
        "wires": [
            [
                "5784d223bcb4ead2"
            ]
        ]
    },
    {
        "id": "8c88617b5f9d1e91",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 320,
        "wires": [
            [
                "eae7b93d01c7a129"
            ]
        ]
    },
    {
        "id": "95b966e8274d8a8d",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "ce4f361842afd98b",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 320,
        "wires": [
            [
                "8c88617b5f9d1e91"
            ],
            []
        ]
    },
    {
        "id": "0574993728df074d",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "92209ea68a3b6a92",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 280,
        "wires": [
            [
                "a4da7e0031b9b0b5"
            ]
        ]
    },
    {
        "id": "03dae02c0d5170ad",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B13,BLOCK-13,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 280,
        "wires": [
            [
                "92209ea68a3b6a92"
            ]
        ]
    },
    {
        "id": "a4da7e0031b9b0b5",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 280,
        "wires": [
            [
                "4370139c57199b2c"
            ]
        ]
    },
    {
        "id": "4370139c57199b2c",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 280,
        "wires": [
            [
                "f979b2bf7e577745",
                "95b966e8274d8a8d"
            ]
        ]
    },
    {
        "id": "f979b2bf7e577745",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2921",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 280,
        "wires": []
    },
    {
        "id": "3e3a855837b8aef8",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 440,
        "wires": [
            [
                "6e3d2385cfbfc07c"
            ]
        ]
    },
    {
        "id": "dee513d237154203",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 440,
        "wires": [
            [
                "d06b906cb84dd31d"
            ]
        ]
    },
    {
        "id": "f3d7cd6d6381841e",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 440,
        "wires": [
            [
                "dee513d237154203"
            ]
        ]
    },
    {
        "id": "d17fef8ae9ca5f05",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 440,
        "wires": [
            [
                "f3d7cd6d6381841e"
            ]
        ]
    },
    {
        "id": "02c2fdda07d4330d",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 440,
        "wires": [
            [
                "3e3a855837b8aef8"
            ]
        ]
    },
    {
        "id": "d06b906cb84dd31d",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "4ba467fa3add6b53",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 440,
        "wires": [
            [
                "02c2fdda07d4330d"
            ],
            []
        ]
    },
    {
        "id": "6e3d2385cfbfc07c",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "cd07ed04daea2b62",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 400,
        "wires": [
            [
                "68b80fb69f1106b8"
            ]
        ]
    },
    {
        "id": "f590dce75e31459f",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B13,BLOCK-13,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 400,
        "wires": [
            [
                "cd07ed04daea2b62"
            ]
        ]
    },
    {
        "id": "68b80fb69f1106b8",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 400,
        "wires": [
            [
                "314ce5cd179ec131"
            ]
        ]
    },
    {
        "id": "314ce5cd179ec131",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 400,
        "wires": [
            [
                "32729d8ea261cc68",
                "d06b906cb84dd31d"
            ]
        ]
    },
    {
        "id": "32729d8ea261cc68",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2922",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 400,
        "wires": []
    },
    {
        "id": "832a81c97044d60d",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 560,
        "wires": [
            [
                "c540b575b19fedce"
            ]
        ]
    },
    {
        "id": "96cecf84d77757d5",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 560,
        "wires": [
            [
                "fa0a354635f0bc6d"
            ]
        ]
    },
    {
        "id": "35c07a2973d5bd31",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 560,
        "wires": [
            [
                "96cecf84d77757d5"
            ]
        ]
    },
    {
        "id": "dc407223ef396d2d",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 560,
        "wires": [
            [
                "35c07a2973d5bd31"
            ]
        ]
    },
    {
        "id": "6b548146bf395082",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 560,
        "wires": [
            [
                "832a81c97044d60d"
            ]
        ]
    },
    {
        "id": "fa0a354635f0bc6d",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "54fedac1c2768075",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 560,
        "wires": [
            [
                "6b548146bf395082"
            ],
            []
        ]
    },
    {
        "id": "c540b575b19fedce",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4fdc7a729ddf1ea5",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 520,
        "wires": [
            [
                "31a8f6673ab77936"
            ]
        ]
    },
    {
        "id": "c36a85b40298165d",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B14,BLOCK-14,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 520,
        "wires": [
            [
                "4fdc7a729ddf1ea5"
            ]
        ]
    },
    {
        "id": "31a8f6673ab77936",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 520,
        "wires": [
            [
                "f75079422b23cba7"
            ]
        ]
    },
    {
        "id": "f75079422b23cba7",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 520,
        "wires": [
            [
                "0ba35cf2d281705c",
                "fa0a354635f0bc6d"
            ]
        ]
    },
    {
        "id": "0ba35cf2d281705c",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2923",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 520,
        "wires": []
    },
    {
        "id": "10b17a1c76b7a01e",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 680,
        "wires": [
            [
                "b268bc2b5e199b93"
            ]
        ]
    },
    {
        "id": "6edab661de00343b",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 680,
        "wires": [
            [
                "be5ae69e2758422c"
            ]
        ]
    },
    {
        "id": "3a33a04998cf795b",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 680,
        "wires": [
            [
                "6edab661de00343b"
            ]
        ]
    },
    {
        "id": "94d2ce4b568973b4",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 680,
        "wires": [
            [
                "3a33a04998cf795b"
            ]
        ]
    },
    {
        "id": "ee59d4b38ccc8a8f",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 680,
        "wires": [
            [
                "10b17a1c76b7a01e"
            ]
        ]
    },
    {
        "id": "be5ae69e2758422c",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "fef2313b418f8684",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 680,
        "wires": [
            [
                "ee59d4b38ccc8a8f"
            ],
            []
        ]
    },
    {
        "id": "b268bc2b5e199b93",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1fa4a59f23a2679e",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 640,
        "wires": [
            [
                "f3834726e6ebe981"
            ]
        ]
    },
    {
        "id": "d4a0d7e8f68060aa",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B14,BLOCK-14,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 640,
        "wires": [
            [
                "1fa4a59f23a2679e"
            ]
        ]
    },
    {
        "id": "f3834726e6ebe981",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 640,
        "wires": [
            [
                "fd8a9f8af0376c77"
            ]
        ]
    },
    {
        "id": "fd8a9f8af0376c77",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 640,
        "wires": [
            [
                "62c54505de7380db",
                "be5ae69e2758422c"
            ]
        ]
    },
    {
        "id": "62c54505de7380db",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2924",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 640,
        "wires": []
    },
    {
        "id": "232d93d712edc13e",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 800,
        "wires": [
            [
                "e9f2ef5bcab77aa1"
            ]
        ]
    },
    {
        "id": "cb39e188c1a12dd4",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 800,
        "wires": [
            [
                "426036b71410a9a8"
            ]
        ]
    },
    {
        "id": "d2fda94d0c817e53",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 800,
        "wires": [
            [
                "cb39e188c1a12dd4"
            ]
        ]
    },
    {
        "id": "60ddc5dadf735873",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 800,
        "wires": [
            [
                "d2fda94d0c817e53"
            ]
        ]
    },
    {
        "id": "4776ce102ff64a4c",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 800,
        "wires": [
            [
                "232d93d712edc13e"
            ]
        ]
    },
    {
        "id": "426036b71410a9a8",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "be8bf2523f9c1ed3",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 800,
        "wires": [
            [
                "4776ce102ff64a4c"
            ],
            []
        ]
    },
    {
        "id": "e9f2ef5bcab77aa1",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "b706429b8935f0fc",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 760,
        "wires": [
            [
                "7dc1c00bb16b82df"
            ]
        ]
    },
    {
        "id": "3a32a6698fef0ff0",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B15,BLOCK-15,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 760,
        "wires": [
            [
                "b706429b8935f0fc"
            ]
        ]
    },
    {
        "id": "7dc1c00bb16b82df",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 760,
        "wires": [
            [
                "38f08b28019d8843"
            ]
        ]
    },
    {
        "id": "38f08b28019d8843",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 760,
        "wires": [
            [
                "9188894919a928c1",
                "426036b71410a9a8"
            ]
        ]
    },
    {
        "id": "9188894919a928c1",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2925",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 760,
        "wires": []
    },
    {
        "id": "ca2b1f6108817be2",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 920,
        "wires": [
            [
                "026ce37856eabc60"
            ]
        ]
    },
    {
        "id": "0560cad164781b5f",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 920,
        "wires": [
            [
                "a5ba458dec87980c"
            ]
        ]
    },
    {
        "id": "1bf7d5837778ace9",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 920,
        "wires": [
            [
                "0560cad164781b5f"
            ]
        ]
    },
    {
        "id": "37a4f10c6647c7f5",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 920,
        "wires": [
            [
                "1bf7d5837778ace9"
            ]
        ]
    },
    {
        "id": "97b3d27e027056d1",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 920,
        "wires": [
            [
                "ca2b1f6108817be2"
            ]
        ]
    },
    {
        "id": "a5ba458dec87980c",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "a7283a13a922f1e3",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 920,
        "wires": [
            [
                "97b3d27e027056d1"
            ],
            []
        ]
    },
    {
        "id": "026ce37856eabc60",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "43bda8c170ea259e",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 880,
        "wires": [
            [
                "0dfd120817fc42f6"
            ]
        ]
    },
    {
        "id": "f43b7983439965bc",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B15,BLOCK-15,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 880,
        "wires": [
            [
                "43bda8c170ea259e"
            ]
        ]
    },
    {
        "id": "0dfd120817fc42f6",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 880,
        "wires": [
            [
                "3b8d74dbb5ce2dee"
            ]
        ]
    },
    {
        "id": "3b8d74dbb5ce2dee",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 880,
        "wires": [
            [
                "fb96e06732a6a449",
                "a5ba458dec87980c"
            ]
        ]
    },
    {
        "id": "fb96e06732a6a449",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2926",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 880,
        "wires": []
    },
    {
        "id": "ca43c39804994cac",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 1040,
        "wires": [
            [
                "72c0a18797ea7318"
            ]
        ]
    },
    {
        "id": "8f35b996ffc2f827",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1040,
        "wires": [
            [
                "766de49beebb24fe"
            ]
        ]
    },
    {
        "id": "e45fd75878de4008",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1040,
        "wires": [
            [
                "8f35b996ffc2f827"
            ]
        ]
    },
    {
        "id": "359eb23df6e62067",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 1040,
        "wires": [
            [
                "e45fd75878de4008"
            ]
        ]
    },
    {
        "id": "7f3325f89426d321",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 1040,
        "wires": [
            [
                "ca43c39804994cac"
            ]
        ]
    },
    {
        "id": "766de49beebb24fe",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "8db3c6b6cf594fda",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 1040,
        "wires": [
            [
                "7f3325f89426d321"
            ],
            []
        ]
    },
    {
        "id": "72c0a18797ea7318",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "6431f98b92e7e244",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1000,
        "wires": [
            [
                "9f2d2df5ad296211"
            ]
        ]
    },
    {
        "id": "ab85923f451c86bd",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B16,BLOCK-16,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 1000,
        "wires": [
            [
                "6431f98b92e7e244"
            ]
        ]
    },
    {
        "id": "9f2d2df5ad296211",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1000,
        "wires": [
            [
                "2ae92adb81becc0a"
            ]
        ]
    },
    {
        "id": "2ae92adb81becc0a",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1000,
        "wires": [
            [
                "b9a298402c234481",
                "766de49beebb24fe"
            ]
        ]
    },
    {
        "id": "b9a298402c234481",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2927",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d56ad3265cc65e3b",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 1160,
        "wires": [
            [
                "d79770c35849ebca"
            ]
        ]
    },
    {
        "id": "8c64a3a81795dcdd",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1160,
        "wires": [
            [
                "f9239f6982a65c4b"
            ]
        ]
    },
    {
        "id": "0fe663df83b07494",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1160,
        "wires": [
            [
                "8c64a3a81795dcdd"
            ]
        ]
    },
    {
        "id": "98f945d1cc127f95",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 1160,
        "wires": [
            [
                "0fe663df83b07494"
            ]
        ]
    },
    {
        "id": "fb42b8e073668df9",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 1160,
        "wires": [
            [
                "d56ad3265cc65e3b"
            ]
        ]
    },
    {
        "id": "f9239f6982a65c4b",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "0be93415b1310d35",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 1160,
        "wires": [
            [
                "fb42b8e073668df9"
            ],
            []
        ]
    },
    {
        "id": "d79770c35849ebca",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "e7f654ae1318adc8",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1120,
        "wires": [
            [
                "031029f4a35deaec"
            ]
        ]
    },
    {
        "id": "a9124dc479c4a6ad",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B16,BLOCK-16,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 1120,
        "wires": [
            [
                "e7f654ae1318adc8"
            ]
        ]
    },
    {
        "id": "031029f4a35deaec",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1120,
        "wires": [
            [
                "b7e916ac0b42d24e"
            ]
        ]
    },
    {
        "id": "b7e916ac0b42d24e",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1120,
        "wires": [
            [
                "1a5eda716147d458",
                "f9239f6982a65c4b"
            ]
        ]
    },
    {
        "id": "1a5eda716147d458",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2928",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 1120,
        "wires": []
    },
    {
        "id": "e887a51b1399647c",
        "type": "join",
        "z": "193b454093f4eff3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 1280,
        "wires": [
            [
                "077bc257548e2b35"
            ]
        ]
    },
    {
        "id": "0aba297a424b6036",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1280,
        "wires": [
            [
                "0b92f43dd0a9c0a4"
            ]
        ]
    },
    {
        "id": "c89b5e37eea6d08a",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1280,
        "wires": [
            [
                "0aba297a424b6036"
            ]
        ]
    },
    {
        "id": "ae328e8415659cea",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 1280,
        "wires": [
            [
                "c89b5e37eea6d08a"
            ]
        ]
    },
    {
        "id": "6e3d7ae180079c4d",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 1280,
        "wires": [
            [
                "e887a51b1399647c"
            ]
        ]
    },
    {
        "id": "0b92f43dd0a9c0a4",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "2becd8e444a5bb80",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 1280,
        "wires": [
            [
                "6e3d7ae180079c4d"
            ],
            []
        ]
    },
    {
        "id": "077bc257548e2b35",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "e74afe1cbd8bbf73",
        "type": "csv",
        "z": "193b454093f4eff3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1240,
        "wires": [
            [
                "74881e4b126253e0"
            ]
        ]
    },
    {
        "id": "2f0f372d70a7bd1e",
        "type": "template",
        "z": "193b454093f4eff3",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B17,BLOCK-17,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 1240,
        "wires": [
            [
                "e74afe1cbd8bbf73"
            ]
        ]
    },
    {
        "id": "74881e4b126253e0",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1240,
        "wires": [
            [
                "18304d561a3db51d"
            ]
        ]
    },
    {
        "id": "18304d561a3db51d",
        "type": "function",
        "z": "193b454093f4eff3",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1240,
        "wires": [
            [
                "fc1595695349713d",
                "0b92f43dd0a9c0a4"
            ]
        ]
    },
    {
        "id": "fc1595695349713d",
        "type": "debug",
        "z": "193b454093f4eff3",
        "name": "debug 2929",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 1240,
        "wires": []
    },
    {
        "id": "ffd052c7e1a92444",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 1400,
        "wires": [
            [
                "6c047ad1c337402a"
            ]
        ]
    },
    {
        "id": "ef7c75a18745e853",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1400,
        "wires": [
            [
                "4c37e4c59f18a45b"
            ]
        ]
    },
    {
        "id": "d1b625089940de1e",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1400,
        "wires": [
            [
                "ef7c75a18745e853"
            ]
        ]
    },
    {
        "id": "81d328921df92f9f",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 1400,
        "wires": [
            [
                "d1b625089940de1e"
            ]
        ]
    },
    {
        "id": "48fe9a2335f3a8fc",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 1400,
        "wires": [
            [
                "ffd052c7e1a92444"
            ]
        ]
    },
    {
        "id": "4c37e4c59f18a45b",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "55f6f9611d82a845",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 1400,
        "wires": [
            [
                "48fe9a2335f3a8fc"
            ],
            []
        ]
    },
    {
        "id": "6c047ad1c337402a",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "9da32aa7919fb7f9",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1360,
        "wires": [
            [
                "578dd6bf36f54b66"
            ]
        ]
    },
    {
        "id": "f67869d89768f46a",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B17,BLOCK-17,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 1360,
        "wires": [
            [
                "9da32aa7919fb7f9"
            ]
        ]
    },
    {
        "id": "578dd6bf36f54b66",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1360,
        "wires": [
            [
                "ec212540af0d57b1"
            ]
        ]
    },
    {
        "id": "ec212540af0d57b1",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1360,
        "wires": [
            [
                "faa3fc1fd4dc8025",
                "4c37e4c59f18a45b"
            ]
        ]
    },
    {
        "id": "faa3fc1fd4dc8025",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2930",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4c3e98cb57120abb",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 1520,
        "wires": [
            [
                "3d9bb3eb8342ebfa"
            ]
        ]
    },
    {
        "id": "36dfa22d61c54438",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1520,
        "wires": [
            [
                "97b25e463d5da676"
            ]
        ]
    },
    {
        "id": "5a802b52baf9dc03",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1520,
        "wires": [
            [
                "36dfa22d61c54438"
            ]
        ]
    },
    {
        "id": "8b43f65d31addb03",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 1520,
        "wires": [
            [
                "5a802b52baf9dc03"
            ]
        ]
    },
    {
        "id": "ec95c2c694ae49c4",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 1520,
        "wires": [
            [
                "4c3e98cb57120abb"
            ]
        ]
    },
    {
        "id": "97b25e463d5da676",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "57ad9ac3b8300c1e",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 1520,
        "wires": [
            [
                "ec95c2c694ae49c4"
            ],
            []
        ]
    },
    {
        "id": "3d9bb3eb8342ebfa",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "bb757b2f5993abc1",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1480,
        "wires": [
            [
                "09ea061d4c2356e6"
            ]
        ]
    },
    {
        "id": "33d31571868a6ff2",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B20,BLOCK-20,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 1480,
        "wires": [
            [
                "bb757b2f5993abc1"
            ]
        ]
    },
    {
        "id": "09ea061d4c2356e6",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1480,
        "wires": [
            [
                "a115c39eaaae67a4"
            ]
        ]
    },
    {
        "id": "a115c39eaaae67a4",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1480,
        "wires": [
            [
                "6c40c55be128b239",
                "97b25e463d5da676"
            ]
        ]
    },
    {
        "id": "6c40c55be128b239",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2931",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 1480,
        "wires": []
    },
    {
        "id": "b30e9f5b14c57531",
        "type": "join",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4390,
        "y": 1640,
        "wires": [
            [
                "4088ba98e1e8e410"
            ]
        ]
    },
    {
        "id": "5ece1492f9f15388",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 1640,
        "wires": [
            [
                "f22f1e52c389769f"
            ]
        ]
    },
    {
        "id": "08255cb9d645828d",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1640,
        "wires": [
            [
                "5ece1492f9f15388"
            ]
        ]
    },
    {
        "id": "b64b76aa6c58fbc2",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3570,
        "y": 1640,
        "wires": [
            [
                "08255cb9d645828d"
            ]
        ]
    },
    {
        "id": "e5621eecc5931614",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 1640,
        "wires": [
            [
                "b30e9f5b14c57531"
            ]
        ]
    },
    {
        "id": "f22f1e52c389769f",
        "type": "Main-Modbus-Read-Write",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "d457fcf2bcedc465",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4060,
        "y": 1640,
        "wires": [
            [
                "e5621eecc5931614"
            ],
            []
        ]
    },
    {
        "id": "4088ba98e1e8e410",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "7c6bb760a8c9d847",
        "type": "csv",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 3690,
        "y": 1600,
        "wires": [
            [
                "e3507f13301127a3"
            ]
        ]
    },
    {
        "id": "14bb6233f9c78cac",
        "type": "template",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B20,BLOCK-20,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3570,
        "y": 1600,
        "wires": [
            [
                "7c6bb760a8c9d847"
            ]
        ]
    },
    {
        "id": "e3507f13301127a3",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1600,
        "wires": [
            [
                "d184e69d72ebb7f5"
            ]
        ]
    },
    {
        "id": "d184e69d72ebb7f5",
        "type": "function",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1600,
        "wires": [
            [
                "bfbc9e183ea32706",
                "f22f1e52c389769f"
            ]
        ]
    },
    {
        "id": "bfbc9e183ea32706",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 2932",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4200,
        "y": 1600,
        "wires": []
    },
    {
        "id": "1e74a7f3729e4a59",
        "type": "interval",
        "z": "193b454093f4eff3",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 230,
        "y": 940,
        "wires": [
            [
                "6c2a17fa354583e1"
            ]
        ]
    },
    {
        "id": "05fc4e84ca15cb15",
        "type": "interval",
        "z": "193b454093f4eff3",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 1770,
        "y": 960,
        "wires": [
            [
                "1261a1d9aa2b3b31"
            ]
        ]
    },
    {
        "id": "0a553794ea218b79",
        "type": "interval",
        "z": "193b454093f4eff3",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 3270,
        "y": 1020,
        "wires": [
            [
                "f1ad26030c9a4cdb"
            ]
        ]
    },
    {
        "id": "d1216da520ee2573",
        "type": "debug",
        "z": "193b454093f4eff3",
        "d": true,
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1a8ae1edc8a93637",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "PAC SDF",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.INV01.PAC+B01.INV02.PAC+B02.INV01.PAC+B02.INV02.PAC+B03.INV01.PAC+B03.INV02.PAC+B04.INV01.PAC+B04.INV02.PAC+B05.INV01.PAC+B05.INV02.PAC+B06.INV01.PAC+B06.INV02.PAC+B07.INV01.PAC+B07.INV02.PAC+B08.INV01.PAC+B08.INV02.PAC+B09.INV01.PAC+B09.INV02.PAC+B10.INV01.PAC+B10.INV02.PAC+B11.INV01.PAC+B11.INV02.PAC+B12.INV01.PAC+B12.INV02.PAC+B13.INV01.PAC+B13.INV02.PAC+B14.INV01.PAC+B14.INV02.PAC+B15.INV01.PAC+B15.INV02.PAC+B16.INV01.PAC+B16.INV02.PAC+B17.INV01.PAC+B17.INV02.PAC+B20.INV01.PAC+B20.INV02.PAC,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,PAC,PAC,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 300,
        "y": 180,
        "wires": [
            [
                "b8c9e6031779fd8b"
            ]
        ]
    },
    {
        "id": "d7aa89b49317d879",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.INV01.QAC+B01.INV02.QAC+B02.INV01.QAC+B02.INV02.QAC+B03.INV01.QAC+B03.INV02.QAC+B04.INV01.QAC+B04.INV02.QAC+B05.INV01.QAC+B05.INV02.QAC+B06.INV01.QAC+B06.INV02.QAC+B07.INV01.QAC+B07.INV02.QAC+B08.INV01.QAC+B08.INV02.QAC+B09.INV01.QAC+B09.INV02.QAC+B10.INV01.QAC+B10.INV02.QAC+B11.INV01.QAC+B11.INV02.QAC+B12.INV01.QAC+B12.INV02.QAC+B13.INV01.QAC+B13.INV02.QAC+B14.INV01.QAC+B14.INV02.QAC+B15.INV01.QAC+B15.INV02.QAC+B16.INV01.QAC+B16.INV02.QAC+B17.INV01.QAC+B17.INV02.QAC+B20.INV01.QAC+B20.INV02.QAC,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,QAC,QAC,Server8782,8782,1,Truboard,0,,MVAr,1",
        "output": "str",
        "x": 300,
        "y": 220,
        "wires": [
            [
                "9e7ec77d5b606af2"
            ]
        ]
    },
    {
        "id": "bf9a7b5b73aaf1ab",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "PF SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.INV01.PF+B01.INV02.PF+B01.INV03.PF+B01.INV04.PF+B02.INV01.PF+B02.INV02.PF+B02.INV03.PF+B02.INV04.PF+B03.INV01.PF+B03.INV02.PF+B03.INV03.PF+B03.INV04.PF+B04.INV01.PF+B04.INV02.PF+B04.INV03.PF+B04.INV04.PF+B05.INV01.PF+B05.INV02.PF+B05.INV03.PF+B05.INV04.PF,AVG,B01,B01_VR_INV,VR_INV,VR_INV,INV,PF,PF,Server9382,9382,1,TATA_AP_70MW,0,,MW,1",
        "output": "str",
        "x": 300,
        "y": 260,
        "wires": [
            [
                "61136f2aef893d59"
            ]
        ]
    },
    {
        "id": "98701ea5e6a4cb5e",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "OLD PAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.INV01.OLD_PAC_LIMIT+B01.INV02.OLD_PAC_LIMIT+B02.INV01.OLD_PAC_LIMIT+B02.INV02.OLD_PAC_LIMIT+B03.INV01.OLD_PAC_LIMIT+B03.INV02.OLD_PAC_LIMIT+B04.INV01.OLD_PAC_LIMIT+B04.INV02.OLD_PAC_LIMIT+B05.INV01.OLD_PAC_LIMIT+B05.INV02.OLD_PAC_LIMIT+B06.INV01.OLD_PAC_LIMIT+B06.INV02.OLD_PAC_LIMIT+B07.INV01.OLD_PAC_LIMIT+B07.INV02.OLD_PAC_LIMIT+B08.INV01.OLD_PAC_LIMIT+B08.INV02.OLD_PAC_LIMIT+B09.INV01.OLD_PAC_LIMIT+B09.INV02.OLD_PAC_LIMIT+B10.INV01.OLD_PAC_LIMIT+B10.INV02.OLD_PAC_LIMIT+B11.INV01.OLD_PAC_LIMIT+B11.INV02.OLD_PAC_LIMIT+B12.INV01.OLD_PAC_LIMIT+B12.INV02.OLD_PAC_LIMIT+B13.INV01.OLD_PAC_LIMIT+B13.INV02.OLD_PAC_LIMIT+B14.INV01.OLD_PAC_LIMIT+B14.INV02.OLD_PAC_LIMIT+B15.INV01.OLD_PAC_LIMIT+B15.INV02.OLD_PAC_LIMIT+B16.INV01.OLD_PAC_LIMIT+B16.INV02.OLD_PAC_LIMIT+B17.INV01.OLD_PAC_LIMIT+B17.INV02.OLD_PAC_LIMIT+B20.INV01.OLD_PAC_LIMIT+B20.INV02.OLD_PAC_LIMIT,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 320,
        "y": 300,
        "wires": [
            [
                "74b42b21ee38b3c4"
            ]
        ]
    },
    {
        "id": "96cb7fcaf0ee8a7e",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "OLD QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.INV01.OLD_QAC_LIMIT+B01.INV02.OLD_QAC_LIMIT+B02.INV01.OLD_QAC_LIMIT+B02.INV02.OLD_QAC_LIMIT+B03.INV01.OLD_QAC_LIMIT+B03.INV02.OLD_QAC_LIMIT+B04.INV01.OLD_QAC_LIMIT+B04.INV02.OLD_QAC_LIMIT+B05.INV01.OLD_QAC_LIMIT+B05.INV02.OLD_QAC_LIMIT+B06.INV01.OLD_QAC_LIMIT+B06.INV02.OLD_QAC_LIMIT+B07.INV01.OLD_QAC_LIMIT+B07.INV02.OLD_QAC_LIMIT+B08.INV01.OLD_QAC_LIMIT+B08.INV02.OLD_QAC_LIMIT+B09.INV01.OLD_QAC_LIMIT+B09.INV02.OLD_QAC_LIMIT+B10.INV01.OLD_QAC_LIMIT+B10.INV02.OLD_QAC_LIMIT+B11.INV01.OLD_QAC_LIMIT+B11.INV02.OLD_QAC_LIMIT+B12.INV01.OLD_QAC_LIMIT+B12.INV02.OLD_QAC_LIMIT+B13.INV01.OLD_QAC_LIMIT+B13.INV02.OLD_QAC_LIMIT+B14.INV01.OLD_QAC_LIMIT+B14.INV02.OLD_QAC_LIMIT+B15.INV01.OLD_QAC_LIMIT+B15.INV02.OLD_QAC_LIMIT+B16.INV01.OLD_QAC_LIMIT+B16.INV02.OLD_QAC_LIMIT+B17.INV01.OLD_QAC_LIMIT+B17.INV02.OLD_QAC_LIMIT+B20.INV01.OLD_QAC_LIMIT+B20.INV02.OLD_QAC_LIMIT,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 320,
        "y": 340,
        "wires": [
            [
                "e870e6966bd60dfa"
            ]
        ]
    },
    {
        "id": "8e410fc0ee233d45",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "OLD_QAC_REF_SEL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.INV01.OLD_QAC_REF_SEL+B01.INV02.OLD_QAC_REF_SEL+B02.INV01.OLD_QAC_REF_SEL+B02.INV02.OLD_QAC_REF_SEL+B03.INV01.OLD_QAC_REF_SEL+B03.INV02.OLD_QAC_REF_SEL+B04.INV01.OLD_QAC_REF_SEL+B04.INV02.OLD_QAC_REF_SEL+B05.INV01.OLD_QAC_REF_SEL+B05.INV02.OLD_QAC_REF_SEL+B06.INV01.OLD_QAC_REF_SEL+B06.INV02.OLD_QAC_REF_SEL+B07.INV01.OLD_QAC_REF_SEL+B07.INV02.OLD_QAC_REF_SEL+B08.INV01.OLD_QAC_REF_SEL+B08.INV02.OLD_QAC_REF_SEL+B09.INV01.OLD_QAC_REF_SEL+B09.INV02.OLD_QAC_REF_SEL+B10.INV01.OLD_QAC_REF_SEL+B10.INV02.OLD_QAC_REF_SEL+B11.INV01.OLD_QAC_REF_SEL+B11.INV02.OLD_QAC_REF_SEL+B12.INV01.OLD_QAC_REF_SEL+B12.INV02.OLD_QAC_REF_SEL+B13.INV01.OLD_QAC_REF_SEL+B13.INV02.OLD_QAC_REF_SEL+B14.INV01.OLD_QAC_REF_SEL+B14.INV02.OLD_QAC_REF_SEL+B15.INV01.OLD_QAC_REF_SEL+B15.INV02.OLD_QAC_REF_SEL+B16.INV01.OLD_QAC_REF_SEL+B16.INV02.OLD_QAC_REF_SEL+B17.INV01.OLD_QAC_REF_SEL+B17.INV02.OLD_QAC_REF_SEL+B20.INV01.OLD_QAC_REF_SEL+B20.INV02.OLD_QAC_REF_SEL,AVG,B01,B01_VR_INV,VR_INV,VR_INV,INV,OLD_QAC_REF_SEL,OLD_QAC_REF_SEL,Server9382,9382,1,TATA_AP_70MW,0,,MW,1",
        "output": "str",
        "x": 340,
        "y": 380,
        "wires": [
            [
                "86a6212865d2ec53"
            ]
        ]
    },
    {
        "id": "b8c9e6031779fd8b",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "054652b05be51bf3"
            ]
        ]
    },
    {
        "id": "9e7ec77d5b606af2",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 220,
        "wires": [
            [
                "ba70090167aa83a0"
            ]
        ]
    },
    {
        "id": "61136f2aef893d59",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "56ad65cb0138c60f"
            ]
        ]
    },
    {
        "id": "74b42b21ee38b3c4",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "d00b3c354f68425a"
            ]
        ]
    },
    {
        "id": "e870e6966bd60dfa",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 340,
        "wires": [
            [
                "7f8ca7b79df3a9b9"
            ]
        ]
    },
    {
        "id": "86a6212865d2ec53",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "9d80b35089238532"
            ]
        ]
    },
    {
        "id": "054652b05be51bf3",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\")\n    {\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                \n            }\n            else\n            {\n                val = val + 0;;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\")\n    {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else\n            {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;  \n   \n    }\n\n   \n        val = (val * msg.payload[i].mf).toFixed(2);\n        val = parseFloat(val)\n        var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n        global.set(tag_name, val)\n\n         var length = flow.get(\"length\")\n\n         var value = global.get(tag_name)\n\n            obj.payload = {\n                value: value,\n                b: msg.payload[i].b,\n                bd: msg.payload[i].bd,\n                d: msg.payload[i].d,\n                dd: msg.payload[i].dd,\n                dt: msg.payload[i].dt,\n                f: msg.payload[i].f,\n                fd: msg.payload[i].fd,\n                h: msg.payload[i].h,\n                iid: msg.payload[i].iid,\n                m: msg.payload[i].m,\n                p: msg.payload[i].p,\n                qu: msg.payload[i].qu,\n                text: msg.payload[i].text,\n                u: msg.payload[i].u,\n                mf: msg.payload[i].mf,\n                reg_id: msg.payload[i].vr_wr_reg,\n                data_type: msg.payload[i].data_type,\n                qty: msg.payload[i].qty,\n                fc: msg.payload[i].fc,\n                SNo: msg.payload[i].SNo,\n                time: time,        \n            }\n            node.send(obj)\n    }\n\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 180,
        "wires": [
            [
                "d8429c3c65c98399",
                "741703ef52269768"
            ]
        ]
    },
    {
        "id": "ba70090167aa83a0",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;        \n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n    var length = flow.get(\"length\")\n\n     var value = global.get(tag_name)\n   \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "56ad65cb0138c60f",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d00b3c354f68425a",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n    \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,\n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 300,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "7f8ca7b79df3a9b9",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n    var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "9d80b35089238532",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "dfe1d94cddd7d855",
        "type": "mqtt out",
        "z": "e03abaf24abf01d0",
        "name": "",
        "topic": "INC_INV1",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf5ddb6c5930fafc",
        "x": 1045,
        "y": 280,
        "wires": [],
        "l": false
    },
    {
        "id": "d8429c3c65c98399",
        "type": "join",
        "z": "e03abaf24abf01d0",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 930,
        "y": 280,
        "wires": [
            [
                "dfe1d94cddd7d855"
            ]
        ]
    },
    {
        "id": "6589fd70f47f071a",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "NO_OF_INV_Q",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n8,NO_OF_INV_Q,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,NO_OF_INV_Q,NO_OF_INV_Q,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 320,
        "y": 460,
        "wires": [
            [
                "9afcf6e61fb5608a"
            ]
        ]
    },
    {
        "id": "9afcf6e61fb5608a",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "e9012506857fdea8"
            ]
        ]
    },
    {
        "id": "67dc8cd08db9384b",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var length = flow.get(\"length\")\nvar svg_length = flow.get(\"svg_length\")\nvar PAC = global.get(\"CR_EM_PAC\")\nvar Inverter_online_Q\n\nif (PAC > 0) {\n    Inverter_online_Q = length\n}\n\nelse if (PAC <= 0) {\n    Inverter_online_Q = svg_length\n}\n\nglobal.set(\"No_of_Inv_Q\", Inverter_online_Q)\n\nif (length != 0) {\n    var time = new Date().getTime()\n    var obj = {};\n    obj.payload = {\n        value: Inverter_online_Q,\n        b: msg.payload.b,\n        bd: msg.payload.bd,\n        d: msg.payload.d,\n        dd: msg.payload.dd,\n        dt: msg.payload.dt,\n        f: msg.payload.f,\n        fd: msg.payload.fd,\n        h: msg.payload.h,\n        iid: msg.payload.iid,\n        m: msg.payload.m,\n        p: msg.payload.p,\n        qu: msg.payload.qu,\n        u: msg.payload.u,\n        mf: msg.payload.mf,\n        SNo: msg.payload.SNo,\n        time: time\n\n    }\n    node.send(obj)\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e9012506857fdea8",
        "type": "split",
        "z": "e03abaf24abf01d0",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "67dc8cd08db9384b"
            ]
        ]
    },
    {
        "id": "741703ef52269768",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "name": "debug 2404",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 180,
        "wires": []
    },
    {
        "id": "82c0b2fa2213413a",
        "type": "interval",
        "z": "e03abaf24abf01d0",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": false,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 70,
        "y": 280,
        "wires": [
            [
                "96cb7fcaf0ee8a7e",
                "98701ea5e6a4cb5e",
                "d7aa89b49317d879",
                "1a8ae1edc8a93637"
            ]
        ]
    },
    {
        "id": "6ee2f4c1150196af",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "PV_ST SDF",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01.INV01.PV_ST+B01.INV02.PV_ST+B01.INV03.PV_ST+B01.INV04.PV_ST+B02.INV01.PV_ST+B02.INV02.PV_ST+B02.INV03.PV_ST+B02.INV04.PV_ST+B03.INV01.PV_ST+B03.INV02.PV_ST+B03.INV03.PV_ST+B03.INV04.PV_ST+B04.INV01.PV_ST+B04.INV02.PV_ST+B04.INV03.PV_ST+B04.INV04.PV_ST+B05.INV01.PV_ST+B05.INV02.PV_ST+B05.INV03.PV_ST+B05.INV04.PV_ST,AVG,B01,B01_VR_INV,VR_INV,VR_INV,INV,PV_ST,PV_ST,Server9382,9382,1,TATA_AP_70MW,0,,MW,1",
        "output": "str",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "f325ad86148a7e0d"
            ]
        ]
    },
    {
        "id": "f325ad86148a7e0d",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 420,
        "wires": [
            [
                "c991cb685aa86604"
            ]
        ]
    },
    {
        "id": "c991cb685aa86604",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined && tmp_val == 7) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var svg_length = arr_length;\n        flow.set(\"svg_length\", svg_length)\n        global.set(\"svg_length\", svg_length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "fe3d5fdc4d97b17c",
        "type": "template",
        "z": "e03abaf24abf01d0",
        "name": "NO_OF_INV",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n7,NO_OF_INV,SUM,B01,B01_VR_INV,VR_INV,VR_INV,INV,NO_OF_INV,NO_OF_INV,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 310,
        "y": 500,
        "wires": [
            [
                "1e7429196eb3a6b5"
            ]
        ]
    },
    {
        "id": "1e7429196eb3a6b5",
        "type": "csv",
        "z": "e03abaf24abf01d0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "20a88c8a752b4b2d"
            ]
        ]
    },
    {
        "id": "24bcf1c5a3628622",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "name": "To_MQTT",
        "func": "    var length = flow.get(\"length\")\n    global.set(\"No_of_Inv\", length)\n    if(length != 0)\n    {\n        var time = new Date().getTime()\n        var obj = {};\n        obj.payload = {\n            value:length,\n            b: msg.payload.b,\n            bd: msg.payload.bd,\n            d: msg.payload.d,\n            dd: msg.payload.dd,\n            dt: msg.payload.dt,\n            f: msg.payload.f,\n            fd: msg.payload.fd,\n            h: msg.payload.h,\n            iid: msg.payload.iid,\n            m: msg.payload.m,\n            p: msg.payload.p,\n            qu: msg.payload.qu,     \n            u: msg.payload.u,\n            mf: msg.payload.mf,        \n            SNo: msg.payload.SNo, \n            time:time     \n     \n    }\n    node.send(obj)\n    }\n    return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "20a88c8a752b4b2d",
        "type": "split",
        "z": "e03abaf24abf01d0",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "24bcf1c5a3628622"
            ]
        ]
    },
    {
        "id": "21a2413983be0c53",
        "type": "mqtt in",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "",
        "topic": "QAC_LIMIT_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 880,
        "wires": [
            [
                "1f01580cf1e27d13",
                "19003ff0c4c393a7"
            ]
        ]
    },
    {
        "id": "1f01580cf1e27d13",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "debug 2317",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 840,
        "wires": []
    },
    {
        "id": "19003ff0c4c393a7",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "function 237",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].tag_val\n    var value = msg.payload[i].value\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "be643126def3cda4",
        "type": "mqtt in",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "",
        "topic": "PAC_LIMIT_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 980,
        "wires": [
            [
                "f1abc38a0d89300d",
                "2a46a3992a3d65d2"
            ]
        ]
    },
    {
        "id": "f1abc38a0d89300d",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "function 2",
        "func": "var tag_val = \"PAC_LIMIT_CMD\"; // This is the name of the global variable you want to set\n\n// Example value you want to store globally\n// You can replace this with a real value, e.g., from msg.payload\nvar value = msg.payload.PAC_LIMIT_CMD;\n\n// Set the value as a global variable using the tag name\nglobal.set(tag_val, value);\n\n// (Optional) Add a confirmation to the payload\nmsg.payload = `Global variable '${tag_val}' set to: ${value}`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "2a46a3992a3d65d2",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 940,
        "wires": []
    },
    {
        "id": "3a6565f62fa8cd42",
        "type": "mqtt in",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "",
        "topic": "QAC_REF_SEL_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 880,
        "y": 1060,
        "wires": [
            [
                "386273bac3190c90",
                "c05a80a130cd65cc"
            ]
        ]
    },
    {
        "id": "386273bac3190c90",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "function 3",
        "func": "var tag_val = \"QAC_REF_SEL_CMD\"; // This is the name of the global variable you want to set\n\n// Example value you want to store globally\n// You can replace this with a real value, e.g., from msg.payload\nvar value = msg.payload.QAC_REF_SEL_CMD;\n\n// Set the value as a global variable using the tag name\nglobal.set(tag_val, value);\n\n// (Optional) Add a confirmation to the payload\nmsg.payload = `Global variable '${tag_val}' set to: ${value}`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "c05a80a130cd65cc",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e26ad53a78c1c035",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1020,
        "wires": []
    },
    {
        "id": "fd92247130b88cc3",
        "type": "mqtt out",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "",
        "topic": "ENGINE_1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf5ddb6c5930fafc",
        "x": 1290,
        "y": 720,
        "wires": []
    },
    {
        "id": "e49daaa61deabaf9",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "function 1",
        "func": "const inverterNames = [\"B01.INV01\", \"B01.INV02\", \"B01.INV03\", \"B01.INV04\",\n                       \"B02.INV01\", \"B02.INV02\", \"B02.INV03\", \"B02.INV04\",\n                       \"B05.INV01\", \"B05.INV02\"];\nconst payload = {};\n\nfor (const name of inverterNames) {\n    const invData = global.get(name);\n    if (invData && typeof invData === \"object\") {\n        payload[name] = {\n            QAC_LIMIT_CMD: invData.QAC_LIMIT_CMD || 0,\n            finalMVAr: invData.finalMVAr || 0,\n            PAC: invData.PAC || 0,\n            PF: invData.PF || 0,\n            QAC: invData.QAC || 0,\n            OLD_QAC_LIMIT: invData.OLD_QAC_LIMIT || 0,\n            OLD_QAC_REF_SEL: invData.OLD_QAC_REF_SEL || 0,\n            OLD_PAC_LIMIT: invData.OLD_PAC_LIMIT || 0\n        };\n    } else {\n        node.warn(\"Missing or invalid data for \" + name);\n    }\n}\n\nmsg.payload = payload;\nmsg.topic = \"inverter/status/B01\";  // 🔁 Adjust this topic as needed\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 720,
        "wires": [
            [
                "d41d5b7390d59fd2",
                "fd92247130b88cc3"
            ]
        ]
    },
    {
        "id": "d41d5b7390d59fd2",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 660,
        "wires": []
    },
    {
        "id": "54d9750c22bfe598",
        "type": "interval",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "interval",
        "interval": "250",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": false,
        "unit": "milliseconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 830,
        "y": 720,
        "wires": [
            [
                "e49daaa61deabaf9"
            ]
        ]
    },
    {
        "id": "66dcbc54a4d647bb",
        "type": "mqtt in",
        "z": "e03abaf24abf01d0",
        "g": "dc5cbb990e10bae9",
        "name": "",
        "topic": "INC_INV1_WR",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 700,
        "wires": [
            [
                "6e4acfbed8ac3a42",
                "2837dd1674e230a8"
            ]
        ]
    },
    {
        "id": "6e4acfbed8ac3a42",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "dc5cbb990e10bae9",
        "name": "function 234",
        "func": "var obj = {};\nvar field = msg.payload; \nvar no_of_inv = flow.get(\"length\");  \n\n// Check if 'field' is defined and is a string\nif (msg.payload.PAC_LIMIT_CMD) {\n    var tag_field = msg.payload.f;\n    var actual_pac_limit = msg.payload.value;\n    global.set(tag_field, actual_pac_limit);\n}\nelse if (msg.payload.QAC_LIMIT_CMD) {\n    var tag_field = msg.payload.f;\n    var actual_qac_limit = msg.payload.value;\n    global.set(tag_field, actual_qac_limit);\n}\nelse if (msg.payload.QAC_REF_SEL) {\n    var tag_field = msg.payload.f;\n    var actual_qac_ref_sel = msg.payload.value;\n    global.set(tag_field, actual_qac_ref_sel);\n}\n\n\n// Return null as per original code\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 660,
        "wires": [
            [
                "1cd4671a5c6be248"
            ]
        ]
    },
    {
        "id": "1cd4671a5c6be248",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "g": "dc5cbb990e10bae9",
        "name": "debug 2328",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 660,
        "wires": []
    },
    {
        "id": "2837dd1674e230a8",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "g": "dc5cbb990e10bae9",
        "name": "function 235",
        "func": "// Get the key and value from the incoming object\nvar payload = msg.payload;\nvar inverteronline = global.get(\"No_of_Inv\")\n\n// Extract the first (and only) key from the object\n//active power\nvar tag_field1 = Object.keys(payload)[0];\nvar tag_val1 = payload[tag_field1];\nvar tag_value1 = tag_val1\n//var tag_value1 = 20000\n//var tag_value1 = undefined\n\n\n//reactive power\nvar tag_field2 = Object.keys(payload)[1];\nvar tag_val2 = payload[tag_field2];\nvar tag_value2 = tag_val2 \n\n//reactive power ref selection\nvar tag_field3 = Object.keys(payload)[2];\nvar tag_val3 = payload[tag_field3];\nvar tag_value3 = tag_val3\n\n\n// Set the global variable with the dynamic key and value\nglobal.set(tag_field1, tag_value1);\nglobal.set(tag_field2, tag_value2);\nglobal.set(tag_field3, tag_value3);\n\n\n// Return the modified message object or null as per the original flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 700,
        "wires": [
            [
                "d71002ee99559d2a"
            ]
        ]
    },
    {
        "id": "d71002ee99559d2a",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "g": "dc5cbb990e10bae9",
        "name": "debug 2772",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 700,
        "wires": []
    },
    {
        "id": "ee6a8e4dbb320cac",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "d": true,
        "g": "dc5cbb990e10bae9",
        "name": "function 4",
        "func": "// Get the key and value from the incoming object\nvar payload = msg.payload;\nvar inverteronline = global.get(\"No_of_Inv\")\n\n// Extract the first (and only) key from the object\nvar tag_field = Object.keys(payload)[0];\nvar tag_val = payload[tag_field];\n//var tag_value = tag_val \n//var tag_value = 20000\nvar tag_value = undefined\n\n\n//reactive power\nvar tag_field1 = Object.keys(payload)[1];\nvar tag_val1 = payload[tag_field1];\nvar tag_value1 = tag_val1 \n\n//reactive power ref selection\nvar tag_field2 = Object.keys(payload)[2];\nvar tag_val2 = payload[tag_field2];\nvar tag_value2 = tag_val2\n\n//radiation\nvar tag_field3 = Object.keys(payload)[3];\nvar tag_val3 = payload[tag_field3];\nvar tag_value3 = tag_val3 \n\n\n//em pac\nvar tag_field4 = Object.keys(payload)[4];\nvar tag_val4 = payload[tag_field4];\nvar tag_value4 = tag_val4 \n\n\n// Set the global variable with the dynamic key and value\nglobal.set(tag_field, tag_value);\nglobal.set(tag_field1, tag_value1);\nglobal.set(tag_field2, tag_value2);\nglobal.set(tag_field3, tag_value3);\nglobal.set(tag_field4, tag_value4);\n\n\n// Return the modified message object or null as per the original flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "a48fbbafe71a3c78",
        "type": "function",
        "z": "e03abaf24abf01d0",
        "g": "8a8e68d8fde2a0ee",
        "name": "function 5",
        "func": "// incoming object from msg.payload\nconst input = msg.payload;\n\n// define which blocks you want to keep\nconst allowedBlocks = [\n  \"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \n  \"B06\", \"B07\", \"B08\", \"B09\", \"B10\",\n  \"B11\", \"B12\", \"B13\", \"B14\", \"B15\",\n  \"B16\", \"B17\", \"B20\"\n];\n\nlet filtered = {};\n\n// loop and copy only allowed blocks\nfor (let block of allowedBlocks) {\n    if (input.hasOwnProperty(block)) {\n        filtered[block] = input[block];\n    }\n}\n\nmsg.payload = filtered;\n//node.warn(filtered);\nglobal.set(\"RM_COMM\",msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 900,
        "wires": [
            [
                "c5025979c95d8993"
            ]
        ]
    },
    {
        "id": "c5025979c95d8993",
        "type": "debug",
        "z": "e03abaf24abf01d0",
        "g": "8a8e68d8fde2a0ee",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 880,
        "wires": []
    },
    {
        "id": "f2ed2bcee2b26bd9",
        "type": "mqtt in",
        "z": "e03abaf24abf01d0",
        "g": "8a8e68d8fde2a0ee",
        "name": "",
        "topic": "RM_COMM",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4012a214602a528a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 900,
        "wires": [
            [
                "a48fbbafe71a3c78"
            ]
        ]
    },
    {
        "id": "caa34a6ce5c070c3",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n \n        node.send({ payload: obj });\n    }\n} return null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "2375be6439f16747",
                "979a23400eafdaf2"
            ]
        ]
    },
    {
        "id": "696aad116011f9f1",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B01_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,B01-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B01,B01-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B01,B01-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B01,B01-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B01,B01-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B01,B01-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B01,B01-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 60,
        "wires": [
            [
                "a3a4524074ea89a3"
            ]
        ]
    },
    {
        "id": "a3a4524074ea89a3",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 60,
        "wires": [
            [
                "410ced895003e0ff"
            ]
        ]
    },
    {
        "id": "410ced895003e0ff",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "2375be6439f16747",
        "type": "debug",
        "z": "a4e973eb7737e934",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 580,
        "wires": []
    },
    {
        "id": "042a4deba70a4ec4",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B01_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,B01-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B01,B01-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B01,B01-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B01,B01-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B01,B01-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B01,B01-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B01,B01-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "e4698971a95837e0"
            ]
        ]
    },
    {
        "id": "e4698971a95837e0",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 100,
        "wires": [
            [
                "1643fcdcd1b72dc8"
            ]
        ]
    },
    {
        "id": "1643fcdcd1b72dc8",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 100,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "5c4ada8f574124f3",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 180,
        "wires": [
            [
                "b7a71f39b0cc8169"
            ]
        ]
    },
    {
        "id": "b7a71f39b0cc8169",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 180,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "bb9d267bb7f9f9f9",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "46ef9da62e6f5b35"
            ]
        ]
    },
    {
        "id": "46ef9da62e6f5b35",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 220,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "67097d8a3cfc3a97",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 300,
        "wires": [
            [
                "f8c505e6626ca572"
            ]
        ]
    },
    {
        "id": "f8c505e6626ca572",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 300,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "d7231759880ce105",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 340,
        "wires": [
            [
                "aacadfd60543f481"
            ]
        ]
    },
    {
        "id": "aacadfd60543f481",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "9cbae90462ec1367",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 420,
        "wires": [
            [
                "b9244a5c9a26c1d5"
            ]
        ]
    },
    {
        "id": "b9244a5c9a26c1d5",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 420,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "5666d86dee11fd2e",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "eca352401a2ffe7b"
            ]
        ]
    },
    {
        "id": "eca352401a2ffe7b",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 460,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "1fd6f265b24c43f7",
        "type": "influxdb batch",
        "z": "a4e973eb7737e934",
        "d": true,
        "influxdb": "ea571d30b091616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 1350,
        "y": 520,
        "wires": []
    },
    {
        "id": "358153a8276127ec",
        "type": "inject",
        "z": "a4e973eb7737e934",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 620,
        "wires": [
            [
                "4d2974c4dc374531"
            ]
        ]
    },
    {
        "id": "b2cfe5c30667ab5c",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B02_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B02,B02-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B02,B02-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B02,B02-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B02,B02-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B02,B02-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B02,B02-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B02,B02-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 180,
        "wires": [
            [
                "5c4ada8f574124f3"
            ]
        ]
    },
    {
        "id": "f5567c291e1d73d7",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B02_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B02,B02-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B02,B02-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B02,B02-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B02,B02-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B02,B02-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B02,B02-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B02,B02-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 220,
        "wires": [
            [
                "bb9d267bb7f9f9f9"
            ]
        ]
    },
    {
        "id": "fdd8d8ce26cac96c",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B03_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B03,B03-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B03,B03-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B03,B03-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B03,B03-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B03,B03-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B03,B03-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B03,B03-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 300,
        "wires": [
            [
                "67097d8a3cfc3a97"
            ]
        ]
    },
    {
        "id": "a91f5890797a602b",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B03_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B03,B03-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B03,B03-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B03,B03-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B03,B03-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B03,B03-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B03,B03-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B03,B03-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 340,
        "wires": [
            [
                "d7231759880ce105"
            ]
        ]
    },
    {
        "id": "86cabf56a4aa6033",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B04_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B04,B04-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B04,B04-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B04,B04-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B04,B04-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B04,B04-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B04,B04-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B04,B04-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 420,
        "wires": [
            [
                "9cbae90462ec1367"
            ]
        ]
    },
    {
        "id": "7cbefe44c4e69ab0",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B04_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B04,B04-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B04,B04-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B04,B04-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B04,B04-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B04,B04-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B04,B04-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B04,B04-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 460,
        "wires": [
            [
                "5666d86dee11fd2e"
            ]
        ]
    },
    {
        "id": "38f6587deaaa6a3b",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B05_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B05,B05-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B05,B05-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B05,B05-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B05,B05-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B05,B05-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B05,B05-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B05,B05-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 540,
        "wires": [
            [
                "9da33f0f42a697e2"
            ]
        ]
    },
    {
        "id": "39424c2dad8e50a7",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B05_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B05,B05-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B05,B05-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B05,B05-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B05,B05-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B05,B05-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B05,B05-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B05,B05-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 580,
        "wires": [
            [
                "3c2f935f24e74b04"
            ]
        ]
    },
    {
        "id": "9da33f0f42a697e2",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "d9d14458543720f5"
            ]
        ]
    },
    {
        "id": "d9d14458543720f5",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 540,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "3c2f935f24e74b04",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "8eac7a0557699568"
            ]
        ]
    },
    {
        "id": "8eac7a0557699568",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 580,
        "wires": [
            [
                "34e7019dbb03ca1c"
            ]
        ]
    },
    {
        "id": "24775a11dff3efcb",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B06_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B06,B06-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B06,B06-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B06,B06-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B06,B06-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B06,B06-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B06,B06-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B06,B06-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 660,
        "wires": [
            [
                "b7555b5a91da52c0"
            ]
        ]
    },
    {
        "id": "b7555b5a91da52c0",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 660,
        "wires": [
            [
                "826090648a6c5fdb"
            ]
        ]
    },
    {
        "id": "826090648a6c5fdb",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 660,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "c3cf3828a6ae42ec",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B06_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B06,B06-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B06,B06-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B06,B06-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B06,B06-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B06,B06-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B06,B06-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B06,B06-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 700,
        "wires": [
            [
                "8464df2dad97a2a1"
            ]
        ]
    },
    {
        "id": "8464df2dad97a2a1",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 700,
        "wires": [
            [
                "3ca9e0110073dc4b"
            ]
        ]
    },
    {
        "id": "3ca9e0110073dc4b",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 700,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "0a69ea719e190a34",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 780,
        "wires": [
            [
                "718deb119ef71083"
            ]
        ]
    },
    {
        "id": "718deb119ef71083",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 780,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "b9ec0ee0084ba54c",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 820,
        "wires": [
            [
                "f1bff45a964bbdb6"
            ]
        ]
    },
    {
        "id": "f1bff45a964bbdb6",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 820,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "684ff2721343e6c0",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 900,
        "wires": [
            [
                "e9522555e4de4d09"
            ]
        ]
    },
    {
        "id": "e9522555e4de4d09",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 900,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "f5c050483733504b",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 940,
        "wires": [
            [
                "c26aaefc66510708"
            ]
        ]
    },
    {
        "id": "c26aaefc66510708",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 940,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "67aa203db62604ff",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1020,
        "wires": [
            [
                "415ac18cfc23b796"
            ]
        ]
    },
    {
        "id": "415ac18cfc23b796",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1020,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "5ee1f4a8226d7616",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1060,
        "wires": [
            [
                "1e3521c9eefeb3db"
            ]
        ]
    },
    {
        "id": "1e3521c9eefeb3db",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1060,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "8f4150e371320938",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B07_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B07,B07-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B07,B07-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B07,B07-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B07,B07-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B07,B07-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B07,B07-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B07,B07-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 780,
        "wires": [
            [
                "0a69ea719e190a34"
            ]
        ]
    },
    {
        "id": "9d040d2996189335",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B07_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B07,B07-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B07,B07-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B07,B07-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B07,B07-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B07,B07-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B07,B07-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B07,B07-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 820,
        "wires": [
            [
                "b9ec0ee0084ba54c"
            ]
        ]
    },
    {
        "id": "9545f441ac1c095f",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B08_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B08,B08-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B08,B08-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B08,B08-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B08,B08-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B08,B08-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B08,B08-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B08,B08-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 900,
        "wires": [
            [
                "684ff2721343e6c0"
            ]
        ]
    },
    {
        "id": "e13fb71fc55e1244",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B08_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B08,B08-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B08,B08-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B08,B08-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B08,B08-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B08,B08-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B08,B08-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B08,B08-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 940,
        "wires": [
            [
                "f5c050483733504b"
            ]
        ]
    },
    {
        "id": "2e127b0623904cfd",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B09_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B09,B09-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B09,B09-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B09,B09-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B09,B09-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B09,B09-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B09,B09-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B09,B09-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1020,
        "wires": [
            [
                "67aa203db62604ff"
            ]
        ]
    },
    {
        "id": "271f3b6d7a86c0c7",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B09_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B09,B09-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B09,B09-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B09,B09-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B09,B09-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B09,B09-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B09,B09-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B09,B09-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1060,
        "wires": [
            [
                "5ee1f4a8226d7616"
            ]
        ]
    },
    {
        "id": "ea829087784e2042",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B10_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B10,B10-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B10,B10-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B10,B10-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B10,B10-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B10,B10-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B10,B10-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B10,B10-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1140,
        "wires": [
            [
                "03303aed154d60e7"
            ]
        ]
    },
    {
        "id": "679687116577ce90",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B10_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B10,B10-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B10,B10-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B10,B10-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B10,B10-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B10,B10-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B10,B10-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B10,B10-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1180,
        "wires": [
            [
                "41a4f7d0ab153e4a"
            ]
        ]
    },
    {
        "id": "03303aed154d60e7",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1140,
        "wires": [
            [
                "4943038b2d9cc5ce"
            ]
        ]
    },
    {
        "id": "4943038b2d9cc5ce",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "41a4f7d0ab153e4a",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1180,
        "wires": [
            [
                "db78b4792ddec523"
            ]
        ]
    },
    {
        "id": "db78b4792ddec523",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1180,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "04e3954f27f6d608",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n        node.send({ payload: obj });\n    }\n} return null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 620,
        "wires": [
            [
                "b82677f5b287428f",
                "40c0f40cb5eb40fa"
            ]
        ]
    },
    {
        "id": "c74a16f7f582150e",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B11_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B11,B11-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B11,B11-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B11,B11-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B11,B11-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B11,B11-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B11,B11-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B11,B11-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 60,
        "wires": [
            [
                "a488e2a7ffeaad59"
            ]
        ]
    },
    {
        "id": "a488e2a7ffeaad59",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 60,
        "wires": [
            [
                "135f8e47e9491df4"
            ]
        ]
    },
    {
        "id": "135f8e47e9491df4",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 60,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "b82677f5b287428f",
        "type": "debug",
        "z": "a4e973eb7737e934",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2930,
        "y": 580,
        "wires": []
    },
    {
        "id": "29e95ea1a184faa9",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B11_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B11,B11-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B11,B11-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B11,B11-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B11,B11-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B11,B11-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B11,B11-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B11,B11-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 100,
        "wires": [
            [
                "9fbf86d60f74f786"
            ]
        ]
    },
    {
        "id": "9fbf86d60f74f786",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 100,
        "wires": [
            [
                "7b4537f655bdfdd1"
            ]
        ]
    },
    {
        "id": "7b4537f655bdfdd1",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 100,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "50a6bc0a4aefbdfb",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 180,
        "wires": [
            [
                "f87a76161c0d5305"
            ]
        ]
    },
    {
        "id": "f87a76161c0d5305",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 180,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "68fe160a59794a74",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 220,
        "wires": [
            [
                "c3bb0041282dc44d"
            ]
        ]
    },
    {
        "id": "c3bb0041282dc44d",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 220,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "ee29eac41afa7a07",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 300,
        "wires": [
            [
                "79e064d024b3dba3"
            ]
        ]
    },
    {
        "id": "79e064d024b3dba3",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 300,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "172c5f7a007efbb9",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 340,
        "wires": [
            [
                "6a300d353e9b0009"
            ]
        ]
    },
    {
        "id": "6a300d353e9b0009",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 340,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "9136a095ed9384e9",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 420,
        "wires": [
            [
                "ded11b16ea760abb"
            ]
        ]
    },
    {
        "id": "ded11b16ea760abb",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 420,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "c70db4c83b6c9283",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 460,
        "wires": [
            [
                "6490406c8797a901"
            ]
        ]
    },
    {
        "id": "6490406c8797a901",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 460,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "3c01cf3219666667",
        "type": "influxdb batch",
        "z": "a4e973eb7737e934",
        "d": true,
        "influxdb": "ea571d30b091616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 2910,
        "y": 540,
        "wires": []
    },
    {
        "id": "0301452f2ee50979",
        "type": "inject",
        "z": "a4e973eb7737e934",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1650,
        "y": 620,
        "wires": [
            [
                "00b09c5f778f4b29"
            ]
        ]
    },
    {
        "id": "2f735a3b4d20acb4",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B12_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B12,B12-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B12,B12-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B12,B12-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B12,B12-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B12,B12-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B12,B12-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B12,B12-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 180,
        "wires": [
            [
                "50a6bc0a4aefbdfb"
            ]
        ]
    },
    {
        "id": "cd02971ab6ff38aa",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B12_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B12,B12-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B12,B12-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B12,B12-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B12,B12-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B12,B12-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B12,B12-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B12,B12-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 220,
        "wires": [
            [
                "68fe160a59794a74"
            ]
        ]
    },
    {
        "id": "e38a2db92da97149",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B13_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B13,B13-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B13,B13-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B13,B13-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B13,B13-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B13,B13-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B13,B13-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B13,B13-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 300,
        "wires": [
            [
                "ee29eac41afa7a07"
            ]
        ]
    },
    {
        "id": "45811681e89fcc80",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B13_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B13,B13-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B13,B13-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B13,B13-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B13,B13-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B13,B13-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B13,B13-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B13,B13-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 340,
        "wires": [
            [
                "172c5f7a007efbb9"
            ]
        ]
    },
    {
        "id": "0f39b2f05f59658a",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B14_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B14,B14-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B14,B14-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B14,B14-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B14,B14-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B14,B14-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B14,B14-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B14,B14-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 420,
        "wires": [
            [
                "9136a095ed9384e9"
            ]
        ]
    },
    {
        "id": "78ef2a0892641806",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B14_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B14,B14-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B14,B14-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B14,B14-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B14,B14-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B14,B14-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B14,B14-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B14,B14-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 460,
        "wires": [
            [
                "c70db4c83b6c9283"
            ]
        ]
    },
    {
        "id": "a60297c9f60eb59e",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B15_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B15,B15-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B15,B15-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B15,B15-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B15,B15-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B15,B15-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B15,B15-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B15,B15-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 540,
        "wires": [
            [
                "0ba8623777fd43fb"
            ]
        ]
    },
    {
        "id": "967210e271089726",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B15_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B15,B15-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B15,B15-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B15,B15-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B15,B15-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B15,B15-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B15,B15-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B15,B15-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 580,
        "wires": [
            [
                "08702065926eea6f"
            ]
        ]
    },
    {
        "id": "0ba8623777fd43fb",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 540,
        "wires": [
            [
                "4f10f164c146d0c5"
            ]
        ]
    },
    {
        "id": "4f10f164c146d0c5",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 540,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "08702065926eea6f",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 580,
        "wires": [
            [
                "93efb04675a2bf79"
            ]
        ]
    },
    {
        "id": "93efb04675a2bf79",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 580,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "65be42d77ab6465e",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B16_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B16,B16-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B16,B16-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B16,B16-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B16,B16-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B16,B16-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B16,B16-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B16,B16-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 780,
        "wires": [
            [
                "33a157f74b013a9c"
            ]
        ]
    },
    {
        "id": "33a157f74b013a9c",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 780,
        "wires": [
            [
                "3110b6e90ed8a87a"
            ]
        ]
    },
    {
        "id": "3110b6e90ed8a87a",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 780,
        "wires": [
            [
                "40f87ccf7ac20c63"
            ]
        ]
    },
    {
        "id": "cd5572f07eed81bb",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B16_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B16,B16-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B16,B16-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B16,B16-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B16,B16-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B16,B16-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B16,B16-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B16,B16-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 820,
        "wires": [
            [
                "fd8aeb7b9ec29a57"
            ]
        ]
    },
    {
        "id": "fd8aeb7b9ec29a57",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 820,
        "wires": [
            [
                "eb5368623baae566"
            ]
        ]
    },
    {
        "id": "eb5368623baae566",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 820,
        "wires": [
            [
                "40f87ccf7ac20c63"
            ]
        ]
    },
    {
        "id": "d4fcf2dbd2bdb354",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 900,
        "wires": [
            [
                "adb2233a4e5973ae"
            ]
        ]
    },
    {
        "id": "adb2233a4e5973ae",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 900,
        "wires": [
            [
                "40f87ccf7ac20c63"
            ]
        ]
    },
    {
        "id": "2de32304db3c6f73",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 940,
        "wires": [
            [
                "b61114c5c9ec477e"
            ]
        ]
    },
    {
        "id": "b61114c5c9ec477e",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 940,
        "wires": [
            [
                "40f87ccf7ac20c63"
            ]
        ]
    },
    {
        "id": "309f35549aa1fbb6",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 1020,
        "wires": [
            [
                "6702aee15b98eb69"
            ]
        ]
    },
    {
        "id": "6702aee15b98eb69",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1020,
        "wires": [
            [
                "40f87ccf7ac20c63"
            ]
        ]
    },
    {
        "id": "17f1a1859d2e9170",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 1060,
        "wires": [
            [
                "2f0a3c27195f5ee5"
            ]
        ]
    },
    {
        "id": "2f0a3c27195f5ee5",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1060,
        "wires": [
            [
                "40f87ccf7ac20c63"
            ]
        ]
    },
    {
        "id": "6d36d4b922b5c56e",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B17_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B17,B17-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B17,B17-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B17,B17-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B17,B17-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B17,B17-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B17,B17-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B17,B17-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 900,
        "wires": [
            [
                "d4fcf2dbd2bdb354"
            ]
        ]
    },
    {
        "id": "bd804a3b48d62f8d",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B17_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B17,B17-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B17,B17-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B17,B17-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B17,B17-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B17,B17-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B17,B17-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B17,B17-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 940,
        "wires": [
            [
                "2de32304db3c6f73"
            ]
        ]
    },
    {
        "id": "39fc9c0dd30a7415",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B20_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B20,B20-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B20,B20-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B20,B20-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B20,B20-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B20,B20-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B20,B20-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B20,B20-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 1020,
        "wires": [
            [
                "309f35549aa1fbb6"
            ]
        ]
    },
    {
        "id": "aa9aa1885364db79",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "B20_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B20,B20-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B20,B20-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B20,B20-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B20,B20-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B20,B20-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B20,B20-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B20,B20-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 1060,
        "wires": [
            [
                "17f1a1859d2e9170"
            ]
        ]
    },
    {
        "id": "158cfb2db7a232e9",
        "type": "mqtt out",
        "z": "a4e973eb7737e934",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 1470,
        "y": 620,
        "wires": []
    },
    {
        "id": "979a23400eafdaf2",
        "type": "join",
        "z": "a4e973eb7737e934",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 620,
        "wires": [
            [
                "158cfb2db7a232e9"
            ]
        ]
    },
    {
        "id": "54663a2ae0564f52",
        "type": "mqtt out",
        "z": "a4e973eb7737e934",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 3070,
        "y": 620,
        "wires": []
    },
    {
        "id": "40c0f40cb5eb40fa",
        "type": "join",
        "z": "a4e973eb7737e934",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 620,
        "wires": [
            [
                "54663a2ae0564f52"
            ]
        ]
    },
    {
        "id": "332bf4a9a8c9b96e",
        "type": "template",
        "z": "a4e973eb7737e934",
        "name": "COMM",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,BLOCK_01,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n2,B01,BLOCK_01,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n3,B02,BLOCK_02,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n4,B02,BLOCK_02,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n5,B03,BLOCK_03,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n6,B03,BLOCK_03,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n7,B04,BLOCK_04,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n8,B04,BLOCK_04,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n9,B05,BLOCK_05,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n10,B05,BLOCK_05,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n11,B06,BLOCK_06,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n12,B06,BLOCK_06,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n13,B07,BLOCK_07,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n14,B07,BLOCK_07,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n15,B08,BLOCK_08,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n16,B08,BLOCK_08,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n17,B09,BLOCK_09,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n18,B09,BLOCK_09,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n19,B10,BLOCK_10,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n20,B10,BLOCK_10,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n21,B11,BLOCK_11,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n22,B11,BLOCK_11,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n23,B12,BLOCK_12,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n24,B12,BLOCK_12,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n25,B13,BLOCK_13,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n26,B13,BLOCK_13,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n27,B14,BLOCK_14,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n28,B14,BLOCK_14,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n29,B15,BLOCK_15,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n30,B15,BLOCK_15,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n31,B16,BLOCK_16,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n32,B16,BLOCK_16,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n33,B17,BLOCK_17,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n34,B17,BLOCK_17,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n35,B20,BLOCK_20,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n36,B20,BLOCK_20,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "c48d65dda2168c89"
            ]
        ]
    },
    {
        "id": "c48d65dda2168c89",
        "type": "csv",
        "z": "a4e973eb7737e934",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1240,
        "wires": [
            [
                "bc641d976ffa7966"
            ]
        ]
    },
    {
        "id": "bc641d976ffa7966",
        "type": "function",
        "z": "a4e973eb7737e934",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].f}.${msg.payload[i].b}.${msg.payload[i].d}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": msg.payload[i].u\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1240,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "facdc2f33782d683",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n \n        node.send({ payload: obj });\n    }\n} return null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "d9eb03a84fc35347",
                "5aed6e2d55de0189"
            ]
        ]
    },
    {
        "id": "14e526447cf448e7",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B01_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,B01-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B01,B01-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B01,B01-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B01,B01-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B01,B01-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B01,B01-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B01,B01-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 60,
        "wires": [
            [
                "ed6a6f62c2406d35"
            ]
        ]
    },
    {
        "id": "ed6a6f62c2406d35",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 60,
        "wires": [
            [
                "32a59f7a6a76c266"
            ]
        ]
    },
    {
        "id": "32a59f7a6a76c266",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "d9eb03a84fc35347",
        "type": "debug",
        "z": "579668379cc20d36",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 580,
        "wires": []
    },
    {
        "id": "8c7d5029383904f7",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B01_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,B01-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B01,B01-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B01,B01-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B01,B01-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B01,B01-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B01,B01-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B01,B01-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "335f5a887082df04"
            ]
        ]
    },
    {
        "id": "335f5a887082df04",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 100,
        "wires": [
            [
                "b90f09d8585ab961"
            ]
        ]
    },
    {
        "id": "b90f09d8585ab961",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 100,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "0b8d56d39a66cbfb",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 180,
        "wires": [
            [
                "77eaa065e343f29c"
            ]
        ]
    },
    {
        "id": "77eaa065e343f29c",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 180,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "9877fca865a14a3b",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "e70e466630f61ab3"
            ]
        ]
    },
    {
        "id": "e70e466630f61ab3",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 220,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "c948d04637e71026",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 300,
        "wires": [
            [
                "740e52b23ba025e7"
            ]
        ]
    },
    {
        "id": "740e52b23ba025e7",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 300,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "d3f5441aba36be40",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 340,
        "wires": [
            [
                "e222695b4db23659"
            ]
        ]
    },
    {
        "id": "e222695b4db23659",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "108fa50e082b0460",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 420,
        "wires": [
            [
                "61ad260213a747d0"
            ]
        ]
    },
    {
        "id": "61ad260213a747d0",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 420,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "3a3b4f36eca12a82",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "4185c13ac85de04d"
            ]
        ]
    },
    {
        "id": "4185c13ac85de04d",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 460,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "0d63c0b40f82b9f5",
        "type": "influxdb batch",
        "z": "579668379cc20d36",
        "d": true,
        "influxdb": "ea571d30b091616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 1350,
        "y": 520,
        "wires": []
    },
    {
        "id": "2ed4cc18e3bed36a",
        "type": "inject",
        "z": "579668379cc20d36",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 620,
        "wires": [
            [
                "08ecb247ea3c35f3"
            ]
        ]
    },
    {
        "id": "88850ebe5e53948d",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B02_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B02,B02-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B02,B02-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B02,B02-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B02,B02-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B02,B02-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B02,B02-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B02,B02-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 180,
        "wires": [
            [
                "0b8d56d39a66cbfb"
            ]
        ]
    },
    {
        "id": "a9b1b7f10a735b21",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B02_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B02,B02-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B02,B02-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B02,B02-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B02,B02-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B02,B02-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B02,B02-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B02,B02-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 220,
        "wires": [
            [
                "9877fca865a14a3b"
            ]
        ]
    },
    {
        "id": "21a95dedd4dd7fc0",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B03_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B03,B03-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B03,B03-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B03,B03-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B03,B03-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B03,B03-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B03,B03-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B03,B03-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 300,
        "wires": [
            [
                "c948d04637e71026"
            ]
        ]
    },
    {
        "id": "ae16ba47014c7f83",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B03_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B03,B03-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B03,B03-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B03,B03-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B03,B03-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B03,B03-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B03,B03-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B03,B03-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 340,
        "wires": [
            [
                "d3f5441aba36be40"
            ]
        ]
    },
    {
        "id": "3c25166b00c3cf44",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B04_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B04,B04-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B04,B04-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B04,B04-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B04,B04-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B04,B04-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B04,B04-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B04,B04-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 420,
        "wires": [
            [
                "108fa50e082b0460"
            ]
        ]
    },
    {
        "id": "c641942489a64991",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B04_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B04,B04-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B04,B04-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B04,B04-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B04,B04-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B04,B04-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B04,B04-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B04,B04-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 460,
        "wires": [
            [
                "3a3b4f36eca12a82"
            ]
        ]
    },
    {
        "id": "c4eee3bb5609351c",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B05_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B05,B05-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B05,B05-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B05,B05-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B05,B05-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B05,B05-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B05,B05-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B05,B05-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 540,
        "wires": [
            [
                "05834f6ea0111683"
            ]
        ]
    },
    {
        "id": "ec6e7dcc153b04a3",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B05_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B05,B05-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B05,B05-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B05,B05-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B05,B05-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B05,B05-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B05,B05-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B05,B05-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 580,
        "wires": [
            [
                "7fc0b42a72c3a078"
            ]
        ]
    },
    {
        "id": "05834f6ea0111683",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "a05daf5418fcf5b9"
            ]
        ]
    },
    {
        "id": "a05daf5418fcf5b9",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 540,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "7fc0b42a72c3a078",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "cb1f8d13e15e0bde"
            ]
        ]
    },
    {
        "id": "cb1f8d13e15e0bde",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 580,
        "wires": [
            [
                "4cbd386ddca19f9f"
            ]
        ]
    },
    {
        "id": "0bc5741cdb835560",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B06_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B06,B06-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B06,B06-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B06,B06-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B06,B06-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B06,B06-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B06,B06-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B06,B06-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 660,
        "wires": [
            [
                "46ba1845868b5c8a"
            ]
        ]
    },
    {
        "id": "46ba1845868b5c8a",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 660,
        "wires": [
            [
                "6c7b610781b6bd20"
            ]
        ]
    },
    {
        "id": "6c7b610781b6bd20",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 660,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "d2b51b06769ba5ec",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B06_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B06,B06-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B06,B06-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B06,B06-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B06,B06-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B06,B06-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B06,B06-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B06,B06-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 700,
        "wires": [
            [
                "575a2b2e04bed5da"
            ]
        ]
    },
    {
        "id": "575a2b2e04bed5da",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 700,
        "wires": [
            [
                "091e8c549d6434f4"
            ]
        ]
    },
    {
        "id": "091e8c549d6434f4",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 700,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "6e4342cc2e47ef1a",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 780,
        "wires": [
            [
                "ac612e6063fac1c3"
            ]
        ]
    },
    {
        "id": "ac612e6063fac1c3",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 780,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "f01b2142e90641e6",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 820,
        "wires": [
            [
                "9e06c5d5a8086d9f"
            ]
        ]
    },
    {
        "id": "9e06c5d5a8086d9f",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 820,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "3ca855763046401a",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 900,
        "wires": [
            [
                "5d0128838da9c2d6"
            ]
        ]
    },
    {
        "id": "5d0128838da9c2d6",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 900,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "684870c6b3c704af",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 940,
        "wires": [
            [
                "d81e2981bf700517"
            ]
        ]
    },
    {
        "id": "d81e2981bf700517",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 940,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "8d99ae3aa110dd90",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1020,
        "wires": [
            [
                "ea416d280fd501f8"
            ]
        ]
    },
    {
        "id": "ea416d280fd501f8",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1020,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "fa866e94822188c9",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1060,
        "wires": [
            [
                "09da530380920bfa"
            ]
        ]
    },
    {
        "id": "09da530380920bfa",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1060,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "ea42981e1a4f1da9",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B07_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B07,B07-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B07,B07-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B07,B07-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B07,B07-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B07,B07-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B07,B07-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B07,B07-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 780,
        "wires": [
            [
                "6e4342cc2e47ef1a"
            ]
        ]
    },
    {
        "id": "1614aa5b142fb436",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B07_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B07,B07-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B07,B07-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B07,B07-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B07,B07-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B07,B07-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B07,B07-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B07,B07-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 820,
        "wires": [
            [
                "f01b2142e90641e6"
            ]
        ]
    },
    {
        "id": "7530aacf001a6dae",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B08_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B08,B08-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B08,B08-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B08,B08-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B08,B08-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B08,B08-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B08,B08-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B08,B08-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 900,
        "wires": [
            [
                "3ca855763046401a"
            ]
        ]
    },
    {
        "id": "a19efa721c30556b",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B08_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B08,B08-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B08,B08-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B08,B08-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B08,B08-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B08,B08-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B08,B08-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B08,B08-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 940,
        "wires": [
            [
                "684870c6b3c704af"
            ]
        ]
    },
    {
        "id": "3b8d9f3ac6402dc0",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B09_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B09,B09-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B09,B09-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B09,B09-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B09,B09-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B09,B09-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B09,B09-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B09,B09-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1020,
        "wires": [
            [
                "8d99ae3aa110dd90"
            ]
        ]
    },
    {
        "id": "e82566fc67adaf24",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B09_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B09,B09-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B09,B09-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B09,B09-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B09,B09-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B09,B09-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B09,B09-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B09,B09-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1060,
        "wires": [
            [
                "fa866e94822188c9"
            ]
        ]
    },
    {
        "id": "5f31b353a5d6ed12",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B10_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B10,B10-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B10,B10-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B10,B10-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B10,B10-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B10,B10-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B10,B10-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B10,B10-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1140,
        "wires": [
            [
                "48b8c5e029f5b9a8"
            ]
        ]
    },
    {
        "id": "3a8fa39de4875821",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B10_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B10,B10-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B10,B10-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B10,B10-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B10,B10-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B10,B10-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B10,B10-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B10,B10-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1180,
        "wires": [
            [
                "5e80a53e7608ccec"
            ]
        ]
    },
    {
        "id": "48b8c5e029f5b9a8",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1140,
        "wires": [
            [
                "3803438befa08965"
            ]
        ]
    },
    {
        "id": "3803438befa08965",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "5e80a53e7608ccec",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1180,
        "wires": [
            [
                "fdb78fdec15dbfc7"
            ]
        ]
    },
    {
        "id": "fdb78fdec15dbfc7",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1180,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    },
    {
        "id": "e055d6bda0d0cde7",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n        node.send({ payload: obj });\n    }\n} return null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 620,
        "wires": [
            [
                "0e5f3b9b07312e3a",
                "8f7382fc834b6690"
            ]
        ]
    },
    {
        "id": "f8299fe1e17f4760",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B11_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B11,B11-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B11,B11-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B11,B11-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B11,B11-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B11,B11-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B11,B11-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B11,B11-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 60,
        "wires": [
            [
                "9cbe81a37a52321d"
            ]
        ]
    },
    {
        "id": "9cbe81a37a52321d",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 60,
        "wires": [
            [
                "c6fb3b5d2d90ad39"
            ]
        ]
    },
    {
        "id": "c6fb3b5d2d90ad39",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 60,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "0e5f3b9b07312e3a",
        "type": "debug",
        "z": "579668379cc20d36",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2930,
        "y": 580,
        "wires": []
    },
    {
        "id": "7f74e53cd11427e4",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B11_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B11,B11-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B11,B11-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B11,B11-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B11,B11-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B11,B11-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B11,B11-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B11,B11-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 100,
        "wires": [
            [
                "e87a928093b42b73"
            ]
        ]
    },
    {
        "id": "e87a928093b42b73",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 100,
        "wires": [
            [
                "0d21fcf6e07848e9"
            ]
        ]
    },
    {
        "id": "0d21fcf6e07848e9",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 100,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "fff460ac8be142c9",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 180,
        "wires": [
            [
                "26fa1133c9e49b6a"
            ]
        ]
    },
    {
        "id": "26fa1133c9e49b6a",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 180,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "379fdf60fa93c5a9",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 220,
        "wires": [
            [
                "f11deb123073a681"
            ]
        ]
    },
    {
        "id": "f11deb123073a681",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 220,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "7748b9c0565eace4",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 300,
        "wires": [
            [
                "c37216595bdfc7bd"
            ]
        ]
    },
    {
        "id": "c37216595bdfc7bd",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 300,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "d2dac31363cffec7",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 340,
        "wires": [
            [
                "91f95ba89c5de193"
            ]
        ]
    },
    {
        "id": "91f95ba89c5de193",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 340,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "e057d32611d4306e",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 420,
        "wires": [
            [
                "374036076173db37"
            ]
        ]
    },
    {
        "id": "374036076173db37",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 420,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "eb12f259bd5b81a1",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 460,
        "wires": [
            [
                "0bfd233fded429dc"
            ]
        ]
    },
    {
        "id": "0bfd233fded429dc",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 460,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "977e0607a4f41197",
        "type": "influxdb batch",
        "z": "579668379cc20d36",
        "d": true,
        "influxdb": "ea571d30b091616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 2910,
        "y": 540,
        "wires": []
    },
    {
        "id": "55c583ff038fabe1",
        "type": "inject",
        "z": "579668379cc20d36",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1650,
        "y": 620,
        "wires": [
            [
                "7b1a98eaf9c7f165"
            ]
        ]
    },
    {
        "id": "fddc5ddae55677a5",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B12_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B12,B12-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B12,B12-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B12,B12-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B12,B12-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B12,B12-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B12,B12-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B12,B12-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 180,
        "wires": [
            [
                "fff460ac8be142c9"
            ]
        ]
    },
    {
        "id": "4b5b4b1082c8876a",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B12_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B12,B12-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B12,B12-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B12,B12-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B12,B12-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B12,B12-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B12,B12-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B12,B12-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 220,
        "wires": [
            [
                "379fdf60fa93c5a9"
            ]
        ]
    },
    {
        "id": "77ae8c7bcaa9b307",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B13_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B13,B13-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B13,B13-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B13,B13-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B13,B13-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B13,B13-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B13,B13-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B13,B13-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 300,
        "wires": [
            [
                "7748b9c0565eace4"
            ]
        ]
    },
    {
        "id": "7da48b0d08258fe3",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B13_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B13,B13-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B13,B13-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B13,B13-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B13,B13-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B13,B13-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B13,B13-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B13,B13-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 340,
        "wires": [
            [
                "d2dac31363cffec7"
            ]
        ]
    },
    {
        "id": "11a59cb4355fd405",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B14_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B14,B14-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B14,B14-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B14,B14-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B14,B14-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B14,B14-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B14,B14-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B14,B14-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 420,
        "wires": [
            [
                "e057d32611d4306e"
            ]
        ]
    },
    {
        "id": "7347da0e609377c6",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B14_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B14,B14-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B14,B14-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B14,B14-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B14,B14-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B14,B14-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B14,B14-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B14,B14-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 460,
        "wires": [
            [
                "eb12f259bd5b81a1"
            ]
        ]
    },
    {
        "id": "27504b22b508d4ef",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B15_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B15,B15-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B15,B15-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B15,B15-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B15,B15-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B15,B15-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B15,B15-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B15,B15-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 540,
        "wires": [
            [
                "4933435d860250ab"
            ]
        ]
    },
    {
        "id": "52eebdd552a7a718",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B15_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B15,B15-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B15,B15-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B15,B15-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B15,B15-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B15,B15-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B15,B15-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B15,B15-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 580,
        "wires": [
            [
                "a028bb006a0bdfd6"
            ]
        ]
    },
    {
        "id": "4933435d860250ab",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 540,
        "wires": [
            [
                "863a547d382bbc2c"
            ]
        ]
    },
    {
        "id": "863a547d382bbc2c",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 540,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "a028bb006a0bdfd6",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 580,
        "wires": [
            [
                "1d84f683cf393313"
            ]
        ]
    },
    {
        "id": "1d84f683cf393313",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 580,
        "wires": [
            [
                "897576abf48f6158"
            ]
        ]
    },
    {
        "id": "0e8797878edfaf26",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B16_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B16,B16-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B16,B16-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B16,B16-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B16,B16-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B16,B16-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B16,B16-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B16,B16-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 780,
        "wires": [
            [
                "4666d15ed5720da2"
            ]
        ]
    },
    {
        "id": "4666d15ed5720da2",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 780,
        "wires": [
            [
                "4194e93b5c140751"
            ]
        ]
    },
    {
        "id": "4194e93b5c140751",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 780,
        "wires": [
            [
                "16fe0cb2d438632a"
            ]
        ]
    },
    {
        "id": "5b440863d9984705",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B16_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B16,B16-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B16,B16-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B16,B16-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B16,B16-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B16,B16-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B16,B16-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B16,B16-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 820,
        "wires": [
            [
                "eb9cae887a5cbec6"
            ]
        ]
    },
    {
        "id": "eb9cae887a5cbec6",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 820,
        "wires": [
            [
                "5013df7aafce181d"
            ]
        ]
    },
    {
        "id": "5013df7aafce181d",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 820,
        "wires": [
            [
                "16fe0cb2d438632a"
            ]
        ]
    },
    {
        "id": "30c5da488bea3724",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 900,
        "wires": [
            [
                "b954dcf0ec784508"
            ]
        ]
    },
    {
        "id": "b954dcf0ec784508",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 900,
        "wires": [
            [
                "16fe0cb2d438632a"
            ]
        ]
    },
    {
        "id": "7d8b16da62deefb2",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 940,
        "wires": [
            [
                "a771fc13d9190716"
            ]
        ]
    },
    {
        "id": "a771fc13d9190716",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 940,
        "wires": [
            [
                "16fe0cb2d438632a"
            ]
        ]
    },
    {
        "id": "ce4a6b2b88cbe4c2",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 1020,
        "wires": [
            [
                "114ec0a00f3e38e8"
            ]
        ]
    },
    {
        "id": "114ec0a00f3e38e8",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1020,
        "wires": [
            [
                "16fe0cb2d438632a"
            ]
        ]
    },
    {
        "id": "73b5c2bb9aa86a39",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 1060,
        "wires": [
            [
                "3dc79c7fc640b303"
            ]
        ]
    },
    {
        "id": "3dc79c7fc640b303",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1060,
        "wires": [
            [
                "16fe0cb2d438632a"
            ]
        ]
    },
    {
        "id": "3fa2f9987f7fb179",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B17_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B17,B17-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B17,B17-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B17,B17-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B17,B17-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B17,B17-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B17,B17-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B17,B17-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 900,
        "wires": [
            [
                "30c5da488bea3724"
            ]
        ]
    },
    {
        "id": "1977ead1eef8d378",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B17_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B17,B17-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B17,B17-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B17,B17-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B17,B17-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B17,B17-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B17,B17-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B17,B17-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 940,
        "wires": [
            [
                "7d8b16da62deefb2"
            ]
        ]
    },
    {
        "id": "87bb7a002d32e122",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B20_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B20,B20-INV01,INV01,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B20,B20-INV01,INV01,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B20,B20-INV01,INV01,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B20,B20-INV01,INV01,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B20,B20-INV01,INV01,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B20,B20-INV01,INV01,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B20,B20-INV01,INV01,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 1020,
        "wires": [
            [
                "ce4a6b2b88cbe4c2"
            ]
        ]
    },
    {
        "id": "59bfde6cd39b4e9d",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "B20_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B20,B20-INV02,INV02,ICT-1,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B20,B20-INV02,INV02,ICT-1,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B20,B20-INV02,INV02,ICT-1,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B20,B20-INV02,INV02,ICT-1,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B20,B20-INV02,INV02,ICT-1,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B20,B20-INV02,INV02,ICT-1,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B20,B20-INV02,INV02,ICT-1,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 1060,
        "wires": [
            [
                "73b5c2bb9aa86a39"
            ]
        ]
    },
    {
        "id": "a4a386847f746522",
        "type": "mqtt out",
        "z": "579668379cc20d36",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 1470,
        "y": 620,
        "wires": []
    },
    {
        "id": "5aed6e2d55de0189",
        "type": "join",
        "z": "579668379cc20d36",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 620,
        "wires": [
            [
                "a4a386847f746522"
            ]
        ]
    },
    {
        "id": "37f8cb6240cfc1b7",
        "type": "mqtt out",
        "z": "579668379cc20d36",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 3070,
        "y": 620,
        "wires": []
    },
    {
        "id": "8f7382fc834b6690",
        "type": "join",
        "z": "579668379cc20d36",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2930,
        "y": 620,
        "wires": [
            [
                "37f8cb6240cfc1b7"
            ]
        ]
    },
    {
        "id": "c2c630d1c21b93de",
        "type": "template",
        "z": "579668379cc20d36",
        "name": "COMM",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B01,BLOCK_01,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n2,B01,BLOCK_01,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n3,B02,BLOCK_02,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n4,B02,BLOCK_02,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n5,B03,BLOCK_03,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n6,B03,BLOCK_03,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n7,B04,BLOCK_04,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n8,B04,BLOCK_04,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n9,B05,BLOCK_05,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n10,B05,BLOCK_05,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n11,B06,BLOCK_06,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n12,B06,BLOCK_06,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n13,B07,BLOCK_07,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n14,B07,BLOCK_07,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n15,B08,BLOCK_08,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n16,B08,BLOCK_08,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n17,B09,BLOCK_09,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n18,B09,BLOCK_09,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n19,B10,BLOCK_10,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n20,B10,BLOCK_10,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n21,B11,BLOCK_11,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n22,B11,BLOCK_11,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n23,B12,BLOCK_12,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n24,B12,BLOCK_12,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n25,B13,BLOCK_13,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n26,B13,BLOCK_13,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n27,B14,BLOCK_14,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n28,B14,BLOCK_14,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n29,B15,BLOCK_15,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n30,B15,BLOCK_15,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n31,B16,BLOCK_16,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n32,B16,BLOCK_16,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n33,B17,BLOCK_17,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n34,B17,BLOCK_17,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n35,B20,BLOCK_20,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n36,B20,BLOCK_20,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "2331a93cca45a411"
            ]
        ]
    },
    {
        "id": "2331a93cca45a411",
        "type": "csv",
        "z": "579668379cc20d36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1240,
        "wires": [
            [
                "3cfa293a7190abbf"
            ]
        ]
    },
    {
        "id": "3cfa293a7190abbf",
        "type": "function",
        "z": "579668379cc20d36",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].f}.${msg.payload[i].b}.${msg.payload[i].d}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": msg.payload[i].u\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1240,
        "wires": [
            [
                "1f19bbf695e844b3"
            ]
        ]
    }
]