{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 16,
  "links": [
    {
      "asDropdown": true,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [
        "mon1"
      ],
      "targetBlank": false,
      "title": "Monitoring",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    }
  ],
  "panels": [
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "eeql8uq08xkw0a"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "thresholdsStyle": {
              "mode": "color",
              "thresholds": []
            }
          },
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 1
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 16,
        "x": 4,
        "y": 0
      },
      "id": 11,
      "options": {
        "alertCustomMessage": "",
        "alwaysVisibleFilter": false,
        "autoScroll": false,
        "browserTabNamePattern": "",
        "collapsedByDefault": false,
        "customValue": false,
        "dashboardVariable": "dashid",
        "displayMode": "button",
        "emptyValue": false,
        "favorites": {
          "addQuery": {},
          "datasource": "",
          "deleteQuery": {},
          "enabled": false,
          "getQuery": {},
          "storage": "browser"
        },
        "filter": false,
        "groupSelection": false,
        "header": true,
        "isMinimizeForTable": false,
        "isUseLocalTime": false,
        "minimizeOutputFormat": "text",
        "padding": 20,
        "persistent": false,
        "saveSelectedGroup": false,
        "saveSelectedGroupKey": "",
        "selectedValues": {
          "maxCount": 0,
          "showSelected": false
        },
        "showGroupTotal": false,
        "showLabel": false,
        "showName": false,
        "showResetButton": false,
        "showTotal": false,
        "statusSort": false,
        "sticky": false,
        "tabsInOrder": true,
        "variable": "Screen"
      },
      "pluginVersion": "4.0.0",
      "targets": [
        {
          "columns": [],
          "data": "data,value\n$Screen,1",
          "datasource": {
            "type": "yesoreyeram-infinity-datasource",
            "uid": "eeql8uq08xkw0a"
          },
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "parser": "uql",
          "refId": "A",
          "root_selector": "",
          "source": "inline",
          "type": "csv",
          "uql": "parse-csv",
          "url": "",
          "url_options": {
            "data": "",
            "method": "GET"
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-variable-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "ACTIVE POWER CONTROL SELECTION",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 0,
        "y": 3
      },
      "id": 54,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "titleSize": 40,
          "valueSize": 18
        },
        "textMode": "name",
        "wideLayout": true
      },
      "pluginVersion": "11.0.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "hide": false,
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "ACTIVE POWER CONTROL SELECTION",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 5,
        "y": 3
      },
      "id": 39,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "titleSize": 40,
          "valueSize": 18
        },
        "textMode": "name",
        "wideLayout": true
      },
      "pluginVersion": "11.0.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "hide": false,
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "REACTIVE POWER CONTROL SELECTION",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 10,
        "y": 3
      },
      "id": 53,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "titleSize": 40,
          "valueSize": 18
        },
        "textMode": "name",
        "wideLayout": true
      },
      "pluginVersion": "11.0.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "hide": false,
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "color-background"
            },
            "filterable": false,
            "inspect": false
          },
          "fieldMinMax": true,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "MODE"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "ACTIVE_POWER": {
                        "index": 0,
                        "text": "ACTIVE POWER (MW)"
                      },
                      "FREQUENCY": {
                        "index": 1,
                        "text": "FREQUENCY (Hz)"
                      },
                      "POWER_FACTOR": {
                        "index": 4,
                        "text": "POWER FACTOR"
                      },
                      "REACTIVE": {
                        "index": 2,
                        "text": "REACTIVE POWER (MVAr)"
                      },
                      "VOLTAGE": {
                        "index": 3,
                        "text": "VOLTAGE (kV)"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.align",
                "value": "left"
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "blue",
                      "value": null
                    }
                  ]
                }
              },
              {
                "id": "custom.width",
                "value": 198
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "STATUS"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "0": {
                        "color": "dark-red",
                        "index": 1,
                        "text": "OFF"
                      },
                      "1": {
                        "color": "dark-green",
                        "index": 0,
                        "text": "ON"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 93
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SETPOINT"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 122
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ACTUAL"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 92
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "AVAILABILITY"
            },
            "properties": [
              {
                "id": "decimals",
                "value": 2
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 9,
        "x": 15,
        "y": 3
      },
      "id": 55,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 0,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.0.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "ACTIVE_POWER"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PAC_ON_OFF"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "B",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "FREQUENCY"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "FAC_ON_OFF"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "C",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "REACTIVE"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "QAC_ON_OFF"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "D",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "POWER_FACTOR"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PF_ON_OFF"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "E",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "VOLTAGE"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "UAC_ON_OFF"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "F",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "ACTIVE_POWER"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PAC_PC_RX"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "G",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "FREQUENCY"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "FAC_PC_RX"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "H",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "REACTIVE"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "QAC_PC_RX"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "I",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "POWER_FACTOR"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PF_PC_RX"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "J",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "VOLTAGE"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "UAC_PC_RX"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "K",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "VR_EM"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "VOLTAGE"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "UAC"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "L",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "VR_EM"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "VOLTAGE"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "UAC"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "M",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "VR_EM"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "ACTIVE_POWER"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PAC"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "N",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "VR_EM"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "REACTIVE"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "QAC"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "O",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "VR_EM"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "FREQUENCY"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "FAC"
            }
          ]
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "1d,-330m"
              ],
              "type": "time"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "dd::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "P",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "VR_EM"
            },
            {
              "condition": "AND",
              "key": "dd::tag",
              "operator": "=",
              "value": "POWER_FACTOR"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PF"
            }
          ]
        }
      ],
      "transformations": [
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "prepareTimeSeries",
          "options": {
            "format": "long"
          }
        },
        {
          "id": "groupingToMatrix",
          "options": {
            "columnField": "d",
            "emptyValue": "null",
            "rowField": "dd",
            "valueField": "last"
          }
        },
        {
          "disabled": true,
          "id": "calculateField",
          "options": {
            "alias": "AVAILABILITY",
            "binary": {
              "left": "VR_EM",
              "operator": "-",
              "right": "SETPOINT"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "VR_EM": "VR_EM",
              "dd\\d": "MODE"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 0,
        "y": 4
      },
      "hideTimeOverride": true,
      "id": 52,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\r\n  ...context.panel.options,\r\n  elements: context.panel.elements,\r\n\r\n});\r\n\r\nlet plantCon = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Plant ,PL_ON_OFF,PAC,ClosedLoop,primary\");\r\nlet dynCon = context.panel.elements.find((obj) => obj.id === \"grafana,13116,iplon,Mode,SEL_PC_RX,SEL_PC,ClosedLoop,primary\");\r\n\r\nif (plantCon.value == 1) {\r\n  return dynCon.value = 1\r\n}\r\n\r\n\r\n\r\n",
        "elements": [
          {
            "allowCustomValue": false,
            "disabled": false,
            "helpers": {},
            "id": "grafana,13116,iplon,Mode,SEL_PC_RX,SEL_PC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "icon": "check",
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "icon": "x",
                "id": "2",
                "label": "OFF",
                "type": "number",
                "value": 2
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "A:SEL_PC_RX",
              "refId": "A",
              "value": "SEL_PC_RX"
            },
            "section": "main",
            "title": "Dynamic Control",
            "tooltip": "",
            "type": "radio",
            "uid": "fad90408-b958-4f8f-8248-24b79e78a72b",
            "unit": "",
            "value": 2,
            "width": 15
          },
          {
            "allowCustomValue": false,
            "disabled": false,
            "helpers": {},
            "id": "grafana,13011,iplon,Plant ,PL_ON_OFF,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "icon": "check",
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "icon": "x",
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "B:PL_ON_OFF",
              "refId": "B",
              "value": "PL_ON_OFF"
            },
            "section": "main",
            "showIf": "let dynCon = context.panel.elements.find((obj) => obj.id === \"grafana,13116,iplon,Mode,SEL_PC_RX,SEL_PC,ClosedLoop,primary\");\nlet plantCon = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Plant ,PL_ON_OFF,PAC,ClosedLoop,primary\");\n\nif (dynCon.value == 1) {\n  return plantCon.type = \"radio\"\n  //feedCon.value = 0\n}",
            "title": "Plant Control",
            "tooltip": "",
            "type": "radio",
            "uid": "874233c7-0d8c-4e4e-abd4-b9f76a44d307",
            "unit": "",
            "value": 0,
            "width": 15
          }
        ],
        "initial": {
          "code": "console.log(\"context\", context)\ncontext.panel.enableSubmit();\nlet plantCon = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Plant ,PL_ON_OFF,PAC,ClosedLoop,primary\");\nlet f1Con = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Feeder 1,F1_ON_OFF,PAC,ClosedLoop,primary\");\nlet f2Con = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Feeder 2,F2_ON_OFF,PAC,ClosedLoop,primary\");\nlet f3Con = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Feeder 3,F3_ON_OFF,PAC,ClosedLoop,primary\");\nlet f4Con = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Feeder 4,F4_ON_OFF,PAC,ClosedLoop,primary\");\nlet feedCon = context.panel.elements.find((obj) => obj.id === \"grafana,13011,iplon,Feeder ,F_ON_OFF,PAC,ClosedLoop,primary\");\nlet dynCon = context.panel.elements.find((obj) => obj.id === \"grafana,13116,iplon,Mode,SEL_PC_RX,SEL_PC,ClosedLoop,primary\");\n\nconst series = context.panel.data.series.find(s => s.name === \"SEL_PC_RX\");\nconst series1 = context.panel.data.series.find(s => s.name === \"PL_ON_OFF\");\nconst series2 = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series3 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\nconst series4 = context.panel.data.series.find(s => s.name === \"F2_ON_OFF\");\nconst series5 = context.panel.data.series.find(s => s.name === \"F3_ON_OFF\");\nconst series6 = context.panel.data.series.find(s => s.name === \"F4_ON_OFF\");\n\nlet dynSt = null;\nlet plantSt = null;\nlet fSt = null;\nlet f1St = null;\nlet f2St = null;\nlet f3St = null;\nlet f4St = null;\n\n\nif (series && series.fields && series.fields.length > 1) {\n  dynSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  plantSt = series1.fields[1].values[0];\n}\nif (series2 && series2.fields && series2.fields.length > 1) {\n  fSt = series2.fields[1].values[0];\n}\nif (series3 && series3.fields && series3.fields.length > 1) {\n  f1St = series3.fields[1].values[0];\n}\nif (series4 && series4.fields && series4.fields.length > 1) {\n  f2St = series4.fields[1].values[0];\n}\nif (series5 && series5.fields && series5.fields.length > 1) {\n  f3St = series5.fields[1].values[0];\n}\nif (series6 && series6.fields && series6.fields.length > 1) {\n  f4St = series6.fields[1].values[0];\n}\n\nif (dynSt == 0 ) {\n  return feedCon.value = 0,\n  plantCon.value =0,\n  dynCon.value = 0\n\n}\n\n/*\nif (plantCon.value == 1 || feedCon.value == 1) {\n  return dynCon.value = 1\n}\n\nif (f1Con.value == 1 || f2Con.value == 1 || f3Con.value == 1 || f4Con.value == 1) {\n  return feedCon.value = 1\n}*/",
          "contentType": "application/json",
          "getPayload": "return {}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "sections": [
            {
              "id": "main",
              "name": ""
            },
            {
              "id": "side",
              "name": ""
            }
          ],
          "variant": "split"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occurred updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "SEL_PC_RX"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PL_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "F_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "D",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "F1_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "E",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "F2_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "F",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "F3_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ix-lCK3Vz"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "G",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "F4_ON_OFF"
            }
          ]
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 5,
        "y": 4
      },
      "hideTimeOverride": true,
      "id": 4,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,PAC_ON_OFF,PAC,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:PAC_ON_OFF",
              "refId": "PAC",
              "value": "PAC_ON_OFF"
            },
            "section": "",
            "title": "ACTIVE _CTL",
            "tooltip": "ACTIVE POWER CONTROL ON/OFF",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 0,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,FAC_ON_OFF,FAC,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "FAC:FAC_ON_OFF",
              "refId": "FAC",
              "value": "FAC_ON_OFF"
            },
            "section": "",
            "title": "FREQUENCY_CTL",
            "tooltip": "FREQUENCY CONTROL ON/OFF",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 0,
            "width": 10
          },
          {
            "allowCustomValue": false,
            "id": "emp1",
            "labelWidth": 20,
            "options": [],
            "optionsSource": "Custom",
            "section": "",
            "title": "",
            "tooltip": "",
            "type": "disabled",
            "uid": "744810a2-2bda-45e9-985f-23d97747173e",
            "unit": "",
            "value": "",
            "width": 15
          }
        ],
        "initial": {
          "code": "// Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"PL_ON_OFF\");\n\n// Default to null if not found\nlet plantSt = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  plantSt = series.fields[1].values[0];\n}\n\nif (plantSt == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "console.log(\"overall_pac\", context)\n\nconst trueValuesCount = context.panel.options.elements.filter((element) => element.value === 1).length;\n\nif (trueValuesCount >= 2) {\n  context.grafana.notifyError([\n    \"Error\",\n    `An error occurred updating values: too many active controls.`,\n  ]);\n} else {\n  // Function to show the password prompt\n  function showPasswordPrompt(callback) {\n    // Create modal elements\n    const modal = document.createElement('div');\n    const overlay = document.createElement('div');\n    const message = document.createElement('div');\n    const input = document.createElement('input');\n    const submitButton = document.createElement('button');\n    const cancelButton = document.createElement('button');\n\n    // Set attributes and styles\n    modal.style.position = 'fixed';\n    modal.style.left = '50%';\n    modal.style.top = '50%';\n    modal.style.transform = 'translate(-50%, -50%)';\n    modal.style.padding = '20px';\n    modal.style.backgroundColor = 'white';\n    modal.style.zIndex = '1000';\n    modal.style.borderRadius = '8px';\n    modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n    overlay.style.position = 'fixed';\n    overlay.style.top = '0';\n    overlay.style.left = '0';\n    overlay.style.width = '100%';\n    overlay.style.height = '100%';\n    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    overlay.style.zIndex = '999';\n\n    // Message above input\n    message.textContent = 'Please enter the password';\n    message.style.marginBottom = '10px';\n    message.style.fontSize = '16px';\n    message.style.fontWeight = 'bold';\n\n    // Input field\n    input.type = 'password';\n    input.placeholder = 'Enter password';\n    input.style.padding = '10px';\n    input.style.width = '100%';\n    input.style.marginBottom = '10px';\n    input.style.borderRadius = '4px';\n    input.style.border = '1px solid #ccc';\n\n    // Buttons\n    submitButton.textContent = 'Submit';\n    cancelButton.textContent = 'Cancel';\n    [submitButton, cancelButton].forEach(button => {\n      button.style.padding = '10px 20px';\n      button.style.marginRight = '10px';\n      button.style.borderRadius = '4px';\n      button.style.border = 'none';\n      button.style.cursor = 'pointer';\n      button.style.transition = 'background-color 0.3s';\n    });\n\n    // Button styles\n    submitButton.style.backgroundColor = '#4CAF50'; // Green\n    cancelButton.style.backgroundColor = '#f44336'; // Red\n\n    // Change button color on click\n    submitButton.addEventListener('mousedown', () => {\n      submitButton.style.backgroundColor = '#45a049'; // Darker green\n    });\n    submitButton.addEventListener('mouseup', () => {\n      submitButton.style.backgroundColor = '#4CAF50';\n    });\n\n    cancelButton.addEventListener('mousedown', () => {\n      cancelButton.style.backgroundColor = '#e53935'; // Darker red\n    });\n    cancelButton.addEventListener('mouseup', () => {\n      cancelButton.style.backgroundColor = '#f44336';\n    });\n\n    modal.appendChild(message);\n    modal.appendChild(input);\n    modal.appendChild(submitButton);\n    modal.appendChild(cancelButton);\n    document.body.appendChild(overlay);\n    document.body.appendChild(modal);\n\n    // Event listeners\n    submitButton.addEventListener('click', () => {\n      const password = input.value;\n      if (password !== \"iplon321\") {\n        context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n        return;\n      } else {\n        // Password is correct; proceed with your logic\n        console.log(\"Password accepted!\");\n        // Clean up\n        document.body.removeChild(modal);\n        document.body.removeChild(overlay);\n        callback(); // Call the next function to execute after password validation\n      }\n    });\n    input.addEventListener('keydown', (event) => {\n      if (event.key === 'Enter') {\n        submitButton.click(); // Trigger the submit button click\n      }\n      if (event.key === 'Escape') {\n        cancelButton.click(); // Trigger the cancel button click\n      }\n    });\n    cancelButton.addEventListener('click', () => {\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n    });\n  }\n\n\n  function sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n    if (index >= urls.length) {\n      resultFlags[label] = false;\n      doneCallback();\n      return;\n    }\n\n    fetch(urls[index], {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(body),\n    })\n      .then((res) => {\n        if (res.ok) {\n          resultFlags[label] = true;\n          doneCallback();\n        } else {\n          // Try next IP\n          sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n        }\n      })\n      .catch(() => {\n        // Try next IP on error\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      });\n  }\n\n  function showFinalNotification(flags) {\n    const p = flags[\"Primary\"];\n    const s = flags[\"Secondary\"];\n\n    if (p && s) {\n      context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n    } else if (p) {\n      context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n    } else if (s) {\n      context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n    } else {\n      context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n    }\n  }\n\n  function sendRequests() {\n    const time = new Date().getTime();\n\n    context.panel.options.elements.forEach((element) => {\n      const body1 = {};\n      const idParts = element.id.split(\",\");\n\n      body1[\"time\"] = time;\n      body1[\"source\"] = idParts[0];\n      body1[\"user\"] = idParts[2];\n      body1[\"mode\"] = idParts[4];\n      body1[\"id\"] = parseInt(idParts[1]);\n      body1[\"val\"] = parseFloat(element.value);\n      body1[\"control\"] = idParts[3];\n      body1[\"tag_name\"] = idParts[5];\n      body1[\"type\"] = idParts[6];\n      body1[\"server\"] = idParts[7];\n\n      const token = \"your_token_here\"; // Replace with actual token\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        \"PRIVATE-TOKEN\": token,\n      };\n\n      const resultFlags = { Primary: false, Secondary: false };\n      let callbackCount = 0;\n\n      function onComplete() {\n        callbackCount++;\n        if (callbackCount === 2) {\n          showFinalNotification(resultFlags);\n        }\n      }\n\n      const url1List = [\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n      ];\n\n      const url2List = [\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n      ];\n\n      sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n      sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n    });\n  }\n\n  showPasswordPrompt(sendRequests);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PAC_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "FAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "FAC_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "RAMP",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "RAMP_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "STATUS"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PL_ON_OFF"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 10,
        "y": 4
      },
      "hideTimeOverride": true,
      "id": 5,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13088,iplon,Line,QAC_ON_OFF,QAC,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "A:QAC",
              "refId": "A",
              "value": "QAC"
            },
            "section": "",
            "title": "REACTIVE_CTL",
            "tooltip": "REACTIVE POWER CONTROL ON/OFF",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 0,
            "width": 10
          },
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13128,iplon,Line,UAC_ON_OFF,UAC,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "B:UAC",
              "refId": "B",
              "value": "UAC"
            },
            "section": "",
            "title": "VOLTAGE_CTL",
            "tooltip": "VOLTAGE CONTROL ON/OFF",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 0,
            "width": 10
          },
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13069,iplon,Line,PF_ON_OFF,PF,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "C:PF",
              "refId": "C",
              "value": "PF"
            },
            "section": "",
            "title": "POWERFACTOR_CTL",
            "tooltip": "POWER FACTOR CONTROL ON/OFF",
            "type": "radio",
            "uid": "b2d75195-bdea-4727-b0ad-f32142a687be",
            "unit": "",
            "value": 0,
            "width": 10
          }
        ],
        "initial": {
          "code": "// Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"PL_ON_OFF\");\n\n// Default to null if not found\nlet plantSt = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  plantSt = series.fields[1].values[0];\n}\n\nif (plantSt == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "// Find control elements\nconst q_ctl = context.panel.elements.find((element) => element.id === \"grafana,13088,iplon,Line,QAC_ON_OFF,QAC,ClosedLoop,primary\");\nconst v_ctl = context.panel.elements.find((element) => element.id === \"grafana,13128,iplon,Line,UAC_ON_OFF,UAC,ClosedLoop,primary\");\nconst pf_ctl = context.panel.elements.find((element) => element.id === \"grafana,13069,iplon,Line,PF_ON_OFF,PF,ClosedLoop,primary\");\n//const vrt = context.panel.elements.find((element) => element.id === \"grafana,13154,iplon,Line,VRT_ON_OFF,VRT,ClosedLoop,primary\");\n//const svg = context.panel.elements.find((element) => element.id === \"grafana,13169,iplon,Line,SVG_ON_OFF,SVG,ClosedLoop,primary\");\n//const qu_ctl = context.panel.elements.find((element) => element.id === \"grafana,13269,iplon,Line,QU_ON_OFF,QU,ClosedLoop,primary\");\n\n// Check conditions for password prompt\nif ((q_ctl.value === 1 && v_ctl.value === 0 && pf_ctl.value === 0) ||\n  (q_ctl.value === 0 && v_ctl.value === 1 && pf_ctl.value === 0) ||\n  (q_ctl.value === 0 && v_ctl.value === 0 && pf_ctl.value === 1) ||\n  (q_ctl.value === 0 && v_ctl.value === 0 && pf_ctl.value === 0)) {\n\n  // Function to show the password prompt\n  function showPasswordPrompt(callback) {\n    // Create modal elements\n    const modal = document.createElement('div');\n    const overlay = document.createElement('div');\n    const message = document.createElement('div');\n    const input = document.createElement('input');\n    const submitButton = document.createElement('button');\n    const cancelButton = document.createElement('button');\n\n    // Set attributes and styles\n    modal.style.position = 'fixed';\n    modal.style.left = '50%';\n    modal.style.top = '50%';\n    modal.style.transform = 'translate(-50%, -50%)';\n    modal.style.padding = '20px';\n    modal.style.backgroundColor = 'white';\n    modal.style.zIndex = '1000';\n    modal.style.borderRadius = '8px';\n    modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n    overlay.style.position = 'fixed';\n    overlay.style.top = '0';\n    overlay.style.left = '0';\n    overlay.style.width = '100%';\n    overlay.style.height = '100%';\n    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    overlay.style.zIndex = '999';\n\n    // Message above input\n    message.textContent = 'Please enter the password';\n    message.style.marginBottom = '10px';\n    message.style.fontSize = '16px';\n    message.style.fontWeight = 'bold';\n\n    // Input field\n    input.type = 'password';\n    input.placeholder = 'Enter password';\n    input.style.padding = '10px';\n    input.style.width = '100%';\n    input.style.marginBottom = '10px';\n    input.style.borderRadius = '4px';\n    input.style.border = '1px solid #ccc';\n\n    // Buttons\n    submitButton.textContent = 'Submit';\n    cancelButton.textContent = 'Cancel';\n    [submitButton, cancelButton].forEach(button => {\n      button.style.padding = '10px 20px';\n      button.style.marginRight = '10px';\n      button.style.borderRadius = '4px';\n      button.style.border = 'none';\n      button.style.cursor = 'pointer';\n      button.style.transition = 'background-color 0.3s';\n    });\n\n    // Button styles\n    submitButton.style.backgroundColor = '#4CAF50'; // Green\n    cancelButton.style.backgroundColor = '#f44336'; // Red\n\n    // Change button color on click\n    submitButton.addEventListener('mousedown', () => {\n      submitButton.style.backgroundColor = '#45a049'; // Darker green\n    });\n    submitButton.addEventListener('mouseup', () => {\n      submitButton.style.backgroundColor = '#4CAF50';\n    });\n\n    cancelButton.addEventListener('mousedown', () => {\n      cancelButton.style.backgroundColor = '#e53935'; // Darker red\n    });\n    cancelButton.addEventListener('mouseup', () => {\n      cancelButton.style.backgroundColor = '#f44336';\n    });\n\n    modal.appendChild(message);\n    modal.appendChild(input);\n    modal.appendChild(submitButton);\n    modal.appendChild(cancelButton);\n    document.body.appendChild(overlay);\n    document.body.appendChild(modal);\n\n    // Event listeners\n    submitButton.addEventListener('click', () => {\n      const password = input.value;\n      if (password !== \"iplon321\") {\n        context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n        return;\n      } else {\n        // Password is correct; proceed with your logic\n        console.log(\"Password accepted!\");\n        // Clean up\n        document.body.removeChild(modal);\n        document.body.removeChild(overlay);\n        callback(); // Call the next function to execute after password validation\n      }\n    });\n    input.addEventListener('keydown', (event) => {\n      if (event.key === 'Enter') {\n        submitButton.click(); // Trigger the submit button click\n      }\n      if (event.key === 'Escape') {\n        cancelButton.click(); // Trigger the cancel button click\n      }\n    });\n    cancelButton.addEventListener('click', () => {\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n    });\n  }\n\n  function sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n    if (index >= urls.length) {\n      resultFlags[label] = false;\n      doneCallback();\n      return;\n    }\n\n    fetch(urls[index], {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(body),\n    })\n      .then((res) => {\n        if (res.ok) {\n          resultFlags[label] = true;\n          doneCallback();\n        } else {\n          // Try next IP\n          sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n        }\n      })\n      .catch(() => {\n        // Try next IP on error\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      });\n  }\n\n  function showFinalNotification(flags) {\n    const p = flags[\"Primary\"];\n    const s = flags[\"Secondary\"];\n\n    if (p && s) {\n      context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n    } else if (p) {\n      context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n    } else if (s) {\n      context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n    } else {\n      context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n    }\n  }\n\n  function sendRequests() {\n    const time = new Date().getTime();\n\n    context.panel.options.elements.forEach((element) => {\n      const body1 = {};\n      const idParts = element.id.split(\",\");\n\n      body1[\"time\"] = time;\n      body1[\"source\"] = idParts[0];\n      body1[\"user\"] = idParts[2];\n      body1[\"mode\"] = idParts[4];\n      body1[\"id\"] = parseInt(idParts[1]);\n      body1[\"val\"] = parseFloat(element.value);\n      body1[\"control\"] = idParts[3];\n      body1[\"tag_name\"] = idParts[5];\n      body1[\"type\"] = idParts[6];\n      body1[\"server\"] = idParts[7];\n\n      const token = \"your_token_here\"; // Replace with actual token\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        \"PRIVATE-TOKEN\": token,\n      };\n\n      const resultFlags = { Primary: false, Secondary: false };\n      let callbackCount = 0;\n\n      function onComplete() {\n        callbackCount++;\n        if (callbackCount === 2) {\n          showFinalNotification(resultFlags);\n        }\n      }\n\n      const url1List = [\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n      ];\n\n      const url2List = [\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n        \"http://192.168.87.82:1880/endpoint/grafana\",\n      ];\n\n      sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n      sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n    });\n  }\n\n  showPasswordPrompt(sendRequests);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "QAC",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "QAC_ON_OFF"
            }
          ]
        },
        {
          "alias": "UAC",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "UAC_ON_OFF"
            }
          ]
        },
        {
          "alias": "PF",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PF_ON_OFF"
            }
          ]
        },
        {
          "alias": "VRT",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "D",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "VRT_ON_OFF"
            }
          ]
        },
        {
          "alias": "SVG",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "E",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "SVG_ON_OFF"
            }
          ]
        },
        {
          "alias": "$tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "F",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "UI"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PL_ON_OFF"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "CONTROL SETPOINTS",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 10
      },
      "id": 40,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "titleSize": 40,
          "valueSize": 20
        },
        "textMode": "name",
        "wideLayout": true
      },
      "pluginVersion": "11.0.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "hide": false,
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 0,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 57,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});\n",
        "elements": [
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13058,iplon,Line,PAC_PC_RX,GRID_PAC_SET,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [],
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "GRID PAC SET",
            "tooltip": "ACTIVE POWER CONTROL SET POINT",
            "type": "number",
            "uid": "f28d0d7f-7a08-4bf5-8291-75c96f43f2c0",
            "unit": "Write",
            "value": 50,
            "width": 15
          },
          {
            "allowCustomValue": false,
            "helpers": {},
            "id": "grid_pac",
            "labelWidth": 20,
            "options": [],
            "optionsSource": "Custom",
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "",
            "tooltip": "",
            "type": "disabled",
            "uid": "582cf1e8-378e-4b84-810f-d4ea01e2a74f",
            "unit": "Read",
            "value": 20,
            "width": 15
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "process",
          "text": "Reset",
          "variant": "custom"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "data",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PAC_PC_RX"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "ACTIVE POWER CONTROL",
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 5,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 58,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13030,iplon,Line,FAC_PC_RX,GRID_FAC_SET,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [],
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "GRID FAC SET",
            "tooltip": "FREQUENCY POWER CONTROL SET POINT",
            "type": "number",
            "uid": "f28d0d7f-7a08-4bf5-8291-75c96f43f2c0",
            "unit": "Write",
            "value": 50,
            "width": 15
          },
          {
            "allowCustomValue": false,
            "helpers": {},
            "id": "grid_fac",
            "labelWidth": 20,
            "options": [],
            "optionsSource": "Custom",
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "",
            "tooltip": "",
            "type": "disabled",
            "uid": "74b077cf-652c-4b54-a354-4b26ea32cd34",
            "unit": "Read",
            "value": 876,
            "width": 15
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "process",
          "text": "Reset",
          "variant": "custom"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "data",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "FAC_PC_RX"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "FREQUENCY  CONTROL",
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 10,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 59,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13090,iplon,Line,QAC_PC_RX,GRID_QAC_SET,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [],
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "GRID QAC SET",
            "tooltip": "SVG SLOT 1  CONTROL SET POINT",
            "type": "number",
            "uid": "f28d0d7f-7a08-4bf5-8291-75c96f43f2c0",
            "unit": "Write",
            "value": 0,
            "width": 15
          },
          {
            "allowCustomValue": false,
            "helpers": {},
            "id": "grid_qac",
            "labelWidth": 20,
            "options": [],
            "optionsSource": "Custom",
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "",
            "tooltip": "",
            "type": "disabled",
            "uid": "44962a88-481e-4c72-8d27-63f521ecb71a",
            "unit": "Read",
            "value": -4,
            "width": 15
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "process",
          "text": "Reset",
          "variant": "custom"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "data",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "QAC_PC_RX"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "REACTIVE POWER CONTROL",
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 15,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 60,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13130,iplon,Line,UAC_PC_RX,GRID_UAC_SET,ClosedLoop,primary",
            "labelWidth": 20,
            "options": [],
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "GRID UAC SET",
            "tooltip": "VOLTAGE POWER CONTROL SET POINT",
            "type": "number",
            "uid": "f28d0d7f-7a08-4bf5-8291-75c96f43f2c0",
            "unit": "Write",
            "value": 7654,
            "width": 15
          },
          {
            "allowCustomValue": false,
            "id": "grid_uac",
            "labelWidth": 20,
            "options": [],
            "optionsSource": "Custom",
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "",
            "tooltip": "",
            "type": "disabled",
            "uid": "2e4b4439-2b30-4a26-b2c4-ba8561735e76",
            "unit": "Read",
            "value": 132,
            "width": 15
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "process",
          "text": "Reset",
          "variant": "custom"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "data",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "UAC_PC_RX"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": " VOLTAGE CONTROL",
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 61,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13071,iplon,Line,PF_PC_RX,GRID_PF_SET,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [],
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "GRID PF SET",
            "tooltip": " POWER FACTOR CONTROL SET POINT",
            "type": "number",
            "uid": "f28d0d7f-7a08-4bf5-8291-75c96f43f2c0",
            "unit": "Write",
            "value": 1,
            "width": 15
          },
          {
            "allowCustomValue": false,
            "id": "grid_pf",
            "labelWidth": 15,
            "options": [],
            "optionsSource": "Custom",
            "queryField": {
              "label": "A:data",
              "refId": "A",
              "value": "data"
            },
            "section": "",
            "title": "",
            "tooltip": "",
            "type": "disabled",
            "uid": "e0c0d473-49de-4b3e-8736-156087ec125a",
            "unit": "Read",
            "value": "",
            "width": 15
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "process",
          "text": "Reset",
          "variant": "custom"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "data",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "MCR"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "PF_PC_RX"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=",
              "value": "SETPOINT"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": " POWER FACTOR CONTROL",
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "INVERTER ON/OFF CONTROL",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 16
      },
      "id": 66,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "titleSize": 40,
          "valueSize": 20
        },
        "textMode": "name",
        "wideLayout": true
      },
      "pluginVersion": "11.0.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "hide": false,
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 17
      },
      "hideTimeOverride": true,
      "id": 70,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B01.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B01_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B01.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B01_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-01",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 17
      },
      "hideTimeOverride": true,
      "id": 76,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B02.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B02_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B02.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B02_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-02",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 17
      },
      "hideTimeOverride": true,
      "id": 77,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B03.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B03_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B03.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B03_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-03",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 17
      },
      "hideTimeOverride": true,
      "id": 78,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B04.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B04_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B04.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B04_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-04",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 17
      },
      "hideTimeOverride": true,
      "id": 79,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B05.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B05_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B05.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B05_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-05",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 22
      },
      "hideTimeOverride": true,
      "id": 75,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B06.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B06_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B06.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B06_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-06",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 22
      },
      "hideTimeOverride": true,
      "id": 81,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B07.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B07_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B07.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B07_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-07",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 22
      },
      "hideTimeOverride": true,
      "id": 82,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B08.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B08_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B08.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B08_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-08",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 22
      },
      "hideTimeOverride": true,
      "id": 83,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B09.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B09_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B09.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B09_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-09",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 22
      },
      "hideTimeOverride": true,
      "id": 84,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B10.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B10_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B10.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B10_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-10",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 27
      },
      "hideTimeOverride": true,
      "id": 80,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B11.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B11_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B11.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B11_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-11",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 27
      },
      "hideTimeOverride": true,
      "id": 86,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B12.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B12_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B12.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B12_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-12",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 27
      },
      "hideTimeOverride": true,
      "id": 87,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B13.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B13_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B13.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B13_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-13",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 27
      },
      "hideTimeOverride": true,
      "id": 88,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B14.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B14_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B14.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B14_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-14",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 27
      },
      "hideTimeOverride": true,
      "id": 89,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B15.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B15_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B15.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B15_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-15",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 32
      },
      "hideTimeOverride": true,
      "id": 85,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B16.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B16_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B16.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B16_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-16",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 32
      },
      "hideTimeOverride": true,
      "id": 91,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B17.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B17_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B17.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B17_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-17",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 32
      },
      "hideTimeOverride": true,
      "id": 92,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B18.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B18_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B18.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B18_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-18",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 32
      },
      "hideTimeOverride": true,
      "id": 93,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B19.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B19_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B19.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B19_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-19",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 32
      },
      "hideTimeOverride": true,
      "id": 94,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B20.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B20_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B20.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B20_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-20",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 37
      },
      "hideTimeOverride": true,
      "id": 90,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B21.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B21_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B21.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B21_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-21",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 37
      },
      "hideTimeOverride": true,
      "id": 96,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B22.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B22_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B22.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B22_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-22",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 37
      },
      "hideTimeOverride": true,
      "id": 97,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B23.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B23_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B23.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B23_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-23",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 37
      },
      "hideTimeOverride": true,
      "id": 98,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B24.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B24_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B24.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B24_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-24",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 37
      },
      "hideTimeOverride": true,
      "id": 99,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B25.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B25_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B25.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B25_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-25",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 42
      },
      "hideTimeOverride": true,
      "id": 95,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B26.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B26_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B26.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B26_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-26",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 42
      },
      "hideTimeOverride": true,
      "id": 101,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B27.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B27_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B27.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B27_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-27",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 42
      },
      "hideTimeOverride": true,
      "id": 102,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B28.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B28_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B28.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B28_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-28",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 42
      },
      "hideTimeOverride": true,
      "id": 103,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B29.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B29_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B29.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B29_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-29",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 42
      },
      "hideTimeOverride": true,
      "id": 104,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B30.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B30_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B30.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B30_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-30",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 47
      },
      "hideTimeOverride": true,
      "id": 100,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13056,iplon,Line,RM_COMM.B31.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B31_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "helpers": {},
            "id": "grafana,13028,iplon,Line,RM_COMM.B31.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B31_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-31",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 47
      },
      "hideTimeOverride": true,
      "id": 105,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B32.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B32_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B32.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B32_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-32",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 47
      },
      "hideTimeOverride": true,
      "id": 106,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B33.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B33_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B33.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B33_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-33",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 47
      },
      "hideTimeOverride": true,
      "id": 107,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B34.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B34_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B34.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B34_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-34",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 47
      },
      "hideTimeOverride": true,
      "id": 108,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B35.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B35_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B35.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B35_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-35",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 52
      },
      "hideTimeOverride": true,
      "id": 109,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B36.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B36_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B36.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B36_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-36",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 52
      },
      "hideTimeOverride": true,
      "id": 110,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B37.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B37_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B37.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B37_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-37",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 52
      },
      "hideTimeOverride": true,
      "id": 111,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B38.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B38_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B38.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B38_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-38",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 52
      },
      "hideTimeOverride": true,
      "id": 112,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B39.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B39_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B39.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B39_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-39",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 52
      },
      "hideTimeOverride": true,
      "id": 113,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B40.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B40_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B40.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B40_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-40",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 57
      },
      "hideTimeOverride": true,
      "id": 114,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B41.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B41_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B41.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B41_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-41",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 57
      },
      "hideTimeOverride": true,
      "id": 115,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B42.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B42_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B42.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B42_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-42",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 57
      },
      "hideTimeOverride": true,
      "id": 116,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B43.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B43_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B43.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B43_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-43",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 57
      },
      "hideTimeOverride": true,
      "id": 117,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B44.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B44_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B44.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B44_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-44",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 57
      },
      "hideTimeOverride": true,
      "id": 118,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B45.INV02,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B45_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B45.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B45_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-45",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 62
      },
      "hideTimeOverride": true,
      "id": 74,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B46.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B46_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B46.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B46_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-46",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 6,
        "y": 62
      },
      "hideTimeOverride": true,
      "id": 73,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B47.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B47_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B47.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B47_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-47",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 62
      },
      "hideTimeOverride": true,
      "id": 119,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B48.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B48_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B48.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B48_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-48",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 16,
        "y": 62
      },
      "hideTimeOverride": true,
      "id": 72,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B49.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B49_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B49.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B49_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-49",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "ix-lCK3Vz"
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 20,
        "y": 62
      },
      "hideTimeOverride": true,
      "id": 71,
      "options": {
        "buttonGroup": {
          "orientation": "left",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "context.panel.onOptionsChange({\n  ...context.panel.options,\n  elements: context.panel.elements,\n});",
        "elements": [
          {
            "disabled": false,
            "id": "grafana,13056,iplon,Line,RM_COMM.B50.INV01,PAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV01 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV01 RM_COMM"
            },
            "section": "",
            "title": "B50_INV01",
            "tooltip": "",
            "type": "radio",
            "uid": "ad69c9e3-f355-4c54-8e02-e42d6611dbb8",
            "unit": "",
            "value": 1,
            "width": 10
          },
          {
            "disabled": false,
            "id": "grafana,13028,iplon,Line,RM_COMM.B50.INV02,FAC,ClosedLoop,primary",
            "labelWidth": 15,
            "options": [
              {
                "id": "1",
                "label": "ON",
                "type": "number",
                "value": 1
              },
              {
                "id": "0",
                "label": "OFF",
                "type": "number",
                "value": 0
              }
            ],
            "optionsSource": "Custom",
            "queryField": {
              "label": "PAC:B06 INV02 RM_COMM",
              "refId": "PAC",
              "value": "B06 INV02 RM_COMM"
            },
            "section": "",
            "title": "B50_INV02",
            "tooltip": "",
            "type": "radio",
            "uid": "8477fefd-b2c1-4a1d-b588-6f96a92648af",
            "unit": "",
            "value": 1,
            "width": 10
          }
        ],
        "initial": {
          "code": "context.panel.enableSubmit();\n/* Find the series named PL_ON_OFF\nconst series = context.panel.data.series.find(s => s.name === \"F_ON_OFF\");\nconst series1 = context.panel.data.series.find(s => s.name === \"F1_ON_OFF\");\n\n\n// Default to null if not found\nlet feedSt = null;\nlet f1St = null;\n\nif (series && series.fields && series.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  feedSt = series.fields[1].values[0];\n}\nif (series1 && series1.fields && series1.fields.length > 1) {\n  // The actual value is in fields[1].values[0]\n  f1St = series1.fields[1].values[0];\n}\n\nif (feedSt == 1 && f1St == 1) {\n  context.panel.enableSubmit();\n} else {\n  context.panel.disableSubmit();\n}\n*/\n//console.log(\"plant_st\", plantSt)\n// Now you can use plantSt in your logic\n//return plantSt === 1;\n\n//context.panel.enableSubmit();\n",
          "contentType": "application/json",
          "datasource": "ix-lCK3Vz",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 20,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "light-blue",
          "foregroundColor": "#000000",
          "icon": "check-circle",
          "text": "Save",
          "variant": "custom"
        },
        "sync": false,
        "update": {
          "code": "\n// Function to show the password prompt\nfunction showPasswordPrompt(callback) {\n  // Create modal elements\n  const modal = document.createElement('div');\n  const overlay = document.createElement('div');\n  const message = document.createElement('div');\n  const input = document.createElement('input');\n  const submitButton = document.createElement('button');\n  const cancelButton = document.createElement('button');\n\n  // Set attributes and styles\n  modal.style.position = 'fixed';\n  modal.style.left = '50%';\n  modal.style.top = '50%';\n  modal.style.transform = 'translate(-50%, -50%)';\n  modal.style.padding = '20px';\n  modal.style.backgroundColor = 'white';\n  modal.style.zIndex = '1000';\n  modal.style.borderRadius = '8px';\n  modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n\n  overlay.style.position = 'fixed';\n  overlay.style.top = '0';\n  overlay.style.left = '0';\n  overlay.style.width = '100%';\n  overlay.style.height = '100%';\n  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n  overlay.style.zIndex = '999';\n\n  // Message above input\n  message.textContent = 'Please enter the password';\n  message.style.marginBottom = '10px';\n  message.style.fontSize = '16px';\n  message.style.fontWeight = 'bold';\n\n  // Input field\n  input.type = 'password';\n  input.placeholder = 'Enter password';\n  input.style.padding = '10px';\n  input.style.width = '100%';\n  input.style.marginBottom = '10px';\n  input.style.borderRadius = '4px';\n  input.style.border = '1px solid #ccc';\n\n  // Buttons\n  submitButton.textContent = 'Submit';\n  cancelButton.textContent = 'Cancel';\n  [submitButton, cancelButton].forEach(button => {\n    button.style.padding = '10px 20px';\n    button.style.marginRight = '10px';\n    button.style.borderRadius = '4px';\n    button.style.border = 'none';\n    button.style.cursor = 'pointer';\n    button.style.transition = 'background-color 0.3s';\n  });\n\n  // Button styles\n  submitButton.style.backgroundColor = '#4CAF50'; // Green\n  cancelButton.style.backgroundColor = '#f44336'; // Red\n\n  // Change button color on click\n  submitButton.addEventListener('mousedown', () => {\n    submitButton.style.backgroundColor = '#45a049'; // Darker green\n  });\n  submitButton.addEventListener('mouseup', () => {\n    submitButton.style.backgroundColor = '#4CAF50';\n  });\n\n  cancelButton.addEventListener('mousedown', () => {\n    cancelButton.style.backgroundColor = '#e53935'; // Darker red\n  });\n  cancelButton.addEventListener('mouseup', () => {\n    cancelButton.style.backgroundColor = '#f44336';\n  });\n\n  modal.appendChild(message);\n  modal.appendChild(input);\n  modal.appendChild(submitButton);\n  modal.appendChild(cancelButton);\n  document.body.appendChild(overlay);\n  document.body.appendChild(modal);\n\n  // Event listeners\n  submitButton.addEventListener('click', () => {\n    const password = input.value;\n    if (password !== \"iplon321\") {\n      context.grafana.notifyError([\"Error\", \"Incorrect password. Update not allowed.\"]);\n      return;\n    } else {\n      // Password is correct; proceed with your logic\n      console.log(\"Password accepted!\");\n      // Clean up\n      document.body.removeChild(modal);\n      document.body.removeChild(overlay);\n      callback(); // Call the next function to execute after password validation\n    }\n  });\n  input.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      submitButton.click(); // Trigger the submit button click\n    }\n    if (event.key === 'Escape') {\n      cancelButton.click(); // Trigger the cancel button click\n    }\n  });\n  cancelButton.addEventListener('click', () => {\n    // Clean up\n    document.body.removeChild(modal);\n    document.body.removeChild(overlay);\n  });\n}\n\n\n\nfunction sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index = 0) {\n  if (index >= urls.length) {\n    resultFlags[label] = false;\n    doneCallback();\n    return;\n  }\n\n  fetch(urls[index], {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (res.ok) {\n        resultFlags[label] = true;\n        doneCallback();\n      } else {\n        // Try next IP\n        sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n      }\n    })\n    .catch(() => {\n      // Try next IP on error\n      sendToFirstResponsiveIP(body, urls, headers, label, resultFlags, doneCallback, index + 1);\n    });\n}\n\nfunction showFinalNotification(flags) {\n  const p = flags[\"Primary\"];\n  const s = flags[\"Secondary\"];\n\n  if (p && s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary and Secondary\"]);\n  } else if (p) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Primary only\"]);\n  } else if (s) {\n    context.grafana.notifySuccess([\"Update\", \"Successfully sent to Secondary only\"]);\n  } else {\n    context.grafana.notifyError([\"Error\", \"Failed to send to both Primary and Secondary\"]);\n  }\n}\n\nfunction sendRequests() {\n  const time = new Date().getTime();\n\n  context.panel.options.elements.forEach((element) => {\n    const body1 = {};\n    const idParts = element.id.split(\",\");\n\n    body1[\"time\"] = time;\n    body1[\"source\"] = idParts[0];\n    body1[\"user\"] = idParts[2];\n    body1[\"mode\"] = idParts[4];\n    body1[\"id\"] = parseInt(idParts[1]);\n    body1[\"val\"] = parseFloat(element.value);\n    body1[\"control\"] = idParts[3];\n    body1[\"tag_name\"] = idParts[5];\n    body1[\"type\"] = idParts[6];\n    body1[\"server\"] = idParts[7];\n\n    const token = \"your_token_here\"; // Replace with actual token\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"PRIVATE-TOKEN\": token,\n    };\n\n    const resultFlags = { Primary: false, Secondary: false };\n    let callbackCount = 0;\n\n    function onComplete() {\n      callbackCount++;\n      if (callbackCount === 2) {\n        showFinalNotification(resultFlags);\n      }\n    }\n\n    const url1List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];\n\n    /*const url2List = [\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n      \"http://192.168.87.82:1880/endpoint/grafana\",\n    ];*/\n\n    sendToFirstResponsiveIP(body1, url1List, headers, \"Primary\", resultFlags, onComplete);\n    //sendToFirstResponsiveIP(body1, url2List, headers, \"Secondary\", resultFlags, onComplete);\n  });\n}\n\nshowPasswordPrompt(sendRequests);",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "manual"
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "alias": "$tag_b $tag_d $tag_f",
          "datasource": {
            "type": "influxdb",
            "uid": "ee1j2rhfotdz4e"
          },
          "groupBy": [
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "b::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "d::tag"
              ],
              "type": "tag"
            },
            {
              "params": [
                "f::tag"
              ],
              "type": "tag"
            }
          ],
          "hide": true,
          "measurement": "v",
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "PAC",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "p::tag",
              "operator": "=",
              "value": "Truboard"
            },
            {
              "condition": "AND",
              "key": "b::tag",
              "operator": "=",
              "value": "B31"
            },
            {
              "condition": "AND",
              "key": "d::tag",
              "operator": "=~",
              "value": "/.*./"
            },
            {
              "condition": "AND",
              "key": "f::tag",
              "operator": "=",
              "value": "select tag value"
            }
          ]
        }
      ],
      "timeFrom": "0y/y",
      "title": "BLOCK-50",
      "transformations": [
        {
          "disabled": true,
          "id": "merge",
          "options": {}
        },
        {
          "disabled": true,
          "id": "joinByField",
          "options": {}
        }
      ],
      "transparent": true,
      "type": "volkovlabs-form-panel"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 39,
  "tags": [
    "ppc1"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "05.Dynamic Control",
          "value": "05.Dynamic Control"
        },
        "hide": 2,
        "includeAll": false,
        "label": "Screen",
        "multi": false,
        "name": "Screen",
        "options": [
          {
            "selected": false,
            "text": "01.Plant_Overview",
            "value": "01.Plant_Overview"
          },
          {
            "selected": false,
            "text": "02.Setpoints_Overview",
            "value": "02.Setpoints_Overview"
          },
          {
            "selected": false,
            "text": "03.Control_Trends",
            "value": "03.Control_Trends"
          },
          {
            "selected": false,
            "text": "04.Power_Control_Settings",
            "value": "04.Power_Control_Settings"
          },
          {
            "selected": false,
            "text": "05.Dynamic_Control",
            "value": "05.Dynamic_Control"
          }
        ],
        "query": "01.Plant_Overview,02.Setpoints_Overview,03.Control_Trends,04.Power_Control_Settings,05.Dynamic_Control",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "isNone": true,
          "selected": false,
          "text": "None",
          "value": ""
        },
        "datasource": {
          "type": "yesoreyeram-infinity-datasource",
          "uid": "eeql8uq08xkw0a"
        },
        "definition": "yesoreyeram-infinity-datasource- (infinity) csv",
        "hide": 2,
        "includeAll": false,
        "label": "dashid",
        "multi": false,
        "name": "dashid",
        "options": [],
        "query": {
          "infinityQuery": {
            "columns": [],
            "data": "screen,dashid\n01.Plant_Overview,feh6mk7culyiof\n02.Setpoints_Overview,feh6b0yyu9mgwc\n03.Control_Trends,ee3bry5jez5dsa\n04.Power_Control_Settings,aehoev5g87uv4d\n05.Dynamic_Control,bdz1ifxc3h0jka",
            "filters": [],
            "format": "table",
            "parser": "uql",
            "refId": "variable",
            "root_selector": "",
            "source": "inline",
            "type": "csv",
            "uql": "parse-csv\n| where \"screen\" == '$Screen'\n| project \"dashid\" ",
            "url": "",
            "url_options": {
              "data": "",
              "method": "GET"
            }
          },
          "query": "",
          "queryType": "infinity"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "hide": 2,
        "includeAll": true,
        "label": "FIELD",
        "multi": false,
        "name": "act",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "ACTIVE_POWER",
            "value": "ACTIVE_POWER"
          },
          {
            "selected": false,
            "text": "FREQUENCY",
            "value": "FREQUENCY"
          }
        ],
        "query": "ACTIVE_POWER,FREQUENCY",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now/d",
    "to": "now/d"
  },
  "timeRangeUpdatedDuringEditOrView": false,
  "timepicker": {},
  "timezone": "browser",
  "title": "05.Dynamic Control",
  "uid": "bdz1ifxc3h0jka",
  "version": 64,
  "weekStart": ""
}