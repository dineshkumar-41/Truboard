[
    {
        "id": "1b09e6f66e3e08e7",
        "type": "tab",
        "label": "Engine_3 - TR_3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "218248942407c29a",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc7021b6e14a6496",
        "type": "tab",
        "label": "Influx",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f7deaf97a6ddfc85",
        "type": "tab",
        "label": "Influx",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e5f15136f28abf49",
        "type": "group",
        "z": "218248942407c29a",
        "name": "MQTT SEND",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fd92247130b88cc3",
            "e49daaa61deabaf9",
            "d41d5b7390d59fd2",
            "54d9750c22bfe598"
        ],
        "x": 794,
        "y": 639,
        "w": 632,
        "h": 142
    },
    {
        "id": "3cc02013749296b6",
        "type": "group",
        "z": "218248942407c29a",
        "name": "MQTT_RECIEVE",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b77cf9d090968660",
            "816344a16ff639d0",
            "4dd8c0bf9ebdce9f",
            "4049f866849855a1",
            "4e40373eead0aea1",
            "5d397aefcc5d60cd",
            "16fda522619dd6da",
            "5c5bdda363adbe24",
            "dc911f60ce19d62e"
        ],
        "x": 794,
        "y": 799,
        "w": 512,
        "h": 302
    },
    {
        "id": "0b44583fe815f412",
        "type": "group",
        "z": "218248942407c29a",
        "name": "MQTT_REC",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "06838ca4ecc805a4",
            "5a169ba3e4a317bb",
            "6d1da05cbbcfa8ee",
            "af79c49e46a0a514",
            "641dcc8a2eda7aef",
            "3ce5c8a0fadc9f91"
        ],
        "x": 114,
        "y": 639,
        "w": 632,
        "h": 162
    },
    {
        "id": "8a8e68d8fde2a0ee",
        "type": "group",
        "z": "218248942407c29a",
        "name": "MQTT_REC_FOR_REMOTE ON/OFF",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "fill-opacity": "0.8",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a48fbbafe71a3c78",
            "c5025979c95d8993",
            "f2ed2bcee2b26bd9"
        ],
        "x": 114,
        "y": 859,
        "w": 592,
        "h": 102
    },
    {
        "id": "93d09c30c69e874a",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "696aad116011f9f1",
                "042a4deba70a4ec4",
                "b2cfe5c30667ab5c",
                "f5567c291e1d73d7",
                "fdd8d8ce26cac96c",
                "a91f5890797a602b",
                "86cabf56a4aa6033",
                "7cbefe44c4e69ab0",
                "38f6587deaaa6a3b",
                "39424c2dad8e50a7"
            ]
        ]
    },
    {
        "id": "9c9efb53c4986cd5",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 400,
        "y": 940,
        "wires": [
            [
                "24775a11dff3efcb",
                "c3cf3828a6ae42ec",
                "8f4150e371320938",
                "9d040d2996189335",
                "9545f441ac1c095f",
                "e13fb71fc55e1244",
                "2e127B4623904cfd",
                "271f3b6d7a86c0c7",
                "ea829087784e2042",
                "679687116577ce90"
            ]
        ]
    },
    {
        "id": "34e7019dbB39ca1c",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "514a38cc0f154140"
            ]
        ]
    },
    {
        "id": "f4eda9c7cbc80927",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 1000,
        "y": 940,
        "wires": [
            [
                "514a38cc0f154140"
            ]
        ]
    },
    {
        "id": "514a38cc0f154140",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 1040,
        "y": 640,
        "wires": [
            [
                "caa34a6ce5c070c3"
            ]
        ]
    },
    {
        "id": "4d2974c4dc374531",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 340,
        "y": 640,
        "wires": [
            [
                "9c9efb53c4986cd5",
                "93d09c30c69e874a"
            ]
        ]
    },
    {
        "id": "5704384bfb18daea",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 1960,
        "y": 640,
        "wires": [
            [
                "c74a16f7f582150e",
                "29e95ea1a184faa9",
                "2f735a3b4d20acb4",
                "cd02971ab6ff38aa",
                "e38a2db92da97149",
                "45811681e89fcc80",
                "0f39b2f05f59658a",
                "78ef2a0892641806",
                "a60297c9f60eb59e",
                "967210e271089726",
                "65be42d77ab6465e",
                "cd5572f07eed81bb",
                "332bf4a9a8c9b96e"
            ]
        ]
    },
    {
        "id": "e444bc462016e753",
        "type": "junction",
        "z": "bc7021b6e14a6496",
        "x": 2560,
        "y": 640,
        "wires": [
            [
                "04e3954f27f6d608"
            ]
        ]
    },
    {
        "id": "a5a7c212af7fc747",
        "type": "junction",
        "z": "1b09e6f66e3e08e7",
        "x": 600,
        "y": 1020,
        "wires": [
            [
                "4ddfd740e3092826",
                "36e6ac52c83795ce",
                "f28c02c522aa9308",
                "aba86abebd4adac5",
                "215df759d9f7a44e",
                "d5c3fca18936a073",
                "870bd50960b346dd",
                "1f4c5cba915430cc",
                "38160e5bdc481f4c",
                "2b19413fe1fa496d",
                "a2fdc0cf808fa075",
                "09907fd5ad6b36df",
                "8c180135f3763a5f",
                "6dca2287dd30b3ab",
                "d2117018e98512c0",
                "4b4808b0c8ae8f40",
                "48f5afa88cc4b545",
                "4cd55d9552f1e158",
                "cd2f25685a2490c8",
                "aad6023e637ed53f",
                "4b9dbaa675b96f44",
                "60f9eef0254fabff",
                "eaf6ed79b6f6e2fa",
                "949d28afe925d1fd"
            ]
        ]
    },
    {
        "id": "e8ba155e871aa3a2",
        "type": "junction",
        "z": "1b09e6f66e3e08e7",
        "x": 2100,
        "y": 1200,
        "wires": [
            [
                "b5cf33a9b96d823d",
                "146499f6134418bf",
                "773dd5fe9e1bbfd3",
                "075c82e85dc2da77",
                "b844414bcaff28ba",
                "2626ef1e6333626f",
                "69f1579f1f44f6bc",
                "dd54c293c6bb76ca",
                "32c2171aa5edd906",
                "640a481a342f1b5f",
                "1d3bb32133bf2f5e",
                "8fd4a793542df169",
                "6ffcfe2ae301bce3",
                "4382d37f51c7804b",
                "9ee876c8a77bfed3",
                "e92188067e48db0f",
                "b3be88b7d722da5e",
                "7039833ccd473066",
                "3b3cbdc3e0aeb9c2",
                "20213c4575ac2c97",
                "2b6888165bf1f9f4",
                "f70e6e03003a9693",
                "e8644d80534e1675",
                "5707e743a5008ef0",
                "819d732016353a69",
                "f01b9ce9ca43348c",
                "b84c7cecf32a6113",
                "dbcd51a4057f5ce8"
            ]
        ]
    },
    {
        "id": "3ad11e8763a1a678",
        "type": "junction",
        "z": "1b09e6f66e3e08e7",
        "x": 3820,
        "y": 840,
        "wires": [
            [
                "5bfd4e3a42795e50",
                "426e40d7a1aac700",
                "f3de82ed6fbb59b4",
                "75d594395c36e6bc",
                "33596bdcda33f137",
                "1097b5dbd5ba06eb",
                "04f611ecf0aa9aa4",
                "aa6ba65c8ce21d99",
                "2486a74ad1433c9d",
                "07617c85bd9aadbe",
                "c241f6918ed881fa",
                "22d8221df85062d3"
            ]
        ]
    },
    {
        "id": "f29adc2e5ea4d1dd",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "19ae032e9db68acd",
                "80d7b6f1bb0214ae",
                "ce4fac557d780717",
                "0ea2462dff632307",
                "4ddeca03fbaed395",
                "a80c33494d53293c",
                "420a275e068685a5",
                "cf8961a1917cdec1",
                "6b7b8f18956073e2",
                "6b5dffe622fe7eda"
            ]
        ]
    },
    {
        "id": "6c5c09b91a099293",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 400,
        "y": 940,
        "wires": [
            [
                "2b698ddfec32d914",
                "66063c9ab99ae1c1",
                "6206e0d760e9ba71",
                "428ff067773ea2b4",
                "4b4e49642c6f2547",
                "3816075f07eaf52b",
                "59cc5cce151d0a09",
                "9df11704a452dc00",
                "8b96973047b725ba",
                "b8f0e2d51e8d29c5"
            ]
        ]
    },
    {
        "id": "a32907b4de84931a",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "ff74991510682359"
            ]
        ]
    },
    {
        "id": "b041bf94aeaf08c5",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 1000,
        "y": 940,
        "wires": [
            [
                "ff74991510682359"
            ]
        ]
    },
    {
        "id": "ff74991510682359",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 1040,
        "y": 640,
        "wires": [
            [
                "bf27accb05a65c6f"
            ]
        ]
    },
    {
        "id": "09a3a5cfeff3c5f6",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 340,
        "y": 640,
        "wires": [
            [
                "6c5c09b91a099293",
                "f29adc2e5ea4d1dd"
            ]
        ]
    },
    {
        "id": "861691a83c785e52",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 1960,
        "y": 640,
        "wires": [
            [
                "7ff74a0db3e6f702",
                "826003ea82899b8e",
                "c835a10417477ca4",
                "3cbf4912ad3cd3e9",
                "a3e896cf6191b712",
                "ea6aac965eb68f1f",
                "3e866dffee483ed2",
                "330197afcd611ef2",
                "95d70698c92e90dc",
                "48a8611fc2cac299",
                "c7aaa01634be0962",
                "aa66d8bddf5371c8",
                "445b7b515d638ec4"
            ]
        ]
    },
    {
        "id": "026fbc6f57ee8022",
        "type": "junction",
        "z": "f7deaf97a6ddfc85",
        "x": 2560,
        "y": 640,
        "wires": [
            [
                "2db59751a4a5dccf"
            ]
        ]
    },
    {
        "id": "f7dc57f35fcfe8fe",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.87.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bf5ddb6c5930fafc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.87.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ea571d30B431616d",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.87.82:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "ac611ee86f460fdc",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.37.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "69fbc96af617b30d",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.37.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6871b8eb91ce50f4",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.38.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d7e7d590882ae241",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.38.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8d25f86a95a11ae3",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.39.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "bbe2eeb0728aa649",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.39.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "11b88ae7e14854d8",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.40.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "428e792a92b49bb9",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.40.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9c5e63afaba32b18",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.45.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "848352eed0bb6714",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.45.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a2af61a62e9c2381",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.46.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8e683c5aa1cbb188",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.46.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b93ae0872eecb691",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.35.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e58bb4c487f589bb",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.35.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6e2b19b950dc91c6",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.36.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e9f6b2e26f43f738",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.36.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c5d8e4cee8fa1272",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.43.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9143e81503701e03",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.43.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f857b06a5f014dc9",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.31.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a798d5537ac3ee0d",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.31.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d2842d2e0af08f91",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.27.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fc3c38f12929236d",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.27.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "33a7ddb399478543",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.28.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1a75dc9caae1a211",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.28.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4cdb061bf9cb68fb",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.28.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "186bf1649bccc0b7",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.29.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "7b602240683ad76c",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.30.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b52494297d04582c",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.30.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "9e0aa95118efcf29",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.32.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "519bd18dc5c29146",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.32.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3aad9653b352efa1",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.34.2",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1f4569bc1a118d13",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.34.3",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": "50",
        "clientTimeout": "2000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "200",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4012a214602a528a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "103c1873bf28b04c",
        "type": "catch",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1160,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "513b0880b294df70",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 37 - INV 01",
        "info": "",
        "x": 640,
        "y": 180,
        "wires": []
    },
    {
        "id": "7e6d9ec3b5fb9688",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 37 - INV 02",
        "info": "",
        "x": 640,
        "y": 320,
        "wires": []
    },
    {
        "id": "f526ead21157a84c",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 38 - INV 01",
        "info": "",
        "x": 640,
        "y": 460,
        "wires": []
    },
    {
        "id": "2d575eadf9414f93",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 38 - INV 02",
        "info": "",
        "x": 640,
        "y": 600,
        "wires": []
    },
    {
        "id": "2ca2955f5f22a0c3",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 40 - INV 01",
        "info": "",
        "x": 760,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9283f416405292b6",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 40 - INV 02",
        "info": "",
        "x": 640,
        "y": 1160,
        "wires": []
    },
    {
        "id": "6c397eea2eee87f9",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Engine 03- Block 45 - INV 01",
        "info": "",
        "x": 640,
        "y": 1300,
        "wires": []
    },
    {
        "id": "a7427dd9285c5abc",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Engine 03- Block 45 - INV 02",
        "info": "",
        "x": 640,
        "y": 1440,
        "wires": []
    },
    {
        "id": "9fee5872909e20fe",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 46 - INV 01",
        "info": "",
        "x": 640,
        "y": 1580,
        "wires": []
    },
    {
        "id": "d8545525c8364f01",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 46 - INV 02",
        "info": "",
        "x": 640,
        "y": 1720,
        "wires": []
    },
    {
        "id": "f4d2c4a3a8608edf",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 35 - INV 02",
        "info": "",
        "x": 2160,
        "y": 360,
        "wires": []
    },
    {
        "id": "c3011bd33dd3fab5",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 36 - INV 01",
        "info": "",
        "x": 2160,
        "y": 500,
        "wires": []
    },
    {
        "id": "cb7364435f1f9941",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 36- INV 02",
        "info": "",
        "x": 2160,
        "y": 640,
        "wires": []
    },
    {
        "id": "7ab61ad810f2c94e",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 43 - INV 01",
        "info": "",
        "x": 2160,
        "y": 780,
        "wires": []
    },
    {
        "id": "7683c1718a2ea0e4",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 43 - INV 02",
        "info": "",
        "x": 2160,
        "y": 920,
        "wires": []
    },
    {
        "id": "7f55a3043ea15258",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 31 - INV 01",
        "info": "",
        "x": 2160,
        "y": 1060,
        "wires": []
    },
    {
        "id": "05d55c5a16fa2b76",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 31 - INV 02",
        "info": "",
        "x": 2300,
        "y": 1200,
        "wires": []
    },
    {
        "id": "45a89e60f3bc0759",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 27 - INV 01",
        "info": "",
        "x": 2160,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f7d80250a6aa59e5",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 27 - INV 02",
        "info": "",
        "x": 2160,
        "y": 1480,
        "wires": []
    },
    {
        "id": "6481f09edba1c604",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 28 - INV 01",
        "info": "",
        "x": 2160,
        "y": 1620,
        "wires": []
    },
    {
        "id": "5400351a5a07f9c2",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 28 - INV 02",
        "info": "",
        "x": 2160,
        "y": 1760,
        "wires": []
    },
    {
        "id": "d1553ff4cc4b9862",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Engine 03- Block 29 - INV 01",
        "info": "",
        "x": 2160,
        "y": 1900,
        "wires": []
    },
    {
        "id": "8af314c7427303b3",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 29- INV 02",
        "info": "",
        "x": 2160,
        "y": 2060,
        "wires": []
    },
    {
        "id": "209beca5a24f3f96",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 30 - INV 01",
        "info": "",
        "x": 3860,
        "y": 420,
        "wires": []
    },
    {
        "id": "37d621b6132faa81",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 30 - INV 02",
        "info": "",
        "x": 3860,
        "y": 560,
        "wires": []
    },
    {
        "id": "3251d51d5f6c4123",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 32 - INV 01",
        "info": "",
        "x": 3860,
        "y": 700,
        "wires": []
    },
    {
        "id": "7fe2735703f2f10c",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Engine 03- Block 32 - INV 02",
        "info": "",
        "x": 4000,
        "y": 840,
        "wires": []
    },
    {
        "id": "d119c90329d356e9",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 34 - INV 01",
        "info": "",
        "x": 3860,
        "y": 980,
        "wires": []
    },
    {
        "id": "03e897cfd6d5d394",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Engine 03- Block 34 - INV 02",
        "info": "",
        "x": 3860,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2d86004730755b3d",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Block 3 refernce ICR",
        "info": "",
        "x": 590,
        "y": 120,
        "wires": []
    },
    {
        "id": "99b7992a344dd0c1",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 35 - INV 01",
        "info": "",
        "x": 2160,
        "y": 220,
        "wires": []
    },
    {
        "id": "9a84d0561f0452bf",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 260,
        "wires": [
            [
                "89de16ab318cf60d"
            ]
        ]
    },
    {
        "id": "c745a9b873acd92f",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 280,
        "wires": [
            [
                "9952658fe4a65cf7"
            ]
        ]
    },
    {
        "id": "faa5b99742523b77",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 280,
        "wires": [
            [
                "c745a9b873acd92f"
            ]
        ]
    },
    {
        "id": "36e6ac52c83795ce",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 280,
        "wires": [
            [
                "faa5b99742523b77"
            ]
        ]
    },
    {
        "id": "6395eab05b1efd02",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 260,
        "wires": [
            [
                "9a84d0561f0452bf"
            ]
        ]
    },
    {
        "id": "9952658fe4a65cf7",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "ac611ee86f460fdc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 280,
        "wires": [
            [
                "6395eab05b1efd02"
            ],
            []
        ]
    },
    {
        "id": "89de16ab318cf60d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0f630983765583c9",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "c60f60955e2798de"
            ]
        ]
    },
    {
        "id": "4ddfd740e3092826",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B37,BLOCK-37,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "0f630983765583c9"
            ]
        ]
    },
    {
        "id": "c60f60955e2798de",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 220,
        "wires": [
            [
                "86b843dc10eb1ed0"
            ]
        ]
    },
    {
        "id": "86b843dc10eb1ed0",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 220,
        "wires": [
            [
                "f923f2b294430591",
                "9952658fe4a65cf7"
            ]
        ]
    },
    {
        "id": "f923f2b294430591",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2933",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 220,
        "wires": []
    },
    {
        "id": "65816151a013b793",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 400,
        "wires": [
            [
                "794409526277fd91"
            ]
        ]
    },
    {
        "id": "94ce915e258f2458",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 420,
        "wires": [
            [
                "2de144f42ab87bb5"
            ]
        ]
    },
    {
        "id": "0b173fd61830991e",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 420,
        "wires": [
            [
                "94ce915e258f2458"
            ]
        ]
    },
    {
        "id": "aba86abebd4adac5",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 420,
        "wires": [
            [
                "0b173fd61830991e"
            ]
        ]
    },
    {
        "id": "7cfb946c8ba2d077",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 400,
        "wires": [
            [
                "65816151a013b793"
            ]
        ]
    },
    {
        "id": "2de144f42ab87bb5",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "69fbc96af617b30d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 420,
        "wires": [
            [
                "7cfb946c8ba2d077"
            ],
            []
        ]
    },
    {
        "id": "794409526277fd91",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "2234342a36460a24",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 360,
        "wires": [
            [
                "589b13bae40ff210"
            ]
        ]
    },
    {
        "id": "f28c02c522aa9308",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B37,BLOCK-37,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 360,
        "wires": [
            [
                "2234342a36460a24"
            ]
        ]
    },
    {
        "id": "589b13bae40ff210",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 360,
        "wires": [
            [
                "14cf7abb57b6bffd"
            ]
        ]
    },
    {
        "id": "14cf7abb57b6bffd",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "4c7d0df869676379",
                "2de144f42ab87bb5"
            ]
        ]
    },
    {
        "id": "4c7d0df869676379",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2934",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 360,
        "wires": []
    },
    {
        "id": "6abf242b39226205",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 540,
        "wires": [
            [
                "8107adf4d8b9853d"
            ]
        ]
    },
    {
        "id": "c3615d1a56738721",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 560,
        "wires": [
            [
                "e8ebd82015565ea7"
            ]
        ]
    },
    {
        "id": "138062a8e79b7ffc",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 560,
        "wires": [
            [
                "c3615d1a56738721"
            ]
        ]
    },
    {
        "id": "d5c3fca18936a073",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 560,
        "wires": [
            [
                "138062a8e79b7ffc"
            ]
        ]
    },
    {
        "id": "dbb5a318c1529502",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 540,
        "wires": [
            [
                "6abf242b39226205"
            ]
        ]
    },
    {
        "id": "e8ebd82015565ea7",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "6871b8eb91ce50f4",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 560,
        "wires": [
            [
                "dbb5a318c1529502"
            ],
            []
        ]
    },
    {
        "id": "8107adf4d8b9853d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "a6c8d9771d1ae7a2",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 500,
        "wires": [
            [
                "cba3433013c3b8a1"
            ]
        ]
    },
    {
        "id": "215df759d9f7a44e",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B38,BLOCK-38,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 500,
        "wires": [
            [
                "a6c8d9771d1ae7a2"
            ]
        ]
    },
    {
        "id": "cba3433013c3b8a1",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 500,
        "wires": [
            [
                "bdef20cdcff78de4"
            ]
        ]
    },
    {
        "id": "bdef20cdcff78de4",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 500,
        "wires": [
            [
                "64f7346006311540",
                "e8ebd82015565ea7"
            ]
        ]
    },
    {
        "id": "64f7346006311540",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2937",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 500,
        "wires": []
    },
    {
        "id": "109944c844e9ce24",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 680,
        "wires": [
            [
                "a833303c8ef72b2d"
            ]
        ]
    },
    {
        "id": "0b189e2e5457c0bf",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 700,
        "wires": [
            [
                "61c55daf69ccacf7"
            ]
        ]
    },
    {
        "id": "67d50353c23556b2",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "0b189e2e5457c0bf"
            ]
        ]
    },
    {
        "id": "1f4c5cba915430cc",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 700,
        "wires": [
            [
                "67d50353c23556b2"
            ]
        ]
    },
    {
        "id": "73e4904fb833931e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 680,
        "wires": [
            [
                "109944c844e9ce24"
            ]
        ]
    },
    {
        "id": "61c55daf69ccacf7",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "d7e7d590882ae241",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 700,
        "wires": [
            [
                "73e4904fb833931e"
            ],
            []
        ]
    },
    {
        "id": "a833303c8ef72b2d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "5b49173590d22ebb",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 640,
        "wires": [
            [
                "a851ce5663f4f529"
            ]
        ]
    },
    {
        "id": "870bd50960b346dd",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B38,BLOCK-38,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 640,
        "wires": [
            [
                "5b49173590d22ebb"
            ]
        ]
    },
    {
        "id": "a851ce5663f4f529",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 640,
        "wires": [
            [
                "769746574173391e"
            ]
        ]
    },
    {
        "id": "769746574173391e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "cc2c43c141119114",
                "61c55daf69ccacf7"
            ]
        ]
    },
    {
        "id": "cc2c43c141119114",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2938",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 640,
        "wires": []
    },
    {
        "id": "0c72d0ca771a5ec8",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 1100,
        "wires": [
            [
                "861707a215bdf8e8"
            ]
        ]
    },
    {
        "id": "624afc37bb4265a5",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1120,
        "wires": [
            [
                "2b0bc12218baf5ee"
            ]
        ]
    },
    {
        "id": "c92ac86ccc62c0e0",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1120,
        "wires": [
            [
                "624afc37bb4265a5"
            ]
        ]
    },
    {
        "id": "2b19413fe1fa496d",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 1120,
        "wires": [
            [
                "c92ac86ccc62c0e0"
            ]
        ]
    },
    {
        "id": "ad50010907e45c0d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1100,
        "wires": [
            [
                "0c72d0ca771a5ec8"
            ]
        ]
    },
    {
        "id": "2b0bc12218baf5ee",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "11b88ae7e14854d8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 1120,
        "wires": [
            [
                "ad50010907e45c0d"
            ],
            []
        ]
    },
    {
        "id": "861707a215bdf8e8",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "d15cddbc7c794c6c",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1060,
        "wires": [
            [
                "43da84c00810b3c4"
            ]
        ]
    },
    {
        "id": "38160e5bdc481f4c",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B40,BLOCK-40,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "d15cddbc7c794c6c"
            ]
        ]
    },
    {
        "id": "43da84c00810b3c4",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1060,
        "wires": [
            [
                "ce32200e526e2db0"
            ]
        ]
    },
    {
        "id": "ce32200e526e2db0",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1060,
        "wires": [
            [
                "1eacdaa9a6f7a214",
                "2b0bc12218baf5ee"
            ]
        ]
    },
    {
        "id": "1eacdaa9a6f7a214",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2939",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1060,
        "wires": []
    },
    {
        "id": "25c34e8230f3ba17",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 1240,
        "wires": [
            [
                "530f2b926bb4ff0b"
            ]
        ]
    },
    {
        "id": "1bfa28c5765ff727",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1260,
        "wires": [
            [
                "0db07a89b4a60969"
            ]
        ]
    },
    {
        "id": "85488f43e9592271",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1260,
        "wires": [
            [
                "1bfa28c5765ff727"
            ]
        ]
    },
    {
        "id": "09907fd5ad6b36df",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "85488f43e9592271"
            ]
        ]
    },
    {
        "id": "63adb68a091d44ca",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1240,
        "wires": [
            [
                "25c34e8230f3ba17"
            ]
        ]
    },
    {
        "id": "0db07a89b4a60969",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "428e792a92b49bb9",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 1260,
        "wires": [
            [
                "63adb68a091d44ca"
            ],
            []
        ]
    },
    {
        "id": "530f2b926bb4ff0b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "45e435235d166bfa",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1200,
        "wires": [
            [
                "2e18c16b06d9075d"
            ]
        ]
    },
    {
        "id": "a2fdc0cf808fa075",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B40,BLOCK-40,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 1200,
        "wires": [
            [
                "45e435235d166bfa"
            ]
        ]
    },
    {
        "id": "2e18c16b06d9075d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1200,
        "wires": [
            [
                "4db880250f6d42b7"
            ]
        ]
    },
    {
        "id": "4db880250f6d42b7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1200,
        "wires": [
            [
                "232aa2a305e7a1d2",
                "0db07a89b4a60969"
            ]
        ]
    },
    {
        "id": "232aa2a305e7a1d2",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2940",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1200,
        "wires": []
    },
    {
        "id": "959a7983919289ea",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 1380,
        "wires": [
            [
                "e25a4a64f197f906"
            ]
        ]
    },
    {
        "id": "0bbd824d6d4a21f7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1400,
        "wires": [
            [
                "d3775ca87ee6c4fc"
            ]
        ]
    },
    {
        "id": "5cdb8f3c63785d5c",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1400,
        "wires": [
            [
                "0bbd824d6d4a21f7"
            ]
        ]
    },
    {
        "id": "6dca2287dd30b3ab",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 1400,
        "wires": [
            [
                "5cdb8f3c63785d5c"
            ]
        ]
    },
    {
        "id": "d005c1e96fed7fa3",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1380,
        "wires": [
            [
                "959a7983919289ea"
            ]
        ]
    },
    {
        "id": "d3775ca87ee6c4fc",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "9c5e63afaba32b18",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 1400,
        "wires": [
            [
                "d005c1e96fed7fa3"
            ],
            []
        ]
    },
    {
        "id": "e25a4a64f197f906",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "8fdf6ea6c8146d93",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1340,
        "wires": [
            [
                "55ab7e1f6a60d3b3"
            ]
        ]
    },
    {
        "id": "8c180135f3763a5f",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B45,BLOCK-45,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 1340,
        "wires": [
            [
                "8fdf6ea6c8146d93"
            ]
        ]
    },
    {
        "id": "55ab7e1f6a60d3b3",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1340,
        "wires": [
            [
                "251914f9ed8c6ecb"
            ]
        ]
    },
    {
        "id": "251914f9ed8c6ecb",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1340,
        "wires": [
            [
                "85fb1947516667e5",
                "d3775ca87ee6c4fc"
            ]
        ]
    },
    {
        "id": "85fb1947516667e5",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "debug 2941",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1340,
        "wires": []
    },
    {
        "id": "841ac407a6f62adf",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 1520,
        "wires": [
            [
                "ef4b59fef8814c5c"
            ]
        ]
    },
    {
        "id": "be45d64bfa839ab3",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1540,
        "wires": [
            [
                "1164bb4db2858870"
            ]
        ]
    },
    {
        "id": "d5b8eb6381073d0b",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1540,
        "wires": [
            [
                "be45d64bfa839ab3"
            ]
        ]
    },
    {
        "id": "4b4808b0c8ae8f40",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 1540,
        "wires": [
            [
                "d5b8eb6381073d0b"
            ]
        ]
    },
    {
        "id": "1feb9b8c45e40457",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1520,
        "wires": [
            [
                "841ac407a6f62adf"
            ]
        ]
    },
    {
        "id": "1164bb4db2858870",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "848352eed0bb6714",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 1540,
        "wires": [
            [
                "1feb9b8c45e40457"
            ],
            []
        ]
    },
    {
        "id": "ef4b59fef8814c5c",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "f4bc37c7fdc8c405",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1480,
        "wires": [
            [
                "a71626f27c488f13"
            ]
        ]
    },
    {
        "id": "d2117018e98512c0",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B45,BLOCK-45,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 1480,
        "wires": [
            [
                "f4bc37c7fdc8c405"
            ]
        ]
    },
    {
        "id": "a71626f27c488f13",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1480,
        "wires": [
            [
                "0476a469e9581158"
            ]
        ]
    },
    {
        "id": "0476a469e9581158",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1480,
        "wires": [
            [
                "4f3766f0a10e2812"
            ]
        ]
    },
    {
        "id": "4f3766f0a10e2812",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "debug 2942",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1480,
        "wires": []
    },
    {
        "id": "5e6f2039ace07e49",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 1660,
        "wires": [
            [
                "25129c5aa8fe1725"
            ]
        ]
    },
    {
        "id": "150becb93dde7301",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1680,
        "wires": [
            [
                "8650a6510fea53bd"
            ]
        ]
    },
    {
        "id": "2eef6e6dd0e720a6",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1680,
        "wires": [
            [
                "150becb93dde7301"
            ]
        ]
    },
    {
        "id": "4cd55d9552f1e158",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 1680,
        "wires": [
            [
                "2eef6e6dd0e720a6"
            ]
        ]
    },
    {
        "id": "5c37ef84d2da5b9e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1660,
        "wires": [
            [
                "5e6f2039ace07e49"
            ]
        ]
    },
    {
        "id": "8650a6510fea53bd",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "a2af61a62e9c2381",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 1680,
        "wires": [
            [
                "5c37ef84d2da5b9e"
            ],
            []
        ]
    },
    {
        "id": "25129c5aa8fe1725",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "8b4044571877dfda",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1620,
        "wires": [
            [
                "13076b83351fad21"
            ]
        ]
    },
    {
        "id": "48f5afa88cc4b545",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B46,BLOCK-46,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 1620,
        "wires": [
            [
                "8b4044571877dfda"
            ]
        ]
    },
    {
        "id": "13076b83351fad21",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1620,
        "wires": [
            [
                "701ce028ad95abb5"
            ]
        ]
    },
    {
        "id": "701ce028ad95abb5",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1620,
        "wires": [
            [
                "90a42bfe21c8289a",
                "8650a6510fea53bd"
            ]
        ]
    },
    {
        "id": "90a42bfe21c8289a",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2943",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c395c02c3eae7356",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 1800,
        "wires": [
            [
                "81520c84a4c22666"
            ]
        ]
    },
    {
        "id": "1c9fc9bff13c2110",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1820,
        "wires": [
            [
                "50db056da392ccb4"
            ]
        ]
    },
    {
        "id": "72950a8fa6b4472d",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1820,
        "wires": [
            [
                "1c9fc9bff13c2110"
            ]
        ]
    },
    {
        "id": "aad6023e637ed53f",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 1820,
        "wires": [
            [
                "72950a8fa6b4472d"
            ]
        ]
    },
    {
        "id": "b5919316be8c4168",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1800,
        "wires": [
            [
                "c395c02c3eae7356"
            ]
        ]
    },
    {
        "id": "50db056da392ccb4",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "8e683c5aa1cbb188",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 1820,
        "wires": [
            [
                "b5919316be8c4168"
            ],
            []
        ]
    },
    {
        "id": "81520c84a4c22666",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "73adca05decc8850",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 1760,
        "wires": [
            [
                "7baf3d1eacd4ab17"
            ]
        ]
    },
    {
        "id": "cd2f25685a2490c8",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B46,BLOCK-46,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 1760,
        "wires": [
            [
                "73adca05decc8850"
            ]
        ]
    },
    {
        "id": "7baf3d1eacd4ab17",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1760,
        "wires": [
            [
                "5a908d402e13164e"
            ]
        ]
    },
    {
        "id": "5a908d402e13164e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1760,
        "wires": [
            [
                "addeedee7ebf2160",
                "50db056da392ccb4"
            ]
        ]
    },
    {
        "id": "addeedee7ebf2160",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2944",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1760,
        "wires": []
    },
    {
        "id": "6c494cc836a88b21",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 300,
        "wires": [
            [
                "7ab2aa8a57636217"
            ]
        ]
    },
    {
        "id": "be81d8196d96b76d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 320,
        "wires": [
            [
                "c5025e89332ee3bc"
            ]
        ]
    },
    {
        "id": "4dbd04d04942753f",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 320,
        "wires": [
            [
                "be81d8196d96b76d"
            ]
        ]
    },
    {
        "id": "146499f6134418bf",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 320,
        "wires": [
            [
                "4dbd04d04942753f"
            ]
        ]
    },
    {
        "id": "d6e124d000d810f7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 300,
        "wires": [
            [
                "6c494cc836a88b21"
            ]
        ]
    },
    {
        "id": "c5025e89332ee3bc",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "b93ae0872eecb691",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 320,
        "wires": [
            [
                "d6e124d000d810f7"
            ],
            []
        ]
    },
    {
        "id": "7ab2aa8a57636217",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0eb85197887c9214",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 260,
        "wires": [
            [
                "84277a403488aaae"
            ]
        ]
    },
    {
        "id": "b5cf33a9b96d823d",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B35,BLOCK-35,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 260,
        "wires": [
            [
                "0eb85197887c9214"
            ]
        ]
    },
    {
        "id": "84277a403488aaae",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 260,
        "wires": [
            [
                "a19fa6d61687918a"
            ]
        ]
    },
    {
        "id": "a19fa6d61687918a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 260,
        "wires": [
            [
                "42d1c73ce913a943",
                "c5025e89332ee3bc"
            ]
        ]
    },
    {
        "id": "42d1c73ce913a943",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2945",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 260,
        "wires": []
    },
    {
        "id": "ccf0bc0df694f417",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 440,
        "wires": [
            [
                "a007c483cd7607db"
            ]
        ]
    },
    {
        "id": "7ee7267ec6a91ffe",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 460,
        "wires": [
            [
                "be2d8d07c00a572f"
            ]
        ]
    },
    {
        "id": "8e66e096aa3afba5",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 460,
        "wires": [
            [
                "7ee7267ec6a91ffe"
            ]
        ]
    },
    {
        "id": "075c82e85dc2da77",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "8e66e096aa3afba5"
            ]
        ]
    },
    {
        "id": "1ffe87c6ffde8f4e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 440,
        "wires": [
            [
                "ccf0bc0df694f417"
            ]
        ]
    },
    {
        "id": "be2d8d07c00a572f",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "e58bb4c487f589bb",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 460,
        "wires": [
            [
                "1ffe87c6ffde8f4e"
            ],
            []
        ]
    },
    {
        "id": "a007c483cd7607db",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "a182c7b86628fed2",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 400,
        "wires": [
            [
                "a0deb31c1e75d92d"
            ]
        ]
    },
    {
        "id": "773dd5fe9e1bbfd3",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B35,BLOCK-35,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 400,
        "wires": [
            [
                "a182c7b86628fed2"
            ]
        ]
    },
    {
        "id": "a0deb31c1e75d92d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 400,
        "wires": [
            [
                "24d4265bde7848f3"
            ]
        ]
    },
    {
        "id": "24d4265bde7848f3",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\n// var new_pac_limit = msg.payload[2].new_value\nvar new_pac_limit = 2770\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 400,
        "wires": [
            [
                "38617ed8e9819266",
                "be2d8d07c00a572f"
            ]
        ]
    },
    {
        "id": "38617ed8e9819266",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2946",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 400,
        "wires": []
    },
    {
        "id": "3c7030a54be44c6b",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 580,
        "wires": [
            [
                "942aa64bc4bf327d"
            ]
        ]
    },
    {
        "id": "2ce2e81af3bb3c8f",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 600,
        "wires": [
            [
                "8dee34fea9d80bdd"
            ]
        ]
    },
    {
        "id": "e7b1b29e82576bf6",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 600,
        "wires": [
            [
                "2ce2e81af3bb3c8f"
            ]
        ]
    },
    {
        "id": "2626ef1e6333626f",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 600,
        "wires": [
            [
                "e7b1b29e82576bf6"
            ]
        ]
    },
    {
        "id": "7c5d02ec0c717bb6",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 580,
        "wires": [
            [
                "3c7030a54be44c6b"
            ]
        ]
    },
    {
        "id": "8dee34fea9d80bdd",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "6e2b19b950dc91c6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 600,
        "wires": [
            [
                "7c5d02ec0c717bb6"
            ],
            []
        ]
    },
    {
        "id": "942aa64bc4bf327d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e9b7dab479431784",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 540,
        "wires": [
            [
                "145e04fb294bd193"
            ]
        ]
    },
    {
        "id": "b844414bcaff28ba",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B36,BLOCK-36,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 540,
        "wires": [
            [
                "e9b7dab479431784"
            ]
        ]
    },
    {
        "id": "145e04fb294bd193",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 540,
        "wires": [
            [
                "97a857c6ce4beb64"
            ]
        ]
    },
    {
        "id": "97a857c6ce4beb64",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 540,
        "wires": [
            [
                "106b744e16bc1721",
                "8dee34fea9d80bdd"
            ]
        ]
    },
    {
        "id": "106b744e16bc1721",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2947",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 540,
        "wires": []
    },
    {
        "id": "5c8f2a53b0c37939",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 720,
        "wires": [
            [
                "20c145911064f42a"
            ]
        ]
    },
    {
        "id": "55448370708e3de4",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 740,
        "wires": [
            [
                "89ab55a0e075f8a0"
            ]
        ]
    },
    {
        "id": "f6440abed32d3fa9",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 740,
        "wires": [
            [
                "55448370708e3de4"
            ]
        ]
    },
    {
        "id": "dd54c293c6bb76ca",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 740,
        "wires": [
            [
                "f6440abed32d3fa9"
            ]
        ]
    },
    {
        "id": "66126808870f9529",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 720,
        "wires": [
            [
                "5c8f2a53b0c37939"
            ]
        ]
    },
    {
        "id": "89ab55a0e075f8a0",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "e9f6b2e26f43f738",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 740,
        "wires": [
            [
                "66126808870f9529"
            ],
            []
        ]
    },
    {
        "id": "20c145911064f42a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "a52809d4ac41b567",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 680,
        "wires": [
            [
                "4065860ce8aef423"
            ]
        ]
    },
    {
        "id": "69f1579f1f44f6bc",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B36,BLOCK-36,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 680,
        "wires": [
            [
                "a52809d4ac41b567"
            ]
        ]
    },
    {
        "id": "4065860ce8aef423",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 680,
        "wires": [
            [
                "da4fbfc7b7838dda"
            ]
        ]
    },
    {
        "id": "da4fbfc7b7838dda",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 680,
        "wires": [
            [
                "b95459927d22b916",
                "89ab55a0e075f8a0"
            ]
        ]
    },
    {
        "id": "b95459927d22b916",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2948",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 680,
        "wires": []
    },
    {
        "id": "3cfe49b89c95e30e",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 860,
        "wires": [
            [
                "3c7c7432830489b6"
            ]
        ]
    },
    {
        "id": "7a200a5baca5c84c",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 880,
        "wires": [
            [
                "1e85360b62e2da07"
            ]
        ]
    },
    {
        "id": "e71fd5aed18cfc55",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 880,
        "wires": [
            [
                "7a200a5baca5c84c"
            ]
        ]
    },
    {
        "id": "640a481a342f1b5f",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 880,
        "wires": [
            [
                "e71fd5aed18cfc55"
            ]
        ]
    },
    {
        "id": "4d0f66e2ba83bfbd",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 860,
        "wires": [
            [
                "3cfe49b89c95e30e"
            ]
        ]
    },
    {
        "id": "1e85360b62e2da07",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "c5d8e4cee8fa1272",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 880,
        "wires": [
            [
                "4d0f66e2ba83bfbd"
            ],
            []
        ]
    },
    {
        "id": "3c7c7432830489b6",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "62aa98b7abded918",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 820,
        "wires": [
            [
                "30f323260eea5402"
            ]
        ]
    },
    {
        "id": "32c2171aa5edd906",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B43,BLOCK-43,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 820,
        "wires": [
            [
                "62aa98b7abded918"
            ]
        ]
    },
    {
        "id": "30f323260eea5402",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 820,
        "wires": [
            [
                "e170568ee1319ec2"
            ]
        ]
    },
    {
        "id": "e170568ee1319ec2",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 820,
        "wires": [
            [
                "cdc02af37e88f636",
                "1e85360b62e2da07"
            ]
        ]
    },
    {
        "id": "cdc02af37e88f636",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2949",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 820,
        "wires": []
    },
    {
        "id": "316f28fdafe54c37",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1000,
        "wires": [
            [
                "92e252fe3a3a4eb0"
            ]
        ]
    },
    {
        "id": "cced654635d6951b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1020,
        "wires": [
            [
                "821550139b55ecfc"
            ]
        ]
    },
    {
        "id": "e7a6d984948b25f6",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1020,
        "wires": [
            [
                "cced654635d6951b"
            ]
        ]
    },
    {
        "id": "8fd4a793542df169",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 1020,
        "wires": [
            [
                "e7a6d984948b25f6"
            ]
        ]
    },
    {
        "id": "230d5fd23c6f0687",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1000,
        "wires": [
            [
                "316f28fdafe54c37"
            ]
        ]
    },
    {
        "id": "821550139b55ecfc",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "9143e81503701e03",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 1020,
        "wires": [
            [
                "230d5fd23c6f0687"
            ],
            []
        ]
    },
    {
        "id": "92e252fe3a3a4eb0",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "c096070634d7462c",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 960,
        "wires": [
            [
                "3cdbb468a81251dc"
            ]
        ]
    },
    {
        "id": "1d3bb32133bf2f5e",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B43,BLOCK-43,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 960,
        "wires": [
            [
                "c096070634d7462c"
            ]
        ]
    },
    {
        "id": "3cdbb468a81251dc",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 960,
        "wires": [
            [
                "a224fd8d2b5d5b0c"
            ]
        ]
    },
    {
        "id": "a224fd8d2b5d5b0c",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 960,
        "wires": [
            [
                "610e34d3101585d7",
                "821550139b55ecfc"
            ]
        ]
    },
    {
        "id": "610e34d3101585d7",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2950",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 960,
        "wires": []
    },
    {
        "id": "288bea01cef72659",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1140,
        "wires": [
            [
                "ee821617439ad07b"
            ]
        ]
    },
    {
        "id": "bba483d76404344a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1160,
        "wires": [
            [
                "30fda25d9989e333"
            ]
        ]
    },
    {
        "id": "a8f3a46e027f77aa",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1160,
        "wires": [
            [
                "bba483d76404344a"
            ]
        ]
    },
    {
        "id": "4382d37f51c7804b",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 1160,
        "wires": [
            [
                "a8f3a46e027f77aa"
            ]
        ]
    },
    {
        "id": "2b05130844ebb360",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1140,
        "wires": [
            [
                "288bea01cef72659"
            ]
        ]
    },
    {
        "id": "30fda25d9989e333",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "f857b06a5f014dc9",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 1160,
        "wires": [
            [
                "2b05130844ebb360"
            ],
            []
        ]
    },
    {
        "id": "ee821617439ad07b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "977935402f4b3c71",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1100,
        "wires": [
            [
                "01e76db42ef639d5"
            ]
        ]
    },
    {
        "id": "6ffcfe2ae301bce3",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B31,BLOCK-31,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 1100,
        "wires": [
            [
                "977935402f4b3c71"
            ]
        ]
    },
    {
        "id": "01e76db42ef639d5",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 1100,
        "wires": [
            [
                "9bfee472b09cadb7"
            ]
        ]
    },
    {
        "id": "9bfee472b09cadb7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1100,
        "wires": [
            [
                "d25176775e5ff431",
                "30fda25d9989e333"
            ]
        ]
    },
    {
        "id": "d25176775e5ff431",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2951",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7fcccf09203806a5",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1280,
        "wires": [
            [
                "cd87b8b76fd2d832"
            ]
        ]
    },
    {
        "id": "18cac8d3e68d675f",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1300,
        "wires": [
            [
                "f7fffe258fb2848d"
            ]
        ]
    },
    {
        "id": "e641b3f1b8444303",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1300,
        "wires": [
            [
                "18cac8d3e68d675f"
            ]
        ]
    },
    {
        "id": "e92188067e48db0f",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 1300,
        "wires": [
            [
                "e641b3f1b8444303"
            ]
        ]
    },
    {
        "id": "3389d5f48a99db52",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1280,
        "wires": [
            [
                "7fcccf09203806a5"
            ]
        ]
    },
    {
        "id": "f7fffe258fb2848d",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "a798d5537ac3ee0d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 1300,
        "wires": [
            [
                "3389d5f48a99db52"
            ],
            []
        ]
    },
    {
        "id": "cd87b8b76fd2d832",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "a0fecfbad9c10c1f",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1240,
        "wires": [
            [
                "173d5b51b19c4e12"
            ]
        ]
    },
    {
        "id": "9ee876c8a77bfed3",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B31,BLOCK-31,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 1240,
        "wires": [
            [
                "a0fecfbad9c10c1f"
            ]
        ]
    },
    {
        "id": "173d5b51b19c4e12",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 1240,
        "wires": [
            [
                "8568aa2036cfab33"
            ]
        ]
    },
    {
        "id": "8568aa2036cfab33",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1240,
        "wires": [
            [
                "10d48d91ce69a795",
                "f7fffe258fb2848d"
            ]
        ]
    },
    {
        "id": "10d48d91ce69a795",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2952",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 1240,
        "wires": []
    },
    {
        "id": "445153c7b45f96e0",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1420,
        "wires": [
            [
                "5bb832b9051b6050"
            ]
        ]
    },
    {
        "id": "18f263292c6d5706",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1440,
        "wires": [
            [
                "3865166b1061c338"
            ]
        ]
    },
    {
        "id": "7dbc0cbaf174e106",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1440,
        "wires": [
            [
                "18f263292c6d5706"
            ]
        ]
    },
    {
        "id": "7039833ccd473066",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "7dbc0cbaf174e106"
            ]
        ]
    },
    {
        "id": "accc837c7606e1d7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1420,
        "wires": [
            [
                "445153c7b45f96e0"
            ]
        ]
    },
    {
        "id": "3865166b1061c338",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "d2842d2e0af08f91",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 1440,
        "wires": [
            [
                "accc837c7606e1d7"
            ],
            []
        ]
    },
    {
        "id": "5bb832b9051b6050",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "c84db7e4bf6e5d04",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1380,
        "wires": [
            [
                "ae4a4f814e7471cb"
            ]
        ]
    },
    {
        "id": "b3be88b7d722da5e",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B27,BLOCK-27,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 1380,
        "wires": [
            [
                "c84db7e4bf6e5d04"
            ]
        ]
    },
    {
        "id": "ae4a4f814e7471cb",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 1380,
        "wires": [
            [
                "f9ad04b620c9170b"
            ]
        ]
    },
    {
        "id": "f9ad04b620c9170b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1380,
        "wires": [
            [
                "b7ddd72debf59e89",
                "3865166b1061c338"
            ]
        ]
    },
    {
        "id": "b7ddd72debf59e89",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2953",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 1380,
        "wires": []
    },
    {
        "id": "3f2e90b1df0e1643",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1560,
        "wires": [
            [
                "541461bbac6c02a5"
            ]
        ]
    },
    {
        "id": "7a7ce330dd6a0fb1",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1580,
        "wires": [
            [
                "f38b4331de8c8b72"
            ]
        ]
    },
    {
        "id": "f34f1055a891afc9",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1580,
        "wires": [
            [
                "7a7ce330dd6a0fb1"
            ]
        ]
    },
    {
        "id": "20213c4575ac2c97",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 1580,
        "wires": [
            [
                "f34f1055a891afc9"
            ]
        ]
    },
    {
        "id": "a25e513f3d4d81b6",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1560,
        "wires": [
            [
                "3f2e90b1df0e1643"
            ]
        ]
    },
    {
        "id": "f38b4331de8c8b72",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "fc3c38f12929236d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 1580,
        "wires": [
            [
                "a25e513f3d4d81b6"
            ],
            []
        ]
    },
    {
        "id": "541461bbac6c02a5",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "f6f4c91d46fe8dd2",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1520,
        "wires": [
            [
                "ad7f59e6134b1fc2"
            ]
        ]
    },
    {
        "id": "3b3cbdc3e0aeb9c2",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B27,BLOCK-27,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 1520,
        "wires": [
            [
                "f6f4c91d46fe8dd2"
            ]
        ]
    },
    {
        "id": "ad7f59e6134b1fc2",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 1520,
        "wires": [
            [
                "665e15f65deffdb7"
            ]
        ]
    },
    {
        "id": "665e15f65deffdb7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1520,
        "wires": [
            [
                "8cde615ff1b8ab12",
                "f38b4331de8c8b72"
            ]
        ]
    },
    {
        "id": "8cde615ff1b8ab12",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2954",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 1520,
        "wires": []
    },
    {
        "id": "028500884203125f",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1700,
        "wires": [
            [
                "5d9511584af2361c"
            ]
        ]
    },
    {
        "id": "58836badda81cf6f",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1720,
        "wires": [
            [
                "4e28542936898228"
            ]
        ]
    },
    {
        "id": "83a08edcf4f99357",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1720,
        "wires": [
            [
                "58836badda81cf6f"
            ]
        ]
    },
    {
        "id": "f70e6e03003a9693",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 1720,
        "wires": [
            [
                "83a08edcf4f99357"
            ]
        ]
    },
    {
        "id": "a6cc3453fe26aafa",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1700,
        "wires": [
            [
                "028500884203125f"
            ]
        ]
    },
    {
        "id": "4e28542936898228",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "33a7ddb399478543",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 1720,
        "wires": [
            [
                "a6cc3453fe26aafa"
            ],
            []
        ]
    },
    {
        "id": "5d9511584af2361c",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "952a64af54cc111c",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1660,
        "wires": [
            [
                "ee30ef66b9de7cad"
            ]
        ]
    },
    {
        "id": "2b6888165bf1f9f4",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B28,BLOCK-28,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 1660,
        "wires": [
            [
                "952a64af54cc111c"
            ]
        ]
    },
    {
        "id": "ee30ef66b9de7cad",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 1660,
        "wires": [
            [
                "b00ed6cbd3827bfc"
            ]
        ]
    },
    {
        "id": "b00ed6cbd3827bfc",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1660,
        "wires": [
            [
                "74a9bb4fbf3c6dbd",
                "4e28542936898228"
            ]
        ]
    },
    {
        "id": "74a9bb4fbf3c6dbd",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2955",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 1660,
        "wires": []
    },
    {
        "id": "56dd7d800fce60b4",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1840,
        "wires": [
            [
                "6a3a90828d5cf56c"
            ]
        ]
    },
    {
        "id": "6b02e0b167397c9a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1860,
        "wires": [
            [
                "18a98a48667636a7"
            ]
        ]
    },
    {
        "id": "c7fc160fbe89dc0c",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1860,
        "wires": [
            [
                "6b02e0b167397c9a"
            ]
        ]
    },
    {
        "id": "5707e743a5008ef0",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 1860,
        "wires": [
            [
                "c7fc160fbe89dc0c"
            ]
        ]
    },
    {
        "id": "e11fdafb96a73313",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1840,
        "wires": [
            [
                "56dd7d800fce60b4"
            ]
        ]
    },
    {
        "id": "18a98a48667636a7",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "4cdb061bf9cb68fb",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 1860,
        "wires": [
            [
                "e11fdafb96a73313"
            ],
            []
        ]
    },
    {
        "id": "6a3a90828d5cf56c",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "c7bb8f42b29abf81",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1800,
        "wires": [
            [
                "85b827c4c882ff47"
            ]
        ]
    },
    {
        "id": "e8644d80534e1675",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B28,BLOCK-28,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 1800,
        "wires": [
            [
                "c7bb8f42b29abf81"
            ]
        ]
    },
    {
        "id": "85b827c4c882ff47",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 1800,
        "wires": [
            [
                "0a6f26f8ab689938"
            ]
        ]
    },
    {
        "id": "0a6f26f8ab689938",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1800,
        "wires": [
            [
                "f8aa705d9cc0d4d8",
                "18a98a48667636a7"
            ]
        ]
    },
    {
        "id": "f8aa705d9cc0d4d8",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2956",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 1800,
        "wires": []
    },
    {
        "id": "f18c4bd85f389bae",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 1980,
        "wires": [
            [
                "5943ded7557165ce"
            ]
        ]
    },
    {
        "id": "2eed1cd5dbbc1d2a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 2000,
        "wires": [
            [
                "ba2cf7ca57a76adb"
            ]
        ]
    },
    {
        "id": "f1760b64073ba587",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 2000,
        "wires": [
            [
                "2eed1cd5dbbc1d2a"
            ]
        ]
    },
    {
        "id": "f01b9ce9ca43348c",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 2000,
        "wires": [
            [
                "f1760b64073ba587"
            ]
        ]
    },
    {
        "id": "5d8072d974149d0a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1980,
        "wires": [
            [
                "f18c4bd85f389bae"
            ]
        ]
    },
    {
        "id": "ba2cf7ca57a76adb",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "4cdb061bf9cb68fb",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 2000,
        "wires": [
            [
                "5d8072d974149d0a"
            ],
            []
        ]
    },
    {
        "id": "5943ded7557165ce",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "575444994af14ad2",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 1940,
        "wires": [
            [
                "4d550f574c5e39ef"
            ]
        ]
    },
    {
        "id": "819d732016353a69",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B29,BLOCK-29,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 1940,
        "wires": [
            [
                "575444994af14ad2"
            ]
        ]
    },
    {
        "id": "4d550f574c5e39ef",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 1940,
        "wires": [
            [
                "eb9be95f096f9362"
            ]
        ]
    },
    {
        "id": "eb9be95f096f9362",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1940,
        "wires": [
            [
                "8b2f74095c96599c"
            ]
        ]
    },
    {
        "id": "8b2f74095c96599c",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "debug 2957",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 1940,
        "wires": []
    },
    {
        "id": "f146e8c409bbe657",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2970,
        "y": 2140,
        "wires": [
            [
                "9bb8b602256fb0eb"
            ]
        ]
    },
    {
        "id": "b5f5e81e6375784a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 2160,
        "wires": [
            [
                "1ceac7fb384e1adc"
            ]
        ]
    },
    {
        "id": "17c363c464154508",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 2160,
        "wires": [
            [
                "b5f5e81e6375784a"
            ]
        ]
    },
    {
        "id": "dbcd51a4057f5ce8",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 2230,
        "y": 2160,
        "wires": [
            [
                "17c363c464154508"
            ]
        ]
    },
    {
        "id": "65cd1a1184cfdf8b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 2140,
        "wires": [
            [
                "f146e8c409bbe657"
            ]
        ]
    },
    {
        "id": "1ceac7fb384e1adc",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "186bf1649bccc0b7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2670,
        "y": 2160,
        "wires": [
            [
                "65cd1a1184cfdf8b"
            ],
            []
        ]
    },
    {
        "id": "9bb8b602256fb0eb",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "e0a410a716b300a9",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2350,
        "y": 2100,
        "wires": [
            [
                "cc5aec75899945b8"
            ]
        ]
    },
    {
        "id": "b84c7cecf32a6113",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B29,BLOCK-29,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 2230,
        "y": 2100,
        "wires": [
            [
                "e0a410a716b300a9"
            ]
        ]
    },
    {
        "id": "cc5aec75899945b8",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 2100,
        "wires": [
            [
                "a4fdbf986a286497"
            ]
        ]
    },
    {
        "id": "a4fdbf986a286497",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 2100,
        "wires": [
            [
                "18229b44b0cf6689",
                "1ceac7fb384e1adc"
            ]
        ]
    },
    {
        "id": "18229b44b0cf6689",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2958",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 2100,
        "wires": []
    },
    {
        "id": "ce35e856f2d58687",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4670,
        "y": 500,
        "wires": [
            [
                "3217a182b4d5e62f"
            ]
        ]
    },
    {
        "id": "92b274db5ef6feba",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4170,
        "y": 520,
        "wires": [
            [
                "81952edef31d8452"
            ]
        ]
    },
    {
        "id": "1883f5c2f99d1fc7",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 520,
        "wires": [
            [
                "92b274db5ef6feba"
            ]
        ]
    },
    {
        "id": "426e40d7a1aac700",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3930,
        "y": 520,
        "wires": [
            [
                "1883f5c2f99d1fc7"
            ]
        ]
    },
    {
        "id": "59af0f7c9684d85d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 500,
        "wires": [
            [
                "ce35e856f2d58687"
            ]
        ]
    },
    {
        "id": "81952edef31d8452",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "7b602240683ad76c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4370,
        "y": 520,
        "wires": [
            [
                "59af0f7c9684d85d"
            ],
            []
        ]
    },
    {
        "id": "3217a182b4d5e62f",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4800,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ca6edecd04dbdcdf",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 460,
        "wires": [
            [
                "43e9e88ea4ce6bf2"
            ]
        ]
    },
    {
        "id": "5bfd4e3a42795e50",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B30,BLOCK-30,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3930,
        "y": 460,
        "wires": [
            [
                "ca6edecd04dbdcdf"
            ]
        ]
    },
    {
        "id": "43e9e88ea4ce6bf2",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 460,
        "wires": [
            [
                "b4e97ff4f42ae0b9"
            ]
        ]
    },
    {
        "id": "b4e97ff4f42ae0b9",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 460,
        "wires": [
            [
                "f05b3defbad5cceb",
                "81952edef31d8452"
            ]
        ]
    },
    {
        "id": "f05b3defbad5cceb",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2959",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4560,
        "y": 460,
        "wires": []
    },
    {
        "id": "45e71b373f4f9b3e",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4670,
        "y": 640,
        "wires": [
            [
                "43655a9ada9ebebf"
            ]
        ]
    },
    {
        "id": "8808b1752f586a3d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4170,
        "y": 660,
        "wires": [
            [
                "4916a1c95e9d292d"
            ]
        ]
    },
    {
        "id": "7a80ea53f08e533a",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 660,
        "wires": [
            [
                "8808b1752f586a3d"
            ]
        ]
    },
    {
        "id": "75d594395c36e6bc",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3930,
        "y": 660,
        "wires": [
            [
                "7a80ea53f08e533a"
            ]
        ]
    },
    {
        "id": "c25426cf86780db1",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 640,
        "wires": [
            [
                "45e71b373f4f9b3e"
            ]
        ]
    },
    {
        "id": "4916a1c95e9d292d",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "b52494297d04582c",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4370,
        "y": 660,
        "wires": [
            [
                "c25426cf86780db1"
            ],
            []
        ]
    },
    {
        "id": "43655a9ada9ebebf",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4800,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "549639a50547561b",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 600,
        "wires": [
            [
                "061b0b3d59c7ee44"
            ]
        ]
    },
    {
        "id": "f3de82ed6fbb59b4",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B30,BLOCK-30,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3930,
        "y": 600,
        "wires": [
            [
                "549639a50547561b"
            ]
        ]
    },
    {
        "id": "061b0b3d59c7ee44",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 600,
        "wires": [
            [
                "dbaf449dde2b8e4c"
            ]
        ]
    },
    {
        "id": "dbaf449dde2b8e4c",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 600,
        "wires": [
            [
                "61844d3757a50fda",
                "4916a1c95e9d292d"
            ]
        ]
    },
    {
        "id": "61844d3757a50fda",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2960",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4560,
        "y": 600,
        "wires": []
    },
    {
        "id": "94722cd0a8e4cb34",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4670,
        "y": 780,
        "wires": [
            [
                "acdc8b0f92816b84"
            ]
        ]
    },
    {
        "id": "109450f6c8d22227",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4170,
        "y": 800,
        "wires": [
            [
                "99108575b6937492"
            ]
        ]
    },
    {
        "id": "19dc99c7a8ebece3",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 800,
        "wires": [
            [
                "109450f6c8d22227"
            ]
        ]
    },
    {
        "id": "1097b5dbd5ba06eb",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3930,
        "y": 800,
        "wires": [
            [
                "19dc99c7a8ebece3"
            ]
        ]
    },
    {
        "id": "0040103544ee168c",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 780,
        "wires": [
            [
                "94722cd0a8e4cb34"
            ]
        ]
    },
    {
        "id": "99108575b6937492",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "519bd18dc5c29146",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4370,
        "y": 800,
        "wires": [
            [
                "0040103544ee168c"
            ],
            []
        ]
    },
    {
        "id": "acdc8b0f92816b84",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4800,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "802544350fb36a47",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 740,
        "wires": [
            [
                "1c95035f34330d5f"
            ]
        ]
    },
    {
        "id": "33596bdcda33f137",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B32,BLOCK-32,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3930,
        "y": 740,
        "wires": [
            [
                "802544350fb36a47"
            ]
        ]
    },
    {
        "id": "1c95035f34330d5f",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 740,
        "wires": [
            [
                "0dfc53eb7bc62afa"
            ]
        ]
    },
    {
        "id": "0dfc53eb7bc62afa",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 740,
        "wires": [
            [
                "c520e147b335c510",
                "99108575b6937492"
            ]
        ]
    },
    {
        "id": "c520e147b335c510",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2961",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4560,
        "y": 740,
        "wires": []
    },
    {
        "id": "f45e9431ba1008d9",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4670,
        "y": 920,
        "wires": [
            [
                "40afd45bb2a9442e"
            ]
        ]
    },
    {
        "id": "6cfb9534787a7601",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4170,
        "y": 940,
        "wires": [
            [
                "7c96204708794c9b"
            ]
        ]
    },
    {
        "id": "a28196f148276890",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 940,
        "wires": [
            [
                "6cfb9534787a7601"
            ]
        ]
    },
    {
        "id": "aa6ba65c8ce21d99",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3930,
        "y": 940,
        "wires": [
            [
                "a28196f148276890"
            ]
        ]
    },
    {
        "id": "5f678dce82373ef7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 920,
        "wires": [
            [
                "f45e9431ba1008d9"
            ]
        ]
    },
    {
        "id": "7c96204708794c9b",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "9e0aa95118efcf29",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4370,
        "y": 940,
        "wires": [
            [
                "5f678dce82373ef7"
            ],
            []
        ]
    },
    {
        "id": "40afd45bb2a9442e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4800,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "e633a36b9dc0b689",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 880,
        "wires": [
            [
                "9ed7b07126fc94b6"
            ]
        ]
    },
    {
        "id": "04f611ecf0aa9aa4",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B32,BLOCK-32,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3930,
        "y": 880,
        "wires": [
            [
                "e633a36b9dc0b689"
            ]
        ]
    },
    {
        "id": "9ed7b07126fc94b6",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 880,
        "wires": [
            [
                "3af3d3e7bc8b69dd"
            ]
        ]
    },
    {
        "id": "3af3d3e7bc8b69dd",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 880,
        "wires": [
            [
                "18c0fdef1625b015"
            ]
        ]
    },
    {
        "id": "18c0fdef1625b015",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "debug 2962",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4560,
        "y": 880,
        "wires": []
    },
    {
        "id": "087f64ba8ebb2e51",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4670,
        "y": 1060,
        "wires": [
            [
                "bed740ea3ebfc0a5"
            ]
        ]
    },
    {
        "id": "ebd3c1206d9d8581",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4170,
        "y": 1080,
        "wires": [
            [
                "80ca6ba7a0b48a3b"
            ]
        ]
    },
    {
        "id": "b677753c56d7a97c",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 1080,
        "wires": [
            [
                "ebd3c1206d9d8581"
            ]
        ]
    },
    {
        "id": "07617c85bd9aadbe",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3930,
        "y": 1080,
        "wires": [
            [
                "b677753c56d7a97c"
            ]
        ]
    },
    {
        "id": "b858de29765c5ef5",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 1060,
        "wires": [
            [
                "087f64ba8ebb2e51"
            ]
        ]
    },
    {
        "id": "80ca6ba7a0b48a3b",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "3aad9653b352efa1",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4370,
        "y": 1080,
        "wires": [
            [
                "b858de29765c5ef5"
            ],
            []
        ]
    },
    {
        "id": "bed740ea3ebfc0a5",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4800,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "d94813b7d9d51e76",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 1020,
        "wires": [
            [
                "11aa288196e7f556"
            ]
        ]
    },
    {
        "id": "2486a74ad1433c9d",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B34,BLOCK-34,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3930,
        "y": 1020,
        "wires": [
            [
                "d94813b7d9d51e76"
            ]
        ]
    },
    {
        "id": "11aa288196e7f556",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 1020,
        "wires": [
            [
                "74a7e727ddc2b08e"
            ]
        ]
    },
    {
        "id": "74a7e727ddc2b08e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 1020,
        "wires": [
            [
                "b5330ac2138ddd39",
                "80ca6ba7a0b48a3b"
            ]
        ]
    },
    {
        "id": "b5330ac2138ddd39",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2963",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4560,
        "y": 1020,
        "wires": []
    },
    {
        "id": "89b6ea5a4ad6f0a8",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4670,
        "y": 1200,
        "wires": [
            [
                "edd6fbc6e2e6f79b"
            ]
        ]
    },
    {
        "id": "fe9d2cc6cafb8f6a",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4170,
        "y": 1220,
        "wires": [
            [
                "4223a4bb7d99fe96"
            ]
        ]
    },
    {
        "id": "adbf619a3d1fbb9b",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 1220,
        "wires": [
            [
                "fe9d2cc6cafb8f6a"
            ]
        ]
    },
    {
        "id": "22d8221df85062d3",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 3930,
        "y": 1220,
        "wires": [
            [
                "adbf619a3d1fbb9b"
            ]
        ]
    },
    {
        "id": "370ceb8da1113ac7",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 1200,
        "wires": [
            [
                "89b6ea5a4ad6f0a8"
            ]
        ]
    },
    {
        "id": "4223a4bb7d99fe96",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "1f4569bc1a118d13",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 4370,
        "y": 1220,
        "wires": [
            [
                "370ceb8da1113ac7"
            ],
            []
        ]
    },
    {
        "id": "edd6fbc6e2e6f79b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4800,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "ff0f62775744474f",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 4050,
        "y": 1160,
        "wires": [
            [
                "bef8f74942a324a3"
            ]
        ]
    },
    {
        "id": "c241f6918ed881fa",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B34,BLOCK-34,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 3930,
        "y": 1160,
        "wires": [
            [
                "ff0f62775744474f"
            ]
        ]
    },
    {
        "id": "bef8f74942a324a3",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4190,
        "y": 1160,
        "wires": [
            [
                "c7ace0e2c98c2e6e"
            ]
        ]
    },
    {
        "id": "c7ace0e2c98c2e6e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 1160,
        "wires": [
            [
                "984853d14ce391b9"
            ]
        ]
    },
    {
        "id": "984853d14ce391b9",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "debug 2964",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4560,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2f364dd4c39bb0d7",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 39 - INV 01",
        "info": "",
        "x": 640,
        "y": 740,
        "wires": []
    },
    {
        "id": "f1f46ef5f8970555",
        "type": "comment",
        "z": "1b09e6f66e3e08e7",
        "name": "Engine 03- Block 39 - INV 02",
        "info": "",
        "x": 640,
        "y": 880,
        "wires": []
    },
    {
        "id": "05999ef6da67e1ec",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 820,
        "wires": [
            [
                "e36d2bc880c81d45"
            ]
        ]
    },
    {
        "id": "eaee2901209aab0e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 840,
        "wires": [
            [
                "8e82c164fa4c5d0d"
            ]
        ]
    },
    {
        "id": "dc5ca610434b759c",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 840,
        "wires": [
            [
                "eaee2901209aab0e"
            ]
        ]
    },
    {
        "id": "eaf6ed79b6f6e2fa",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 840,
        "wires": [
            [
                "dc5ca610434b759c"
            ]
        ]
    },
    {
        "id": "f512345311f27780",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 820,
        "wires": [
            [
                "05999ef6da67e1ec"
            ]
        ]
    },
    {
        "id": "8e82c164fa4c5d0d",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "bbe2eeb0728aa649",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 840,
        "wires": [
            [
                "f512345311f27780"
            ],
            []
        ]
    },
    {
        "id": "e36d2bc880c81d45",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a0205584776b8e92",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 780,
        "wires": [
            [
                "f46ec6acec3ae70b"
            ]
        ]
    },
    {
        "id": "949d28afe925d1fd",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B39,BLOCK-39,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 780,
        "wires": [
            [
                "a0205584776b8e92"
            ]
        ]
    },
    {
        "id": "f46ec6acec3ae70b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 780,
        "wires": [
            [
                "8dc75a404dc1d49e"
            ]
        ]
    },
    {
        "id": "8dc75a404dc1d49e",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 780,
        "wires": [
            [
                "0bf047598f8cfd8b",
                "8e82c164fa4c5d0d"
            ]
        ]
    },
    {
        "id": "0bf047598f8cfd8b",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2935",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 780,
        "wires": []
    },
    {
        "id": "76f92e468f89ab4b",
        "type": "join",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 960,
        "wires": [
            [
                "dee1f45694f2ea43"
            ]
        ]
    },
    {
        "id": "229572ebaaad720d",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "query",
        "func": "var object = msg.payload\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    if (msg.payload[i].read == \"y\") {\n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype': msg.payload[i].read_reg_type, 'operation': 'read' };\n        query.topic = { topic: msg.payload[i], error: object };\n\n        node.send(query);\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 980,
        "wires": [
            [
                "5e5ecdb4c0ee3582"
            ]
        ]
    },
    {
        "id": "e80917b24115acaa",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 980,
        "wires": [
            [
                "229572ebaaad720d"
            ]
        ]
    },
    {
        "id": "4b9dbaa675b96f44",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Read",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf,read\n1,8205,S16,3,1,2,,,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,,kW,0.1,y\n2,8206,S16,3,1,1,,,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,,KVAr,0.1,n\n3,8272,S16,3,1,3,,,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,kW,1,y\n4,8273,S16,3,1,1,,,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,kVAr,1,n\n5,8274,S16,3,1,1,,,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,0,,,1,n\n",
        "output": "str",
        "x": 710,
        "y": 980,
        "wires": [
            [
                "e80917b24115acaa"
            ]
        ]
    },
    {
        "id": "14f8638037a95009",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "msg",
        "func": "if (msg.error === \"Error: Timed out\") {\n if (msg.topic && typeof msg.topic === 'object' && !Array.isArray(msg.topic)) {\n    let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n    global.set(tag, 0);\n  if(msg.topic.error)\n  {\n    for (let j = 0; j < msg.topic.error.length; j++) {\n      let outMsg = {\n        payload: {\n          value: \"NaN\",\n          topic: msg.topic.error[j]\n        }\n      };\n      node.send(outMsg);\n    }\n  }\n  }\n}\nelse if (msg.payload && Array.isArray(msg.payload.results)) {\n\n  let tag = \"COMM\" + \".\" + msg.topic.topic.b + \".\" + msg.topic.topic.d;\n  global.set(tag, 1);\n\n  for (let i = 0; i < msg.topic.error.length; i++) {\n    for (let k = 0; k < msg.payload.results.length; k++) {\n      if (msg.payload.results[k].address === msg.topic.error[i].read_reg_id) {\n        let outMsg = {\n          payload: {\n            value: msg.payload.results[k].value,\n            topic: msg.topic.error[i]\n          }\n        };\n        node.send(outMsg);\n      }\n    }\n  }\n}\nelse if (msg.payload && msg.payload.value !== undefined) {\n\n  let outMsg = {\n    payload: {\n      value: msg.payload.value,\n      topic: msg.topic.topic\n    }\n  };\n  node.send(outMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 960,
        "wires": [
            [
                "76f92e468f89ab4b"
            ]
        ]
    },
    {
        "id": "5e5ecdb4c0ee3582",
        "type": "Main-Modbus-Read-Write",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "8d25f86a95a11ae3",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1150,
        "y": 980,
        "wires": [
            [
                "14f8638037a95009"
            ],
            []
        ]
    },
    {
        "id": "dee1f45694f2ea43",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "VR_EM",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].payload.topic.b + '.' + msg.payload[i].payload.topic.d + '.' + msg.payload[i].payload.topic.f\n    var val = msg.payload[i].payload.value\n    if (val != \"NaN\")\n     {\n        var value = val * msg.payload[i].payload.topic.mf\n    }\n    else {\n        value = val\n    }\n\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "aa74fe783bc25301",
        "type": "csv",
        "z": "1b09e6f66e3e08e7",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "c5f3dc5d09126067"
            ]
        ]
    },
    {
        "id": "60f9eef0254fabff",
        "type": "template",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,old_limit,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,OLD_QAC_LIMIT,,,6,1,1,12305,S16,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,kVAr,1\n2,OLD_PF_LIMIT,,,6,1,1,12306,S16,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,0.001\n3,OLD_PAC_LIMIT,,,6,1,1,12304,U16,B39,BLOCK-39,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,,Server8782,8782,1,Truboard,,,kW,1",
        "output": "str",
        "x": 710,
        "y": 920,
        "wires": [
            [
                "aa74fe783bc25301"
            ]
        ]
    },
    {
        "id": "c5f3dc5d09126067",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "data process",
        "func": "let array = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var topic = msg.payload[i]\n    var old_name = msg.payload[i].b +'.' + msg.payload[i].d +'.' + msg.payload[i].old_limit\n    var old_value = global.get(old_name)\n\n    var new_tag = msg.payload[i].f\n    var new_value = global.get(new_tag)\n\n    var obj  = {\n                old_tag:old_name,\n                old_value:old_value,\n                new_tag:new_tag,\n                new_value:new_value,\n                register:msg.payload[i].write_reg_id,\n                qnty:msg.payload[i].addr_qty,\n                fc:msg.payload[i].fun_code,\n                unit_id:msg.payload[i].unit_id,\n                reg_type:msg.payload[i].write_reg_type,\n                p:msg.payload[i].p,\n                b:msg.payload[i].b,\n                d:msg.payload[i].d\n                }\n    obj.topic = topic\n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 920,
        "wires": [
            [
                "6d93275fb88ee64b"
            ]
        ]
    },
    {
        "id": "6d93275fb88ee64b",
        "type": "function",
        "z": "1b09e6f66e3e08e7",
        "name": "Write",
        "func": "var pac_limit_tag = msg.payload[2].b + '.' + msg.payload[2].d + '.' + msg.payload[2].new_tag\nvar old_pac_limit = msg.payload[2].old_value\nvar new_pac_limit = msg.payload[2].new_value\nglobal.set(pac_limit_tag, new_pac_limit)\nvar new_pac_limit_Reg_id = msg.payload[2].register\nvar new_pac_limit_Reg_type = msg.payload[2].reg_type\n\nvar old_qac_limit = msg.payload[0].old_value\nvar new_qac_limit = msg.payload[0].new_value\nvar qac_limit_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + msg.payload[0].new_tag\nglobal.set(qac_limit_tag, new_qac_limit)\nvar new_qac_limit_Reg_id = msg.payload[0].register\nvar new_qac_limit_Reg_type = msg.payload[0].reg_type\n\nvar old_pf_limit = msg.payload[1].old_value\nvar new_pf_limit = msg.payload[1].new_value\nvar new_pf_limit_Reg_id = msg.payload[1].register\nvar new_pf_limit_Reg_type = msg.payload[1].reg_type\nvar pf_limit_tag = msg.payload[1].b + '.' + msg.payload[1].d + '.' + msg.payload[1].new_tag\nglobal.set(pf_limit_tag, new_pf_limit)\n\n\nvar block_tag = msg.payload[0].b + '.' + msg.payload[0].d + '.' + \"PAC\"\nvar pac_tag = global.get(block_tag)\n\nvar remote_tag = \"RM_COMM\" + '.' + msg.payload[0].b + '.' + msg.payload[0].d\n//node.warn(remote_tag);\nvar remote_value = global.get(remote_tag)\n//node.warn(remote_value)\n\nif (((remote_value == 1) )  || (remote_value == 0))\n{\n    var msg4 = {};\n    msg4.payload = {\n        'value': remote_value,\n        'fc': 5,\n        'unitid': 1,\n        'address': 12288,\n        'quantity': 1,\n        'datatype': 'S16',\n        'operation': 'write'\n    };\n    msg4.topic = {topic:msg.payload[0].topic}\n    node.send(msg4);\n    \n    global.set(remote_tag,2)     \n}\n\n\nif (old_pac_limit != new_pac_limit && new_pac_limit != 0 && new_pac_limit != undefined) {\n    var msg1 = {};\n    msg1.payload = {\n        'value': new_pac_limit,\n        'fc': 6,\n        'unitid': 1,\n        'address': new_pac_limit_Reg_id,\n        'quantity': 1,\n        'datatype': new_pac_limit_Reg_type,\n        'operation': 'write'\n    };\n    msg1.topic = {topic:msg.payload[0].topic}\n    node.send(msg1);\n}\n\n\n if (old_qac_limit != new_qac_limit && new_qac_limit != undefined) {\n     const decimalValue = new_qac_limit;\n     var msg2 = {};\n     msg2.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_qac_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_qac_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg2.topic = {topic:msg.payload[0].topic}\n     node.send(msg2);\n }\n\n\n if (old_pf_limit != new_pf_limit && new_pf_limit != 0 && new_pf_limit != undefined) {\n     const decimalValue = new_pf_limit;\n     var msg3 = {};\n     msg3.payload = {\n         \"value\": decimalValue,\n         'fc': 6,\n         'unitid': 1,\n         'address': new_pf_limit_Reg_id,\n         'quantity': 1,\n         'datatype': new_pf_limit_Reg_type,\n         'operation': 'write'\n     };\n     msg3.topic = {topic:msg.payload[0].topic}\n     node.send(msg3);\n }\n\n\n\n\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, sel: SEL_PC_RX, pac: PAC_ON_OFF_1}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 920,
        "wires": [
            [
                "0b0ed74d36464faa",
                "5e5ecdb4c0ee3582"
            ]
        ]
    },
    {
        "id": "0b0ed74d36464faa",
        "type": "debug",
        "z": "1b09e6f66e3e08e7",
        "name": "debug 2936",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 920,
        "wires": []
    },
    {
        "id": "f7344796f5c83525",
        "type": "interval",
        "z": "1b09e6f66e3e08e7",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 350,
        "y": 1020,
        "wires": [
            [
                "a5a7c212af7fc747"
            ]
        ]
    },
    {
        "id": "1f290d1b641228bf",
        "type": "interval",
        "z": "1b09e6f66e3e08e7",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 1890,
        "y": 1200,
        "wires": [
            [
                "e8ba155e871aa3a2"
            ]
        ]
    },
    {
        "id": "df6d88842b5c91bd",
        "type": "interval",
        "z": "1b09e6f66e3e08e7",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": true,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 3530,
        "y": 840,
        "wires": [
            [
                "3ad11e8763a1a678"
            ]
        ]
    },
    {
        "id": "5057b5faf6ebad17",
        "type": "inject",
        "z": "1b09e6f66e3e08e7",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1970,
        "y": 1780,
        "wires": [
            [
                "e8644d80534e1675"
            ]
        ]
    },
    {
        "id": "dfe1d94cddd7d855",
        "type": "mqtt out",
        "z": "218248942407c29a",
        "name": "",
        "topic": "INC_INV3",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf5ddb6c5930fafc",
        "x": 1115,
        "y": 320,
        "wires": [],
        "l": false
    },
    {
        "id": "fd92247130b88cc3",
        "type": "mqtt out",
        "z": "218248942407c29a",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "",
        "topic": "ENGINE_1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bf5ddb6c5930fafc",
        "x": 1330,
        "y": 740,
        "wires": []
    },
    {
        "id": "e49daaa61deabaf9",
        "type": "function",
        "z": "218248942407c29a",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "function 1",
        "func": "const inverterNames = [\"B01.INV01\", \"B01.INV02\", \"B01.INV03\", \"B01.INV04\",\n                       \"B02.INV01\", \"B02.INV02\", \"B02.INV03\", \"B02.INV04\",\n                       \"B05.INV01\", \"B05.INV02\"];\nconst payload = {};\n\nfor (const name of inverterNames) {\n    const invData = global.get(name);\n    if (invData && typeof invData === \"object\") {\n        payload[name] = {\n            QAC_LIMIT_CMD: invData.QAC_LIMIT_CMD || 0,\n            finalMVAr: invData.finalMVAr || 0,\n            PAC: invData.PAC || 0,\n            PF: invData.PF || 0,\n            QAC: invData.QAC || 0,\n            OLD_QAC_LIMIT: invData.OLD_QAC_LIMIT || 0,\n            OLD_QAC_REF_SEL: invData.OLD_QAC_REF_SEL || 0,\n            OLD_PAC_LIMIT: invData.OLD_PAC_LIMIT || 0\n        };\n    } else {\n        node.warn(\"Missing or invalid data for \" + name);\n    }\n}\n\nmsg.payload = payload;\nmsg.topic = \"inverter/status/B01\";  // 🔁 Adjust this topic as needed\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 740,
        "wires": [
            [
                "d41d5b7390d59fd2",
                "fd92247130b88cc3"
            ]
        ]
    },
    {
        "id": "d41d5b7390d59fd2",
        "type": "debug",
        "z": "218248942407c29a",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 680,
        "wires": []
    },
    {
        "id": "54d9750c22bfe598",
        "type": "interval",
        "z": "218248942407c29a",
        "d": true,
        "g": "e5f15136f28abf49",
        "name": "interval",
        "interval": "250",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": false,
        "unit": "milliseconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 870,
        "y": 740,
        "wires": [
            [
                "e49daaa61deabaf9"
            ]
        ]
    },
    {
        "id": "b77cf9d090968660",
        "type": "mqtt in",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "",
        "topic": "QAC_LIMIT_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 880,
        "wires": [
            [
                "816344a16ff639d0",
                "4dd8c0bf9ebdce9f"
            ]
        ]
    },
    {
        "id": "816344a16ff639d0",
        "type": "debug",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "debug 2317",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 840,
        "wires": []
    },
    {
        "id": "4dd8c0bf9ebdce9f",
        "type": "function",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "function 237",
        "func": "var obj = {};\nfor (var i = 0; i < msg.payload.length; i++) {\n    var tag_val = msg.payload[i].tag_val\n    var value = msg.payload[i].value\n    global.set(tag_val, value)\n    obj.payload = { tag_val: tag_val, value: value }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "4049f866849855a1",
        "type": "mqtt in",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "",
        "topic": "PAC_LIMIT_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 980,
        "wires": [
            [
                "4e40373eead0aea1",
                "5d397aefcc5d60cd"
            ]
        ]
    },
    {
        "id": "4e40373eead0aea1",
        "type": "function",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "function 2",
        "func": "var tag_val = \"PAC_LIMIT_CMD\"; // This is the name of the global variable you want to set\n\n// Example value you want to store globally\n// You can replace this with a real value, e.g., from msg.payload\nvar value = msg.payload.PAC_LIMIT_CMD_1;\n\n// Set the value as a global variable using the tag name\nglobal.set(tag_val, value);\n\n// (Optional) Add a confirmation to the payload\nmsg.payload = `Global variable '${tag_val}' set to: ${value}`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "5d397aefcc5d60cd",
        "type": "debug",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 940,
        "wires": []
    },
    {
        "id": "16fda522619dd6da",
        "type": "mqtt in",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "",
        "topic": "QAC_REF_SEL_WR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 920,
        "y": 1060,
        "wires": [
            [
                "5c5bdda363adbe24",
                "dc911f60ce19d62e"
            ]
        ]
    },
    {
        "id": "5c5bdda363adbe24",
        "type": "function",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "function 3",
        "func": "var tag_val = \"QAC_REF_SEL_CMD\"; // This is the name of the global variable you want to set\n\n// Example value you want to store globally\n// You can replace this with a real value, e.g., from msg.payload\nvar value = msg.payload.QAC_REF_SEL_CMD;\n\n// Set the value as a global variable using the tag name\nglobal.set(tag_val, value);\n\n// (Optional) Add a confirmation to the payload\nmsg.payload = `Global variable '${tag_val}' set to: ${value}`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "dc911f60ce19d62e",
        "type": "debug",
        "z": "218248942407c29a",
        "d": true,
        "g": "3cc02013749296b6",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1a8ae1edc8a93637",
        "type": "template",
        "z": "218248942407c29a",
        "name": "PAC SDF",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27.INV01.PAC+B27.INV02.PAC+B28.INV01.PAC+B28.INV02.PAC+B29.INV01.PAC+B29.INV02.PAC+B30.INV01.PAC+B30.INV02.PAC+B31.INV01.PAC+B31.INV02.PAC+B32.INV01.PAC+B32.INV02.PAC+B34.INV01.PAC+B34.INV02.PAC+B35.INV01.PAC+B35.INV02.PAC+B37.INV01.PAC+B37.INV02.PAC+B38.INV01.PAC+B38.INV02.PAC+B39.INV01.PAC+B39.INV02.PAC+B40.INV01.PAC+B40.INV02.PAC+B43.INV01.PAC+B43.INV02.PAC+B45.INV01.PAC+B45.INV02.PAC+B46.INV01.PAC+B46.INV02.PAC,SUM,B03,B03_VR_INV,VR_INV,VR_INV,INV,PAC,PAC,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 340,
        "y": 220,
        "wires": [
            [
                "b8c9e6031779fd8b"
            ]
        ]
    },
    {
        "id": "d7aa89b49317d879",
        "type": "template",
        "z": "218248942407c29a",
        "name": "QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27.INV01.QAC+B27.INV02.QAC+B28.INV01.QAC+B28.INV02.QAC+B29.INV01.QAC+B29.INV02.QAC+B30.INV01.QAC+B30.INV02.QAC+B31.INV01.QAC+B31.INV02.QAC+B32.INV01.QAC+B32.INV02.QAC+B34.INV01.QAC+B34.INV02.QAC+B35.INV01.QAC+B35.INV02.QAC+B37.INV01.QAC+B37.INV02.QAC+B38.INV01.QAC+B38.INV02.QAC+B39.INV01.QAC+B39.INV02.QAC+B40.INV01.QAC+B40.INV02.QAC+B43.INV01.QAC+B43.INV02.QAC+B45.INV01.QAC+B45.INV02.QAC+B46.INV01.QAC+B46.INV02.QAC,SUM,B03,B03_VR_INV,VR_INV,VR_INV,INV,QAC,QAC,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 340,
        "y": 260,
        "wires": [
            [
                "9e7ec77d5b606af2"
            ]
        ]
    },
    {
        "id": "bf9a7b5b73aaf1ab",
        "type": "template",
        "z": "218248942407c29a",
        "name": "PF SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B12.INV02.PF+B12.INV03.PF+B12.INV04.PF+B13.INV01.PF+B13.INV02.PF+B13.INV03.PF+B13.INV04.PF+B14.INV01.PF+B14.INV02.PF+B14.INV03.PF+B14.INV04.PF+B15.INV01.PF+B15.INV02.PF+B15.INV03.PF+B15.INV04.PF+B16.INV01.PF+B16.INV02.PF+B16.INV03.PF+B16.INV04.PF+B17.INV01.PF+B17.INV02.PF+B17.INV03.PF+B17.INV04.PF+B18.INV01.PF+B18.INV02.PF,AVG,B03,B03_VR_INV,VR_INV,VR_INV,INV,PF,PF,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 340,
        "y": 300,
        "wires": [
            [
                "61136f2aef893d59"
            ]
        ]
    },
    {
        "id": "98701ea5e6a4cb5e",
        "type": "template",
        "z": "218248942407c29a",
        "name": "OLD PAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27.INV01.OLD_PAC_LIMIT+B27.INV02.OLD_PAC_LIMIT+B28.INV01.OLD_PAC_LIMIT+B28.INV02.OLD_PAC_LIMIT+B29.INV01.OLD_PAC_LIMIT+B29.INV02.OLD_PAC_LIMIT+B30.INV01.OLD_PAC_LIMIT+B30.INV02.OLD_PAC_LIMIT+B31.INV01.OLD_PAC_LIMIT+B31.INV02.OLD_PAC_LIMIT+B32.INV01.OLD_PAC_LIMIT+B32.INV02.OLD_PAC_LIMIT+B34.INV01.OLD_PAC_LIMIT+B34.INV02.OLD_PAC_LIMIT+B35.INV01.OLD_PAC_LIMIT+B35.INV02.OLD_PAC_LIMIT+B37.INV01.OLD_PAC_LIMIT+B37.INV02.OLD_PAC_LIMIT+B38.INV01.OLD_PAC_LIMIT+B38.INV02.OLD_PAC_LIMIT+B39.INV01.OLD_PAC_LIMIT+B39.INV02.OLD_PAC_LIMIT+B40.INV01.OLD_PAC_LIMIT+B40.INV02.OLD_PAC_LIMIT+B43.INV01.OLD_PAC_LIMIT+B43.INV02.OLD_PAC_LIMIT+B45.INV01.OLD_PAC_LIMIT+B45.INV02.OLD_PAC_LIMIT+B46.INV01.OLD_PAC_LIMIT+B46.INV02.OLD_PAC_LIMIT,SUM,B03,B03_VR_INV,VR_INV,VR_INV,INV,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 360,
        "y": 340,
        "wires": [
            [
                "74b42b21ee38b3c4"
            ]
        ]
    },
    {
        "id": "96cb7fcaf0ee8a7e",
        "type": "template",
        "z": "218248942407c29a",
        "name": "OLD QAC SDF ",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27.INV01.OLD_QAC_LIMIT+B27.INV02.OLD_QAC_LIMIT+B28.INV01.OLD_QAC_LIMIT+B28.INV02.OLD_QAC_LIMIT+B29.INV01.OLD_QAC_LIMIT+B29.INV02.OLD_QAC_LIMIT+B30.INV01.OLD_QAC_LIMIT+B30.INV02.OLD_QAC_LIMIT+B31.INV01.OLD_QAC_LIMIT+B31.INV02.OLD_QAC_LIMIT+B32.INV01.OLD_QAC_LIMIT+B32.INV02.OLD_QAC_LIMIT+B34.INV01.OLD_QAC_LIMIT+B34.INV02.OLD_QAC_LIMIT+B35.INV01.OLD_QAC_LIMIT+B35.INV02.OLD_QAC_LIMIT+B37.INV01.OLD_QAC_LIMIT+B37.INV02.OLD_QAC_LIMIT+B38.INV01.OLD_QAC_LIMIT+B38.INV02.OLD_QAC_LIMIT+B39.INV01.OLD_QAC_LIMIT+B39.INV02.OLD_QAC_LIMIT+B40.INV01.OLD_QAC_LIMIT+B40.INV02.OLD_QAC_LIMIT+B43.INV01.OLD_QAC_LIMIT+B43.INV02.OLD_QAC_LIMIT+B45.INV01.OLD_QAC_LIMIT+B45.INV02.OLD_QAC_LIMIT+B46.INV01.OLD_QAC_LIMIT+B46.INV02.OLD_QAC_LIMIT,SUM,B03,B03_VR_INV,VR_INV,VR_INV,INV,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "e870e6966bd60dfa"
            ]
        ]
    },
    {
        "id": "8e410fc0ee233d45",
        "type": "template",
        "z": "218248942407c29a",
        "name": "OLD_QAC_REF_SEL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27.INV01.OLD_QAC_REF_SEL+B27.INV02.OLD_QAC_REF_SEL+B28.INV01.OLD_QAC_REF_SEL+B28.INV02.OLD_QAC_REF_SEL+B29.INV01.OLD_QAC_REF_SEL+B29.INV02.OLD_QAC_REF_SEL+B30.INV01.OLD_QAC_REF_SEL+B30.INV02.OLD_QAC_REF_SEL+B31.INV01.OLD_QAC_REF_SEL+B31.INV02.OLD_QAC_REF_SEL+B32.INV01.OLD_QAC_REF_SEL+B32.INV02.OLD_QAC_REF_SEL+B34.INV01.OLD_QAC_REF_SEL+B34.INV02.OLD_QAC_REF_SEL+B35.INV01.OLD_QAC_REF_SEL+B35.INV02.OLD_QAC_REF_SEL+B37.INV01.OLD_QAC_REF_SEL+B37.INV02.OLD_QAC_REF_SEL+B38.INV01.OLD_QAC_REF_SEL+B38.INV02.OLD_QAC_REF_SEL+B39.INV01.OLD_QAC_REF_SEL+B39.INV02.OLD_QAC_REF_SEL+B40.INV01.OLD_QAC_REF_SEL+B40.INV02.OLD_QAC_REF_SEL+B43.INV01.OLD_QAC_REF_SEL+B43.INV02.OLD_QAC_REF_SEL+B45.INV01.OLD_QAC_REF_SEL+B45.INV02.OLD_QAC_REF_SEL+B46.INV01.OLD_QAC_REF_SEL+B46.INV02.OLD_QAC_REF_SEL,AVG,B03,B03_VR_INV,VR_INV,VR_INV,INV,OLD_QAC_REF_SEL,OLD_QAC_REF_SEL,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 380,
        "y": 420,
        "wires": [
            [
                "86a6212865d2ec53"
            ]
        ]
    },
    {
        "id": "b8c9e6031779fd8b",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 610,
        "y": 220,
        "wires": [
            [
                "054652b05be51bf3"
            ]
        ]
    },
    {
        "id": "9e7ec77d5b606af2",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 610,
        "y": 260,
        "wires": [
            [
                "ba70090167aa83a0"
            ]
        ]
    },
    {
        "id": "61136f2aef893d59",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 610,
        "y": 300,
        "wires": [
            [
                "56ad65cb0138c60f"
            ]
        ]
    },
    {
        "id": "74b42b21ee38b3c4",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 610,
        "y": 340,
        "wires": [
            [
                "d00b3c354f68425a"
            ]
        ]
    },
    {
        "id": "e870e6966bd60dfa",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "7f8ca7b79df3a9b9"
            ]
        ]
    },
    {
        "id": "86a6212865d2ec53",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 610,
        "y": 420,
        "wires": [
            [
                "9d80b35089238532"
            ]
        ]
    },
    {
        "id": "054652b05be51bf3",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++)\n{\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\")\n    {\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                \n            }\n            else\n            {\n                val = val + 0;;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\")\n    {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined)\n            {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else\n            {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;  \n   \n    }\n\n   \n        val = (val * msg.payload[i].mf).toFixed(2);\n        val = parseFloat(val)\n        var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n        global.set(tag_name, val)\n\n         var length = flow.get(\"length\")\n\n         var value = global.get(tag_name)\n\n            obj.payload = {\n                value: value,\n                b: msg.payload[i].b,\n                bd: msg.payload[i].bd,\n                d: msg.payload[i].d,\n                dd: msg.payload[i].dd,\n                dt: msg.payload[i].dt,\n                f: msg.payload[i].f,\n                fd: msg.payload[i].fd,\n                h: msg.payload[i].h,\n                iid: msg.payload[i].iid,\n                m: msg.payload[i].m,\n                p: msg.payload[i].p,\n                qu: msg.payload[i].qu,\n                text: msg.payload[i].text,\n                u: msg.payload[i].u,\n                mf: msg.payload[i].mf,\n                reg_id: msg.payload[i].vr_wr_reg,\n                data_type: msg.payload[i].data_type,\n                qty: msg.payload[i].qty,\n                fc: msg.payload[i].fc,\n                SNo: msg.payload[i].SNo,\n                time: time,        \n            }\n            node.send(obj)\n    }\n\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 220,
        "wires": [
            [
                "d8429c3c65c98399",
                "741703ef52269768"
            ]
        ]
    },
    {
        "id": "ba70090167aa83a0",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;        \n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n    var length = flow.get(\"length\")\n\n     var value = global.get(tag_name)\n   \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 260,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "56ad65cb0138c60f",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "d00b3c354f68425a",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n    \n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,\n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 340,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "7f8ca7b79df3a9b9",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n    var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "d8429c3c65c98399"
            ]
        ]
    },
    {
        "id": "9d80b35089238532",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var length = arr_length;\n        flow.set(\"length\", length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d8429c3c65c98399",
        "type": "join",
        "z": "218248942407c29a",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 970,
        "y": 320,
        "wires": [
            [
                "dfe1d94cddd7d855"
            ]
        ]
    },
    {
        "id": "6589fd70f47f071a",
        "type": "template",
        "z": "218248942407c29a",
        "name": "NO_OF_INV_ONLINE",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n7,NO_OF_INV,SUM,B03,B03_VR_INV,VR_INV,VR_INV,INV,NO_OF_INV,NO_OF_INV,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 380,
        "y": 500,
        "wires": [
            [
                "9afcf6e61fb5608a"
            ]
        ]
    },
    {
        "id": "9afcf6e61fb5608a",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 610,
        "y": 500,
        "wires": [
            [
                "e9012506857fdea8"
            ]
        ]
    },
    {
        "id": "67dc8cd08db9384b",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "    var length = flow.get(\"length\")\n    global.set(\"No_of_Inv\", length)\n    if(length != 0)\n    {\n        var time = new Date().getTime()\n        var obj = {};\n        obj.payload = {\n            value:length,\n            b: msg.payload.b,\n            bd: msg.payload.bd,\n            d: msg.payload.d,\n            dd: msg.payload.dd,\n            dt: msg.payload.dt,\n            f: msg.payload.f,\n            fd: msg.payload.fd,\n            h: msg.payload.h,\n            iid: msg.payload.iid,\n            m: msg.payload.m,\n            p: msg.payload.p,\n            qu: msg.payload.qu,     \n            u: msg.payload.u,\n            mf: msg.payload.mf,        \n            SNo: msg.payload.SNo, \n            time:time     \n     \n    }\n    node.send(obj)\n    }\n    return null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e9012506857fdea8",
        "type": "split",
        "z": "218248942407c29a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 500,
        "wires": [
            [
                "67dc8cd08db9384b"
            ]
        ]
    },
    {
        "id": "741703ef52269768",
        "type": "debug",
        "z": "218248942407c29a",
        "name": "debug 2404",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 220,
        "wires": []
    },
    {
        "id": "f9e01fe74e09583a",
        "type": "interval",
        "z": "218248942407c29a",
        "name": "interval",
        "interval": "1",
        "onstart": false,
        "msg": "msg.payload",
        "showstatus": false,
        "unit": "seconds",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "1a8ae1edc8a93637",
                "d7aa89b49317d879",
                "98701ea5e6a4cb5e",
                "96cb7fcaf0ee8a7e"
            ]
        ]
    },
    {
        "id": "f82449cb8ffb3c57",
        "type": "template",
        "z": "218248942407c29a",
        "name": "PV_ST SDF",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B12.INV02.PV_ST+B12.INV03.PV_ST+B12.INV04.PV_ST+B13.INV01.PV_ST+B13.INV02.PV_ST+B13.INV03.PV_ST+B13.INV04.PV_ST+B14.INV01.PV_ST+B14.INV02.PV_ST+B14.INV03.PV_ST+B14.INV04.PV_ST+B15.INV01.PV_ST+B15.INV02.PV_ST+B15.INV03.PV_ST+B15.INV04.PV_ST+B16.INV01.PV_ST+B16.INV02.PV_ST+B16.INV03.PV_ST+B16.INV04.PV_ST+B17.INV01.PV_ST+B17.INV02.PV_ST+B17.INV03.PV_ST+B17.INV04.PV_ST+B18.INV01.PV_ST+B18.INV02.PV_ST,AVG,B03,B03_VR_INV,VR_INV,VR_INV,INV,PV_ST,PV_ST,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 350,
        "y": 460,
        "wires": [
            [
                "f325ad86148a7e0d"
            ]
        ]
    },
    {
        "id": "f325ad86148a7e0d",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 610,
        "y": 460,
        "wires": [
            [
                "c991cb685aa86604"
            ]
        ]
    },
    {
        "id": "c991cb685aa86604",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\n\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\") {\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined) {\n                val = val + tmp_val\n            }\n            else {\n                val = val + 0;\n            }\n        }\n    }\n    else if (msg.payload[i].type == \"AVG\") {\n        var arr_length = 0\n        for (var j = 0; j < arr.length; j++) {\n            var tmp_val = global.get(arr[j])\n            if (tmp_val != \"NaN\" && tmp_val != \"nan\" && tmp_val != undefined && tmp_val == 7) {\n                val = val + tmp_val\n                arr_length++;\n            }\n            else {\n                val = val + 0;\n            }\n        }\n        val = val / arr_length;\n        var svg_length = arr_length;\n        flow.set(\"svg_length\", svg_length)\n        global.set(\"svg_length\", svg_length)\n    }\n\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n    var tag_name = msg.payload[i].b + '.' + msg.payload[i].d + '.' + msg.payload[i].f\n    global.set(tag_name, val)\n\n     var value = global.get(tag_name)\n\n        obj.payload = {\n            value: value,\n            b: msg.payload[i].b,\n            bd: msg.payload[i].bd,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            qu: msg.payload[i].qu,\n            text: msg.payload[i].text,\n            u: msg.payload[i].u,\n            mf: msg.payload[i].mf,\n            reg_id: msg.payload[i].vr_wr_reg,\n            data_type: msg.payload[i].data_type,\n            qty: msg.payload[i].qty,\n            fc: msg.payload[i].fc,\n            SNo: msg.payload[i].SNo,\n            time: time,        \n        }\n        node.send(obj)\n    }\n\n//msg.payload = { length: length }\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "8bef1747385f0dae",
        "type": "template",
        "z": "218248942407c29a",
        "name": "NO_OF_INV_Q",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n8,NO_OF_INV_Q,SUM,B03,B03_VR_INV,VR_INV,VR_INV,INV,NO_OF_INV_Q,NO_OF_INV_Q,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "d87cedf76c6c210d"
            ]
        ]
    },
    {
        "id": "d87cedf76c6c210d",
        "type": "csv",
        "z": "218248942407c29a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 610,
        "y": 540,
        "wires": [
            [
                "5b8e7e5d825a0cfd"
            ]
        ]
    },
    {
        "id": "c4a87b52feea7510",
        "type": "function",
        "z": "218248942407c29a",
        "name": "To_MQTT",
        "func": "    var length = flow.get(\"length\")\n    var svg_length = flow.get(\"svg_length\")\n    var PAC = global.get(\"CR_EM_PAC\")\n    var Inverter_online_Q\n    \n    if (PAC > 0) \n    {\n        Inverter_online_Q = length\n    }\n\n    else if (PAC <= 0)\n    {\n        Inverter_online_Q = svg_length \n    } \n\nglobal.set(\"No_of_Inv_Q\", Inverter_online_Q)\n    \n    if(length != 0)\n    {\n        var time = new Date().getTime()\n        var obj = {};\n        obj.payload = {\n            value: Inverter_online_Q,\n            b: msg.payload.b,\n            bd: msg.payload.bd,\n            d: msg.payload.d,\n            dd: msg.payload.dd,\n            dt: msg.payload.dt,\n            f: msg.payload.f,\n            fd: msg.payload.fd,\n            h: msg.payload.h,\n            iid: msg.payload.iid,\n            m: msg.payload.m,\n            p: msg.payload.p,\n            qu: msg.payload.qu,     \n            u: msg.payload.u,\n            mf: msg.payload.mf,        \n            SNo: msg.payload.SNo, \n            time:time     \n     \n    }\n    node.send(obj)\n    }\n    return null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5b8e7e5d825a0cfd",
        "type": "split",
        "z": "218248942407c29a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 540,
        "wires": [
            [
                "c4a87b52feea7510"
            ]
        ]
    },
    {
        "id": "06838ca4ecc805a4",
        "type": "mqtt in",
        "z": "218248942407c29a",
        "g": "0b44583fe815f412",
        "name": "",
        "topic": "INC_INV1_WR",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "bf5ddb6c5930fafc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 720,
        "wires": [
            [
                "5a169ba3e4a317bb",
                "af79c49e46a0a514"
            ]
        ]
    },
    {
        "id": "5a169ba3e4a317bb",
        "type": "function",
        "z": "218248942407c29a",
        "d": true,
        "g": "0b44583fe815f412",
        "name": "function 234",
        "func": "var obj = {};\nvar field = msg.payload; \nvar no_of_inv = flow.get(\"length\");  \n\n// Check if 'field' is defined and is a string\nif (msg.payload.PAC_LIMIT_CMD) {\n    var tag_field = msg.payload.f;\n    var actual_pac_limit = msg.payload.value;\n    global.set(tag_field, actual_pac_limit);\n}\nelse if (msg.payload.QAC_LIMIT_CMD) {\n    var tag_field = msg.payload.f;\n    var actual_qac_limit = msg.payload.value;\n    global.set(tag_field, actual_qac_limit);\n}\nelse if (msg.payload.QAC_REF_SEL) {\n    var tag_field = msg.payload.f;\n    var actual_qac_ref_sel = msg.payload.value;\n    global.set(tag_field, actual_qac_ref_sel);\n}\n\n\n// Return null as per original code\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 680,
        "wires": [
            [
                "6d1da05cbbcfa8ee"
            ]
        ]
    },
    {
        "id": "6d1da05cbbcfa8ee",
        "type": "debug",
        "z": "218248942407c29a",
        "g": "0b44583fe815f412",
        "name": "debug 2328",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 680,
        "wires": []
    },
    {
        "id": "af79c49e46a0a514",
        "type": "function",
        "z": "218248942407c29a",
        "g": "0b44583fe815f412",
        "name": "function 235",
        "func": "// Get the key and value from the incoming object\nvar payload = msg.payload;\nvar inverteronline = global.get(\"No_of_Inv\")\n\n// Extract the first (and only) key from the object\n//active power\nvar tag_field1 = Object.keys(payload)[0];\nvar tag_val1 = payload[tag_field1];\nvar tag_value1 = tag_val1\n//var tag_value1 = 20000\n//var tag_value1 = undefined\n\n\n//reactive power\nvar tag_field2 = Object.keys(payload)[1];\nvar tag_val2 = payload[tag_field2];\nvar tag_value2 = tag_val2 \n\n//reactive power ref selection\nvar tag_field3 = Object.keys(payload)[2];\nvar tag_val3 = payload[tag_field3];\nvar tag_value3 = tag_val3\n\n\n// Set the global variable with the dynamic key and value\nglobal.set(tag_field1, tag_value1);\nglobal.set(tag_field2, tag_value2);\nglobal.set(tag_field3, tag_value3);\n\n\n// Return the modified message object or null as per the original flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 720,
        "wires": [
            [
                "641dcc8a2eda7aef"
            ]
        ]
    },
    {
        "id": "641dcc8a2eda7aef",
        "type": "debug",
        "z": "218248942407c29a",
        "g": "0b44583fe815f412",
        "name": "debug 2772",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 720,
        "wires": []
    },
    {
        "id": "3ce5c8a0fadc9f91",
        "type": "function",
        "z": "218248942407c29a",
        "d": true,
        "g": "0b44583fe815f412",
        "name": "function 4",
        "func": "// Get the key and value from the incoming object\nvar payload = msg.payload;\nvar inverteronline = global.get(\"No_of_Inv\")\n\n// Extract the first (and only) key from the object\nvar tag_field = Object.keys(payload)[0];\nvar tag_val = payload[tag_field];\n//var tag_value = tag_val \n//var tag_value = 20000\nvar tag_value = undefined\n\n\n//reactive power\nvar tag_field1 = Object.keys(payload)[1];\nvar tag_val1 = payload[tag_field1];\nvar tag_value1 = tag_val1 \n\n//reactive power ref selection\nvar tag_field2 = Object.keys(payload)[2];\nvar tag_val2 = payload[tag_field2];\nvar tag_value2 = tag_val2\n\n//radiation\nvar tag_field3 = Object.keys(payload)[3];\nvar tag_val3 = payload[tag_field3];\nvar tag_value3 = tag_val3 \n\n\n//em pac\nvar tag_field4 = Object.keys(payload)[4];\nvar tag_val4 = payload[tag_field4];\nvar tag_value4 = tag_val4 \n\n\n// Set the global variable with the dynamic key and value\nglobal.set(tag_field, tag_value);\nglobal.set(tag_field1, tag_value1);\nglobal.set(tag_field2, tag_value2);\nglobal.set(tag_field3, tag_value3);\nglobal.set(tag_field4, tag_value4);\n\n\n// Return the modified message object or null as per the original flow\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "a48fbbafe71a3c78",
        "type": "function",
        "z": "218248942407c29a",
        "g": "8a8e68d8fde2a0ee",
        "name": "function 5",
        "func": "// incoming object from msg.payload\nconst input = msg.payload;\n\n// define which blocks you want to keep\nconst allowedBlocks = [\n  \"B27\", \"B28\", \"B29\", \"B30\", \"B31\",\n  \"B32\", \"B34\", \"B35\", \"B36\", \"B37\",\n  \"B38\", \"B39\", \"B40\", \"B43\", \"B45\",\n  \"B46\"\n];\n\nlet filtered = {};\n\n// loop and copy only allowed blocks\nfor (let block of allowedBlocks) {\n    if (input.hasOwnProperty(block)) {\n        filtered[block] = input[block];\n    }\n}\n\nmsg.payload = filtered;\nglobal.set(\"RM_COMM\",msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 920,
        "wires": [
            [
                "c5025979c95d8993"
            ]
        ]
    },
    {
        "id": "c5025979c95d8993",
        "type": "debug",
        "z": "218248942407c29a",
        "g": "8a8e68d8fde2a0ee",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 900,
        "wires": []
    },
    {
        "id": "f2ed2bcee2b26bd9",
        "type": "mqtt in",
        "z": "218248942407c29a",
        "g": "8a8e68d8fde2a0ee",
        "name": "",
        "topic": "RM_COMM",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4012a214602a528a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 920,
        "wires": [
            [
                "a48fbbafe71a3c78"
            ]
        ]
    },
    {
        "id": "caa34a6ce5c070c3",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "1fd6f265b24c43f7",
                "1379e6da953f390d"
            ]
        ]
    },
    {
        "id": "696aad116011f9f1",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B37_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B37,B37-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B37,B37-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B37,B37-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B37,B37-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B37,B37-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B37,B37-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B37,B37-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "a3a4524074ea89a3"
            ]
        ]
    },
    {
        "id": "a3a4524074ea89a3",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 80,
        "wires": [
            [
                "410ced895003e0ff"
            ]
        ]
    },
    {
        "id": "410ced895003e0ff",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "2375be6439f16747",
        "type": "debug",
        "z": "bc7021b6e14a6496",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 600,
        "wires": []
    },
    {
        "id": "042a4deba70a4ec4",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B37_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B37,B37-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B37,B37-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B37,B37-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B37,B37-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B37,B37-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B37,B37-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B37,B37-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 120,
        "wires": [
            [
                "e4698971a95837e0"
            ]
        ]
    },
    {
        "id": "e4698971a95837e0",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 120,
        "wires": [
            [
                "1643fcdcd1b72dc8"
            ]
        ]
    },
    {
        "id": "1643fcdcd1b72dc8",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 120,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "5c4ada8f574124f3",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 200,
        "wires": [
            [
                "b7a71f39b0cc8169"
            ]
        ]
    },
    {
        "id": "b7a71f39b0cc8169",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 200,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "bb9d267bb7f9f9f9",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 240,
        "wires": [
            [
                "46ef9da62e6f5b35"
            ]
        ]
    },
    {
        "id": "46ef9da62e6f5b35",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 240,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "67097d8a3cfc3a97",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "f8c505e6626ca572"
            ]
        ]
    },
    {
        "id": "f8c505e6626ca572",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 320,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "d7231759880ce105",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 360,
        "wires": [
            [
                "aacadfd60543f481"
            ]
        ]
    },
    {
        "id": "aacadfd60543f481",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 360,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "9cbae90462ec1367",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 440,
        "wires": [
            [
                "b9244a5c9a26c1d5"
            ]
        ]
    },
    {
        "id": "b9244a5c9a26c1d5",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 440,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "5666d86dee11fd2e",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 480,
        "wires": [
            [
                "eca352401a2ffe7b"
            ]
        ]
    },
    {
        "id": "eca352401a2ffe7b",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "1fd6f265b24c43f7",
        "type": "influxdb batch",
        "z": "bc7021b6e14a6496",
        "d": true,
        "influxdb": "ea571d30B431616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 1350,
        "y": 540,
        "wires": []
    },
    {
        "id": "358153a8276127ec",
        "type": "inject",
        "z": "bc7021b6e14a6496",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 640,
        "wires": [
            [
                "4d2974c4dc374531"
            ]
        ]
    },
    {
        "id": "b2cfe5c30667ab5c",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B38_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B38,B38-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B38,B38-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B38,B38-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B38,B38-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B38,B38-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B38,B38-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B38,B38-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "5c4ada8f574124f3"
            ]
        ]
    },
    {
        "id": "f5567c291e1d73d7",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B38_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B38,B38-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B38,B38-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B38,B38-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B38,B38-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B38,B38-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B38,B38-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B38,B38-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "bb9d267bb7f9f9f9"
            ]
        ]
    },
    {
        "id": "fdd8d8ce26cac96c",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B39_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B39,B39-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B39,B39-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B39,B39-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B39,B39-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B39,B39-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B39,B39-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B39,B39-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "67097d8a3cfc3a97"
            ]
        ]
    },
    {
        "id": "a91f5890797a602b",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B39_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B39,B39-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B39,B39-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B39,B39-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B39,B39-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B39,B39-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B39,B39-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B39,B39-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "d7231759880ce105"
            ]
        ]
    },
    {
        "id": "86cabf56a4aa6033",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B40_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B40,B40-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B40,B40-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B40,B40-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B40,B40-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B40,B40-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B40,B40-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B40,B40-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 440,
        "wires": [
            [
                "9cbae90462ec1367"
            ]
        ]
    },
    {
        "id": "7cbefe44c4e69ab0",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B40_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B40,B40-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B40,B40-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B40,B40-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B40,B40-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B40,B40-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B40,B40-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B40,B40-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "5666d86dee11fd2e"
            ]
        ]
    },
    {
        "id": "38f6587deaaa6a3b",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B45_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B45,B45-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B45,B45-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B45,B45-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B45,B45-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B45,B45-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B45,B45-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B45,B45-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 560,
        "wires": [
            [
                "9da33f0f42a697e2"
            ]
        ]
    },
    {
        "id": "39424c2dad8e50a7",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B45_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B45,B45-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B45,B45-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B45,B45-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B45,B45-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B45,B45-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B45,B45-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B45,B45-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 600,
        "wires": [
            [
                "3c2f935f24e74B40"
            ]
        ]
    },
    {
        "id": "9da33f0f42a697e2",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 560,
        "wires": [
            [
                "d9d14458543720f5"
            ]
        ]
    },
    {
        "id": "d9d14458543720f5",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 560,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "3c2f935f24e74B40",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 600,
        "wires": [
            [
                "8eac7a0557699568"
            ]
        ]
    },
    {
        "id": "8eac7a0557699568",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 600,
        "wires": [
            [
                "34e7019dbB39ca1c"
            ]
        ]
    },
    {
        "id": "24775a11dff3efcb",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B46_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B46,B46-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B46,B46-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B46,B46-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B46,B46-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B46,B46-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B46,B46-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B46,B46-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 680,
        "wires": [
            [
                "b7555b5a91da52c0"
            ]
        ]
    },
    {
        "id": "b7555b5a91da52c0",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 680,
        "wires": [
            [
                "826090648a6c5fdb"
            ]
        ]
    },
    {
        "id": "826090648a6c5fdb",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 680,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "c3cf3828a6ae42ec",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B46_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B46,B46-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B46,B46-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B46,B46-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B46,B46-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B46,B46-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B46,B46-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B46,B46-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 720,
        "wires": [
            [
                "8464df2dad97a2a1"
            ]
        ]
    },
    {
        "id": "8464df2dad97a2a1",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 720,
        "wires": [
            [
                "3ca9e0110073dc4b"
            ]
        ]
    },
    {
        "id": "3ca9e0110073dc4b",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 720,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "0a69ea719e190a34",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 800,
        "wires": [
            [
                "718deB279ef71083"
            ]
        ]
    },
    {
        "id": "718deB279ef71083",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 800,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "b9ec0ee0084ba54c",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 840,
        "wires": [
            [
                "f1bff45a964bbdb6"
            ]
        ]
    },
    {
        "id": "f1bff45a964bbdb6",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 840,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "684ff2721343e6c0",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 920,
        "wires": [
            [
                "e9522555e4de4d09"
            ]
        ]
    },
    {
        "id": "e9522555e4de4d09",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 920,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "f5c050483733504b",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 960,
        "wires": [
            [
                "c26aaefc66510708"
            ]
        ]
    },
    {
        "id": "c26aaefc66510708",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 960,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "67aa203db62604ff",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1040,
        "wires": [
            [
                "415ac18cfc23b796"
            ]
        ]
    },
    {
        "id": "415ac18cfc23b796",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1040,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "5ee1f4a8226d7616",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1080,
        "wires": [
            [
                "1e3521c9eefeb3db"
            ]
        ]
    },
    {
        "id": "1e3521c9eefeb3db",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1080,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "8f4150e371320938",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B35_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B35,B35-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B35,B35-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B35,B35-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B35,B35-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B35,B35-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B35,B35-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B35,B35-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 800,
        "wires": [
            [
                "0a69ea719e190a34"
            ]
        ]
    },
    {
        "id": "9d040d2996189335",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B35_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B35,B35-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B35,B35-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B35,B35-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B35,B35-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B35,B35-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B35,B35-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B35,B35-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 840,
        "wires": [
            [
                "b9ec0ee0084ba54c"
            ]
        ]
    },
    {
        "id": "9545f441ac1c095f",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B36_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B36,B36-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B36,B36-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B36,B36-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B36,B36-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B36,B36-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B36,B36-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B36,B36-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 920,
        "wires": [
            [
                "684ff2721343e6c0"
            ]
        ]
    },
    {
        "id": "e13fb71fc55e1244",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B36_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B36,B36-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B36,B36-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B36,B36-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B36,B36-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B36,B36-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B36,B36-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B36,B36-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 960,
        "wires": [
            [
                "f5c050483733504b"
            ]
        ]
    },
    {
        "id": "2e127B4623904cfd",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B43_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B43,B43-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B43,B43-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B43,B43-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B43,B43-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B43,B43-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B43,B43-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B43,B43-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "67aa203db62604ff"
            ]
        ]
    },
    {
        "id": "271f3b6d7a86c0c7",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B43_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B43,B43-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B43,B43-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B43,B43-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B43,B43-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B43,B43-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B43,B43-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B43,B43-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "5ee1f4a8226d7616"
            ]
        ]
    },
    {
        "id": "ea829087784e2042",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B31_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B31,B31-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B31,B31-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B31,B31-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B31,B31-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B31,B31-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B31,B31-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B31,B31-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1160,
        "wires": [
            [
                "03303aed154d60e7"
            ]
        ]
    },
    {
        "id": "679687116577ce90",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B31_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B31,B31-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B31,B31-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B31,B31-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B31,B31-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B31,B31-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B31,B31-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B31,B31-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1200,
        "wires": [
            [
                "41a4f7d0aB323e4a"
            ]
        ]
    },
    {
        "id": "03303aed154d60e7",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1160,
        "wires": [
            [
                "4943038b2d9cc5ce"
            ]
        ]
    },
    {
        "id": "4943038b2d9cc5ce",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1160,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "41a4f7d0aB323e4a",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1200,
        "wires": [
            [
                "db78b4792ddec523"
            ]
        ]
    },
    {
        "id": "db78b4792ddec523",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1200,
        "wires": [
            [
                "f4eda9c7cbc80927"
            ]
        ]
    },
    {
        "id": "04e3954f27f6d608",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 640,
        "wires": [
            [
                "3c01cf3219666667",
                "d53aa5d2488ea96a"
            ]
        ]
    },
    {
        "id": "c74a16f7f582150e",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B27_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27,B27-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B27,B27-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B27,B27-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B27,B27-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B27,B27-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B27,B27-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B27,B27-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 320,
        "wires": [
            [
                "a488e2a7ffeaad59"
            ]
        ]
    },
    {
        "id": "a488e2a7ffeaad59",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 320,
        "wires": [
            [
                "135f8e47e9491df4"
            ]
        ]
    },
    {
        "id": "135f8e47e9491df4",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 320,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "b82677f5b287428f",
        "type": "debug",
        "z": "bc7021b6e14a6496",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3090,
        "y": 600,
        "wires": []
    },
    {
        "id": "29e95ea1a184faa9",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B27_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27,B27-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B27,B27-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B27,B27-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B27,B27-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B27,B27-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B27,B27-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B27,B27-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 360,
        "wires": [
            [
                "9fbf86d60f74f786"
            ]
        ]
    },
    {
        "id": "9fbf86d60f74f786",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 360,
        "wires": [
            [
                "7b4537f655bdfdd1"
            ]
        ]
    },
    {
        "id": "7b4537f655bdfdd1",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 360,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "50a6bc0a4aefbdfb",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 440,
        "wires": [
            [
                "f87a76161c0d5305"
            ]
        ]
    },
    {
        "id": "f87a76161c0d5305",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 440,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "68fe160a59794a74",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 480,
        "wires": [
            [
                "c3bb0041282dc44d"
            ]
        ]
    },
    {
        "id": "c3bb0041282dc44d",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 480,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "ee29eac41afa7a07",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 560,
        "wires": [
            [
                "79e064d024b3dba3"
            ]
        ]
    },
    {
        "id": "79e064d024b3dba3",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 560,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "172c5f7a007efbb9",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 600,
        "wires": [
            [
                "6a300d353e9b0009"
            ]
        ]
    },
    {
        "id": "6a300d353e9b0009",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 600,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "9136a095ed9384e9",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 680,
        "wires": [
            [
                "ded11B34ea760abb"
            ]
        ]
    },
    {
        "id": "ded11B34ea760abb",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 680,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "c70db4c83b6c9283",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 720,
        "wires": [
            [
                "6490406c8797a901"
            ]
        ]
    },
    {
        "id": "6490406c8797a901",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 720,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "3c01cf3219666667",
        "type": "influxdb batch",
        "z": "bc7021b6e14a6496",
        "d": true,
        "influxdb": "ea571d30B431616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 2910,
        "y": 600,
        "wires": []
    },
    {
        "id": "0301452f2ee50979",
        "type": "inject",
        "z": "bc7021b6e14a6496",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1650,
        "y": 640,
        "wires": [
            [
                "5704384bfb18daea"
            ]
        ]
    },
    {
        "id": "2f735a3b4d20acb4",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B28_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B28,B28-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B28,B28-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B28,B28-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B28,B28-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B28,B28-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B28,B28-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B28,B28-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 440,
        "wires": [
            [
                "50a6bc0a4aefbdfb"
            ]
        ]
    },
    {
        "id": "cd02971ab6ff38aa",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B28_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B28,B28-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B28,B28-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B28,B28-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B28,B28-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B28,B28-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B28,B28-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B28,B28-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 480,
        "wires": [
            [
                "68fe160a59794a74"
            ]
        ]
    },
    {
        "id": "e38a2db92da97149",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B29_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B29,B29-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B29,B29-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B29,B29-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B29,B29-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B29,B29-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B29,B29-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B29,B29-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 560,
        "wires": [
            [
                "ee29eac41afa7a07"
            ]
        ]
    },
    {
        "id": "45811681e89fcc80",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B29_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B29,B29-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B29,B29-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B29,B29-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B29,B29-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B29,B29-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B29,B29-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B29,B29-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 600,
        "wires": [
            [
                "172c5f7a007efbb9"
            ]
        ]
    },
    {
        "id": "0f39b2f05f59658a",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B30_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B30,B30-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B30,B30-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B30,B30-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B30,B30-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B30,B30-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B30,B30-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B30,B30-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 680,
        "wires": [
            [
                "9136a095ed9384e9"
            ]
        ]
    },
    {
        "id": "78ef2a0892641806",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B30_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B30,B30-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B30,B30-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B30,B30-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B30,B30-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B30,B30-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B30,B30-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B30,B30-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 720,
        "wires": [
            [
                "c70db4c83b6c9283"
            ]
        ]
    },
    {
        "id": "a60297c9f60eb59e",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B32_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B32,B32-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B32,B32-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B32,B32-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B32,B32-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B32,B32-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B32,B32-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B32,B32-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 800,
        "wires": [
            [
                "0ba8623777fd43fb"
            ]
        ]
    },
    {
        "id": "967210e271089726",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B32_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B32,B32-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B32,B32-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B32,B32-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B32,B32-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B32,B32-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B32,B32-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B32,B32-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 840,
        "wires": [
            [
                "08702065926eea6f"
            ]
        ]
    },
    {
        "id": "0ba8623777fd43fb",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 800,
        "wires": [
            [
                "4f10f164c146d0c5"
            ]
        ]
    },
    {
        "id": "4f10f164c146d0c5",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 800,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "08702065926eea6f",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 840,
        "wires": [
            [
                "93efB40675a2bf79"
            ]
        ]
    },
    {
        "id": "93efB40675a2bf79",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 840,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "65be42d77ab6465e",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B34_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B34,B34-INV01,INV01,INVERTER-01,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B34,B34-INV01,INV01,INVERTER-01,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B34,B34-INV01,INV01,INVERTER-01,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B34,B34-INV01,INV01,INVERTER-01,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B34,B34-INV01,INV01,INVERTER-01,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B34,B34-INV01,INV01,INVERTER-01,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B34,B34-INV01,INV01,INVERTER-01,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 900,
        "wires": [
            [
                "33a157f74B373a9c"
            ]
        ]
    },
    {
        "id": "33a157f74B373a9c",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 900,
        "wires": [
            [
                "3110b6e90ed8a87a"
            ]
        ]
    },
    {
        "id": "3110b6e90ed8a87a",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 900,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "cd5572f07eed81bb",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "B34_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B34,B34-INV02,INV02,INVERTER-02,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B34,B34-INV02,INV02,INVERTER-02,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B34,B34-INV02,INV02,INVERTER-02,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B34,B34-INV02,INV02,INVERTER-02,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B34,B34-INV02,INV02,INVERTER-02,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B34,B34-INV02,INV02,INVERTER-02,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B34,B34-INV02,INV02,INVERTER-02,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 940,
        "wires": [
            [
                "fd8aeb7b9ec29a57"
            ]
        ]
    },
    {
        "id": "fd8aeb7b9ec29a57",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 940,
        "wires": [
            [
                "eb5368623baae566"
            ]
        ]
    },
    {
        "id": "eb5368623baae566",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 940,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "8739f49c05742da7",
        "type": "mqtt out",
        "z": "bc7021b6e14a6496",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 1450,
        "y": 640,
        "wires": []
    },
    {
        "id": "1379e6da953f390d",
        "type": "join",
        "z": "bc7021b6e14a6496",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "8739f49c05742da7",
                "2375be6439f16747"
            ]
        ]
    },
    {
        "id": "bd38a0e5251018da",
        "type": "mqtt out",
        "z": "bc7021b6e14a6496",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 3090,
        "y": 640,
        "wires": []
    },
    {
        "id": "d53aa5d2488ea96a",
        "type": "join",
        "z": "bc7021b6e14a6496",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 640,
        "wires": [
            [
                "bd38a0e5251018da",
                "b82677f5b287428f"
            ]
        ]
    },
    {
        "id": "332bf4a9a8c9b96e",
        "type": "template",
        "z": "bc7021b6e14a6496",
        "name": "COMM",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27,BLOCK_27,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n2,B27,BLOCK_27,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n3,B28,BLOCK_28,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n4,B28,BLOCK_28,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n5,B29,BLOCK_29,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n6,B29,BLOCK_29,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n7,B30,BLOCK_30,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n8,B30,BLOCK_30,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n9,B31,BLOCK_31,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n10,B31,BLOCK_31,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n11,B32,BLOCK_32,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n12,B32,BLOCK_32,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n13,B34,BLOCK_34,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n14,B34,BLOCK_34,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n15,B35,BLOCK_35,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n16,B35,BLOCK_35,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n17,B36,BLOCK_36,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n18,B36,BLOCK_36,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n19,B37,BLOCK_37,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n20,B37,BLOCK_37,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n21,B38,BLOCK_38,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n22,B38,BLOCK_38,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n23,B39,BLOCK_39,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n24,B39,BLOCK_39,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n25,B40,BLOCK_40,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n26,B40,BLOCK_40,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n27,B43,BLOCK_43,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n28,B43,BLOCK_43,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n29,B45,BLOCK_45,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n30,B45,BLOCK_45,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n31,B46,BLOCK_46,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n32,B46,BLOCK_46,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 2080,
        "y": 1000,
        "wires": [
            [
                "c48d65dda2168c89"
            ]
        ]
    },
    {
        "id": "c48d65dda2168c89",
        "type": "csv",
        "z": "bc7021b6e14a6496",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 1000,
        "wires": [
            [
                "bc641d976ffa7966"
            ]
        ]
    },
    {
        "id": "bc641d976ffa7966",
        "type": "function",
        "z": "bc7021b6e14a6496",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].f}.${msg.payload[i].b}.${msg.payload[i].d}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": msg.payload[i].u\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1000,
        "wires": [
            [
                "e444bc462016e753"
            ]
        ]
    },
    {
        "id": "bf27accb05a65c6f",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "d9ba277473d634e4",
                "ca73456d95c72ec8"
            ]
        ]
    },
    {
        "id": "19ae032e9db68acd",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B37_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B37,B37-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B37,B37-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B37,B37-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B37,B37-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B37,B37-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B37,B37-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B37,B37-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "2f1a57a93964f5e1"
            ]
        ]
    },
    {
        "id": "2f1a57a93964f5e1",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 80,
        "wires": [
            [
                "5157ffbacd6eab46"
            ]
        ]
    },
    {
        "id": "5157ffbacd6eab46",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "5f3efe818cc50239",
        "type": "debug",
        "z": "f7deaf97a6ddfc85",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 600,
        "wires": []
    },
    {
        "id": "80d7b6f1bb0214ae",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B37_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B37,B37-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B37,B37-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B37,B37-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B37,B37-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B37,B37-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B37,B37-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B37,B37-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 120,
        "wires": [
            [
                "381de6675fcdbc91"
            ]
        ]
    },
    {
        "id": "381de6675fcdbc91",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 120,
        "wires": [
            [
                "b53bfc5efdb922f8"
            ]
        ]
    },
    {
        "id": "b53bfc5efdb922f8",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 120,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "3f44c3234b346a7b",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 200,
        "wires": [
            [
                "c008e316078782e9"
            ]
        ]
    },
    {
        "id": "c008e316078782e9",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 200,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "819414b20662b77b",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 240,
        "wires": [
            [
                "e244a10279d26df4"
            ]
        ]
    },
    {
        "id": "e244a10279d26df4",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 240,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "ac0ae0d6e2079e1b",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "75464d4b25392e36"
            ]
        ]
    },
    {
        "id": "75464d4b25392e36",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 320,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "a9366dfdffca211a",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 360,
        "wires": [
            [
                "1588a745b9e4fcc1"
            ]
        ]
    },
    {
        "id": "1588a745b9e4fcc1",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 360,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "b98339753c84c671",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 440,
        "wires": [
            [
                "191616c8b021f4a8"
            ]
        ]
    },
    {
        "id": "191616c8b021f4a8",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 440,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "fdd69b81934f04b1",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 480,
        "wires": [
            [
                "3c212138e8d230c7"
            ]
        ]
    },
    {
        "id": "3c212138e8d230c7",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "d9ba277473d634e4",
        "type": "influxdb batch",
        "z": "f7deaf97a6ddfc85",
        "d": true,
        "influxdb": "ea571d30B431616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 1350,
        "y": 540,
        "wires": []
    },
    {
        "id": "643d24b729864be3",
        "type": "inject",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 640,
        "wires": [
            [
                "09a3a5cfeff3c5f6"
            ]
        ]
    },
    {
        "id": "ce4fac557d780717",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B38_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B38,B38-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B38,B38-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B38,B38-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B38,B38-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B38,B38-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B38,B38-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B38,B38-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "3f44c3234b346a7b"
            ]
        ]
    },
    {
        "id": "0ea2462dff632307",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B38_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B38,B38-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B38,B38-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B38,B38-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B38,B38-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B38,B38-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B38,B38-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B38,B38-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "819414b20662b77b"
            ]
        ]
    },
    {
        "id": "4ddeca03fbaed395",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B39_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B39,B39-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B39,B39-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B39,B39-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B39,B39-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B39,B39-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B39,B39-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B39,B39-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "ac0ae0d6e2079e1b"
            ]
        ]
    },
    {
        "id": "a80c33494d53293c",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B39_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B39,B39-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B39,B39-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B39,B39-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B39,B39-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B39,B39-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B39,B39-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B39,B39-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "a9366dfdffca211a"
            ]
        ]
    },
    {
        "id": "420a275e068685a5",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B40_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B40,B40-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B40,B40-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B40,B40-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B40,B40-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B40,B40-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B40,B40-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B40,B40-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 440,
        "wires": [
            [
                "b98339753c84c671"
            ]
        ]
    },
    {
        "id": "cf8961a1917cdec1",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B40_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B40,B40-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B40,B40-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B40,B40-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B40,B40-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B40,B40-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B40,B40-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B40,B40-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "fdd69b81934f04b1"
            ]
        ]
    },
    {
        "id": "6b7b8f18956073e2",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B45_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B45,B45-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B45,B45-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B45,B45-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B45,B45-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B45,B45-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B45,B45-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B45,B45-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 560,
        "wires": [
            [
                "dddffcad316352e8"
            ]
        ]
    },
    {
        "id": "6b5dffe622fe7eda",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B45_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B45,B45-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B45,B45-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B45,B45-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B45,B45-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B45,B45-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B45,B45-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B45,B45-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 600,
        "wires": [
            [
                "b41b156bef064f44"
            ]
        ]
    },
    {
        "id": "dddffcad316352e8",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 560,
        "wires": [
            [
                "ea6116889ea72768"
            ]
        ]
    },
    {
        "id": "ea6116889ea72768",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 560,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "b41b156bef064f44",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 600,
        "wires": [
            [
                "2579abbe5535651e"
            ]
        ]
    },
    {
        "id": "2579abbe5535651e",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 600,
        "wires": [
            [
                "a32907b4de84931a"
            ]
        ]
    },
    {
        "id": "2b698ddfec32d914",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B46_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B46,B46-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B46,B46-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B46,B46-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B46,B46-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B46,B46-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B46,B46-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B46,B46-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 680,
        "wires": [
            [
                "49f2f2206e2fe457"
            ]
        ]
    },
    {
        "id": "49f2f2206e2fe457",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 680,
        "wires": [
            [
                "e17694ed3f558285"
            ]
        ]
    },
    {
        "id": "e17694ed3f558285",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 680,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "66063c9ab99ae1c1",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B46_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B46,B46-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B46,B46-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B46,B46-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B46,B46-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B46,B46-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B46,B46-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B46,B46-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 720,
        "wires": [
            [
                "ced8af0aba28c86d"
            ]
        ]
    },
    {
        "id": "ced8af0aba28c86d",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 720,
        "wires": [
            [
                "8b80713924e80bd7"
            ]
        ]
    },
    {
        "id": "8b80713924e80bd7",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 720,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "78f2f882c66106c5",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 800,
        "wires": [
            [
                "2832b50472b4b8c0"
            ]
        ]
    },
    {
        "id": "2832b50472b4b8c0",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 800,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "098749b416e88e94",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 840,
        "wires": [
            [
                "dcfd873cf05a28e4"
            ]
        ]
    },
    {
        "id": "dcfd873cf05a28e4",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 840,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "3d60778c1b06cbae",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 920,
        "wires": [
            [
                "ce61d0ba61cedbb4"
            ]
        ]
    },
    {
        "id": "ce61d0ba61cedbb4",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 920,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "39610c810a52f19c",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 960,
        "wires": [
            [
                "902d0aee9fa5b965"
            ]
        ]
    },
    {
        "id": "902d0aee9fa5b965",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 960,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "ecb5d72f13668222",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1040,
        "wires": [
            [
                "f4f83b9e9a1cde16"
            ]
        ]
    },
    {
        "id": "f4f83b9e9a1cde16",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1040,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "48dd3e3f72377610",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1080,
        "wires": [
            [
                "a5ec48eb4c3055d7"
            ]
        ]
    },
    {
        "id": "a5ec48eb4c3055d7",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1080,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "6206e0d760e9ba71",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B35_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B35,B35-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B35,B35-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B35,B35-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B35,B35-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B35,B35-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B35,B35-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B35,B35-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 800,
        "wires": [
            [
                "78f2f882c66106c5"
            ]
        ]
    },
    {
        "id": "428ff067773ea2b4",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B35_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B35,B35-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B35,B35-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B35,B35-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B35,B35-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B35,B35-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B35,B35-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B35,B35-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 840,
        "wires": [
            [
                "098749b416e88e94"
            ]
        ]
    },
    {
        "id": "4b4e49642c6f2547",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B36_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B36,B36-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B36,B36-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B36,B36-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B36,B36-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B36,B36-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B36,B36-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B36,B36-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 920,
        "wires": [
            [
                "3d60778c1b06cbae"
            ]
        ]
    },
    {
        "id": "3816075f07eaf52b",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B36_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B36,B36-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B36,B36-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B36,B36-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B36,B36-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B36,B36-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B36,B36-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B36,B36-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 960,
        "wires": [
            [
                "39610c810a52f19c"
            ]
        ]
    },
    {
        "id": "59cc5cce151d0a09",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B43_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B43,B43-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B43,B43-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B43,B43-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B43,B43-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B43,B43-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B43,B43-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B43,B43-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "ecb5d72f13668222"
            ]
        ]
    },
    {
        "id": "9df11704a452dc00",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B43_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B43,B43-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B43,B43-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B43,B43-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B43,B43-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B43,B43-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B43,B43-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B43,B43-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "48dd3e3f72377610"
            ]
        ]
    },
    {
        "id": "8b96973047b725ba",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B31_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B31,B31-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B31,B31-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B31,B31-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B31,B31-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B31,B31-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B31,B31-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B31,B31-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1160,
        "wires": [
            [
                "8029a68bf61ad198"
            ]
        ]
    },
    {
        "id": "b8f0e2d51e8d29c5",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B31_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B31,B31-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B31,B31-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B31,B31-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B31,B31-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B31,B31-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B31,B31-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B31,B31-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 530,
        "y": 1200,
        "wires": [
            [
                "e94ce33ac76add86"
            ]
        ]
    },
    {
        "id": "8029a68bf61ad198",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1160,
        "wires": [
            [
                "f24bc798cc2b031f"
            ]
        ]
    },
    {
        "id": "f24bc798cc2b031f",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1160,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "e94ce33ac76add86",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1200,
        "wires": [
            [
                "a2372347221d88bc"
            ]
        ]
    },
    {
        "id": "a2372347221d88bc",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1200,
        "wires": [
            [
                "b041bf94aeaf08c5"
            ]
        ]
    },
    {
        "id": "2db59751a4a5dccf",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].fields.value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].tags.b,\n            \"bd\": msg.payload[i].tags.bd,\n            \"d\": msg.payload[i].tags.d,\n            \"dd\": msg.payload[i].tags.dd,\n            \"dt\": msg.payload[i].tags.dt,\n            \"f\": msg.payload[i].tags.f,\n            \"fd\": msg.payload[i].tags.fd,\n            \"h\": msg.payload[i].tags.h,\n            \"iid\": msg.payload[i].tags.iid,\n            \"m\": msg.payload[i].tags.m,\n            \"p\": msg.payload[i].tags.p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n        node.send({ payload: obj });\n    }\n}\nreturn null",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 640,
        "wires": [
            [
                "ef32f3b265d18ada",
                "e235d2739ef54372"
            ]
        ]
    },
    {
        "id": "7ff74a0db3e6f702",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B27_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27,B27-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B27,B27-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B27,B27-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B27,B27-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B27,B27-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B27,B27-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B27,B27-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 320,
        "wires": [
            [
                "5f14580cfbd79550"
            ]
        ]
    },
    {
        "id": "5f14580cfbd79550",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 320,
        "wires": [
            [
                "a10dcf2bf3265871"
            ]
        ]
    },
    {
        "id": "a10dcf2bf3265871",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 320,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "0eb7d440d1c00723",
        "type": "debug",
        "z": "f7deaf97a6ddfc85",
        "name": "debug 2407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3090,
        "y": 600,
        "wires": []
    },
    {
        "id": "826003ea82899b8e",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B27_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27,B27-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B27,B27-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B27,B27-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B27,B27-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B27,B27-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B27,B27-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B27,B27-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 360,
        "wires": [
            [
                "b8429c3753a6d721"
            ]
        ]
    },
    {
        "id": "b8429c3753a6d721",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 360,
        "wires": [
            [
                "0344c4805b107dc9"
            ]
        ]
    },
    {
        "id": "0344c4805b107dc9",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 360,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "7e72b30633729d17",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 440,
        "wires": [
            [
                "99ddf02b7cc3d25e"
            ]
        ]
    },
    {
        "id": "99ddf02b7cc3d25e",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 440,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "e85d5cacf0e2df89",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 480,
        "wires": [
            [
                "8b375c1ca9e229ab"
            ]
        ]
    },
    {
        "id": "8b375c1ca9e229ab",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 480,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "3e3130c4438810e3",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 560,
        "wires": [
            [
                "e96b6ed0039aef06"
            ]
        ]
    },
    {
        "id": "e96b6ed0039aef06",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 560,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "13f384d2e44b94ba",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 600,
        "wires": [
            [
                "58db422f7da65912"
            ]
        ]
    },
    {
        "id": "58db422f7da65912",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 600,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "e54a22f05a5f9090",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 680,
        "wires": [
            [
                "c628290329919796"
            ]
        ]
    },
    {
        "id": "c628290329919796",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 680,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "88f505226ec12df3",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 720,
        "wires": [
            [
                "5c831d3888adeda1"
            ]
        ]
    },
    {
        "id": "5c831d3888adeda1",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 720,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "ef32f3b265d18ada",
        "type": "influxdb batch",
        "z": "f7deaf97a6ddfc85",
        "d": true,
        "influxdb": "ea571d30B431616d",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 2910,
        "y": 600,
        "wires": []
    },
    {
        "id": "6049874d68b9cd22",
        "type": "inject",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1650,
        "y": 640,
        "wires": [
            [
                "861691a83c785e52"
            ]
        ]
    },
    {
        "id": "c835a10417477ca4",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B28_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B28,B28-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B28,B28-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B28,B28-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B28,B28-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B28,B28-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B28,B28-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B28,B28-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 440,
        "wires": [
            [
                "7e72b30633729d17"
            ]
        ]
    },
    {
        "id": "3cbf4912ad3cd3e9",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B28_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B28,B28-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B28,B28-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B28,B28-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B28,B28-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B28,B28-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B28,B28-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B28,B28-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 480,
        "wires": [
            [
                "e85d5cacf0e2df89"
            ]
        ]
    },
    {
        "id": "a3e896cf6191b712",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B29_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B29,B29-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B29,B29-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B29,B29-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B29,B29-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B29,B29-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B29,B29-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B29,B29-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 560,
        "wires": [
            [
                "3e3130c4438810e3"
            ]
        ]
    },
    {
        "id": "ea6aac965eb68f1f",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B29_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B29,B29-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B29,B29-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B29,B29-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B29,B29-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B29,B29-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B29,B29-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B29,B29-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 600,
        "wires": [
            [
                "13f384d2e44b94ba"
            ]
        ]
    },
    {
        "id": "3e866dffee483ed2",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B30_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B30,B30-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B30,B30-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B30,B30-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B30,B30-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B30,B30-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B30,B30-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B30,B30-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 680,
        "wires": [
            [
                "e54a22f05a5f9090"
            ]
        ]
    },
    {
        "id": "330197afcd611ef2",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B30_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B30,B30-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B30,B30-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B30,B30-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B30,B30-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B30,B30-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B30,B30-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B30,B30-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 720,
        "wires": [
            [
                "88f505226ec12df3"
            ]
        ]
    },
    {
        "id": "95d70698c92e90dc",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B32_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B32,B32-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B32,B32-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B32,B32-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B32,B32-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B32,B32-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B32,B32-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B32,B32-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 800,
        "wires": [
            [
                "170f31a63962e4be"
            ]
        ]
    },
    {
        "id": "48a8611fc2cac299",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B32_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B32,B32-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B32,B32-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B32,B32-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B32,B32-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B32,B32-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B32,B32-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B32,B32-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 840,
        "wires": [
            [
                "01cdb9de9f01cbe4"
            ]
        ]
    },
    {
        "id": "170f31a63962e4be",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 800,
        "wires": [
            [
                "b882cd5b6d192bf9"
            ]
        ]
    },
    {
        "id": "b882cd5b6d192bf9",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 800,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "01cdb9de9f01cbe4",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 840,
        "wires": [
            [
                "22f6b57988ed2084"
            ]
        ]
    },
    {
        "id": "22f6b57988ed2084",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 840,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "c7aaa01634be0962",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B34_INV01",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B34,B34-INV01,INV01,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B34,B34-INV01,INV01,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B34,B34-INV01,INV01,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B34,B34-INV01,INV01,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B34,B34-INV01,INV01,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B34,B34-INV01,INV01,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B34,B34-INV01,INV01,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 900,
        "wires": [
            [
                "b1da971df8b718f6"
            ]
        ]
    },
    {
        "id": "b1da971df8b718f6",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 900,
        "wires": [
            [
                "4580fa96b531423e"
            ]
        ]
    },
    {
        "id": "4580fa96b531423e",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 900,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "aa66d8bddf5371c8",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "B34_INV02",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B34,B34-INV02,INV02,ICT-3,INVERTER,PAC,PAC,Server8782,8782,1,Truboard,0,new,kW,1\n2,B34,B34-INV02,INV02,ICT-3,INVERTER,QAC,QAC,Server8782,8782,1,Truboard,0,new,KVAr,1\n3,B34,B34-INV02,INV02,ICT-3,INVERTER,OLD_PAC_LIMIT,OLD_PAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n4,B34,B34-INV02,INV02,ICT-3,INVERTER,OLD_QAC_LIMIT,OLD_QAC_LIMIT,Server8782,8782,1,Truboard,,,,1\n5,B34,B34-INV02,INV02,ICT-3,INVERTER,OLD_PF_LIMIT,OLD_PF_LIMIT,Server8782,8782,1,Truboard,,,,1\n6,B34,B34-INV02,INV02,ICT-3,INVERTER,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n7,B34,B34-INV02,INV02,ICT-3,INVERTER,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8782,8782,1,Truboard,,,,1\n\n",
        "output": "str",
        "x": 2090,
        "y": 940,
        "wires": [
            [
                "6541c5b02a4cb0c3"
            ]
        ]
    },
    {
        "id": "6541c5b02a4cb0c3",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 940,
        "wires": [
            [
                "56ed674cf7b4a232"
            ]
        ]
    },
    {
        "id": "56ed674cf7b4a232",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].b}.${msg.payload[i].d}.${msg.payload[i].f}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 940,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    },
    {
        "id": "5a28aea355809fc5",
        "type": "mqtt out",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 1450,
        "y": 640,
        "wires": []
    },
    {
        "id": "ca73456d95c72ec8",
        "type": "join",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "5a28aea355809fc5",
                "5f3efe818cc50239"
            ]
        ]
    },
    {
        "id": "424a8fc87025bfb8",
        "type": "mqtt out",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "topic": "local_influx",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f7dc57f35fcfe8fe",
        "x": 3090,
        "y": 640,
        "wires": []
    },
    {
        "id": "e235d2739ef54372",
        "type": "join",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2910,
        "y": 640,
        "wires": [
            [
                "424a8fc87025bfb8",
                "0eb7d440d1c00723"
            ]
        ]
    },
    {
        "id": "445b7b515d638ec4",
        "type": "template",
        "z": "f7deaf97a6ddfc85",
        "name": "COMM",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Sl_No,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,B27,BLOCK_27,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n2,B27,BLOCK_27,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n3,B28,BLOCK_28,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n4,B28,BLOCK_28,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n5,B29,BLOCK_29,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n6,B29,BLOCK_29,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n7,B30,BLOCK_30,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n8,B30,BLOCK_30,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n9,B31,BLOCK_31,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n10,B31,BLOCK_31,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n11,B32,BLOCK_32,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n12,B32,BLOCK_32,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n13,B34,BLOCK_34,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n14,B34,BLOCK_34,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n15,B35,BLOCK_35,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n16,B35,BLOCK_35,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n17,B36,BLOCK_36,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n18,B36,BLOCK_36,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n19,B37,BLOCK_37,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n20,B37,BLOCK_37,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n21,B38,BLOCK_38,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n22,B38,BLOCK_38,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n23,B39,BLOCK_39,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n24,B39,BLOCK_39,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n25,B40,BLOCK_40,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n26,B40,BLOCK_40,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n27,B43,BLOCK_43,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n28,B43,BLOCK_43,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n29,B45,BLOCK_45,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n30,B45,BLOCK_45,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n31,B46,BLOCK_46,INV01,INV01,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1\n32,B46,BLOCK_46,INV02,INV02,INVERTER,COMM,COMMUNICATION,Server8782,8782,1,Truboard,0,,MW,1",
        "output": "str",
        "x": 2080,
        "y": 1000,
        "wires": [
            [
                "95e5adfb38e4e160"
            ]
        ]
    },
    {
        "id": "95e5adfb38e4e160",
        "type": "csv",
        "z": "f7deaf97a6ddfc85",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2250,
        "y": 1000,
        "wires": [
            [
                "19d9f104505a3c79"
            ]
        ]
    },
    {
        "id": "19d9f104505a3c79",
        "type": "function",
        "z": "f7deaf97a6ddfc85",
        "name": "Custom Function",
        "func": "let array = [];\nconst time = new Date().getTime();\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const tag_val = `${msg.payload[i].f}.${msg.payload[i].b}.${msg.payload[i].d}`;\n    const val = global.get(tag_val);\n    const value = (val *(msg.payload[i].mf))\n\n    const obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": value\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": msg.payload[i].u\n        },\n        timestamp: time\n    };\n\n    array.push(obj);\n}\n\nmsg.payload = array;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1000,
        "wires": [
            [
                "026fbc6f57ee8022"
            ]
        ]
    }
]